#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MIRAI Desktop Agent V2

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞:
- –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–º—ã—à—å, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
- –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ Vision
- OCR –∏ Computer Vision
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏
- –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
"""

import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ mirai-agent
sys.path.insert(0, str(Path(__file__).parent))

try:
    from core.desktop_agent_v2 import MiraiDesktopAgent
except ImportError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å desktop_agent_v2")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: mirai-agent/core/desktop_agent_v2.py")
    sys.exit(1)


def test_initialization():
    """–¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞")
    print("=" * 70)
    
    try:
        agent = MiraiDesktopAgent(
            enable_safety=True,
            enable_memory=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            screenshots_dir="test_screenshots"
        )
        
        print(f"‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        print(f"   –û–°: {agent.os_type}")
        print(f"   –≠–∫—Ä–∞–Ω: {agent.screen_width}x{agent.screen_height}")
        print(f"   –ú–æ–¥–µ–ª—å: {agent.model}")
        print(f"   –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {agent.enable_safety}")
        
        return agent
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return None


def test_basic_operations(agent):
    """–¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢ 2: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    print("=" * 70)
    
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏
    print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏...")
    result = agent.get_mouse_position()
    print(f"   {result}")
    
    # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –º—ã—à—å
    print("\n2Ô∏è‚É£ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∏...")
    result = agent.move_mouse(100, 100, duration=0.5)
    print(f"   {result}")
    
    # –ü–æ–¥–æ–∂–¥–∞—Ç—å
    print("\n3Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—É...")
    result = agent.wait_seconds(1)
    print(f"   {result}")
    
    print("\n‚úÖ –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")


def test_screenshot_and_vision(agent):
    """–¢–µ—Å—Ç 3: –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ Vision"""
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢ 3: –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ Vision –∞–Ω–∞–ª–∏–∑")
    print("=" * 70)
    
    # –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
    result = agent.take_screenshot("full")
    print(f"   {result}")
    
    if agent.last_screenshot_path:
        print(f"   –ü—É—Ç—å: {agent.last_screenshot_path}")
        
        # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Vision
        print("\n2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ GPT-4 Vision...")
        result = agent.analyze_screenshot(
            "–û–ø–∏—à–∏ —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ. "
            "–ö–∞–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã? –ß—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ?"
        )
        print(f"   {result[:200]}...")
        
        print("\n‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ Vision —Ä–∞–±–æ—Ç–∞—é—Ç")
    else:
        print("‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")


def test_window_operations(agent):
    """–¢–µ—Å—Ç 4: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ–∫–Ω–∞–º–∏"""
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢ 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏")
    print("=" * 70)
    
    # –ù–∞–π—Ç–∏ –æ–∫–Ω–∞
    print("\n1Ô∏è‚É£ –ü–æ–∏—Å–∫ –æ–∫–æ–Ω —Å 'explorer' –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ...")
    result = agent.find_window("explorer")
    print(f"   {result}")
    
    # –û—Ç–∫—Ä—ã—Ç—å Notepad (–µ—Å–ª–∏ –Ω–∞ Windows)
    if agent.os_type == "Windows":
        print("\n2Ô∏è‚É£ –û—Ç–∫—Ä—ã—Ç–∏–µ Notepad...")
        result = agent.open_application("notepad")
        print(f"   {result}")
        
        time.sleep(2)
        
        # –ù–∞–π—Ç–∏ –æ–∫–Ω–æ Notepad
        print("\n3Ô∏è‚É£ –ü–æ–∏—Å–∫ –æ–∫–Ω–∞ Notepad...")
        result = agent.find_window("notepad")
        print(f"   {result}")
        
        # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ
        print("\n4Ô∏è‚É£ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫–Ω–∞ Notepad...")
        result = agent.activate_window("notepad")
        print(f"   {result}")
        
        print("\n‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ö†Ô∏è –¢–µ—Å—Ç –æ–∫–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ Windows")


def test_ocr(agent):
    """–¢–µ—Å—Ç 5: OCR"""
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢ 5: OCR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)")
    print("=" * 70)
    
    print("\n1Ô∏è‚É£ –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ...")
    result = agent.find_text_on_screen("File")
    print(f"   {result[:200]}...")
    
    if "‚úÖ" in result:
        print("\n‚úÖ OCR —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("\n‚ö†Ô∏è OCR –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è pytesseract)")


def test_autonomous_task(agent):
    """–¢–µ—Å—Ç 6: –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢ 6: –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    print("=" * 70)
    
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞
    task = "–ü–æ–ª—É—á–∏ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏, –∑–∞—Ç–µ–º —Å–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"
    
    print(f"\nüìã –ó–∞–¥–∞—á–∞: {task}")
    print("\nü§î –ê–≥–µ–Ω—Ç –¥—É–º–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç...\n")
    
    result = agent.execute_task(task, max_iterations=5)
    
    print("\n" + "-" * 70)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print("-" * 70)
    print(result)
    
    if "‚úÖ" in result or "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" in result.lower():
        print("\n‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–∞")
    else:
        print("\n‚ö†Ô∏è –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")


def test_action_history(agent):
    """–¢–µ—Å—Ç 7: –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π"""
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢ 7: –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π")
    print("=" * 70)
    
    history = agent.get_action_history(limit=10)
    
    print(f"\nüìù –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {len(agent.action_history)}")
    print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(history)} –¥–µ–π—Å—Ç–≤–∏–π:")
    
    for i, action in enumerate(history, 1):
        print(f"\n   {i}. {action['action_type']}")
        print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç: {action['result'][:50]}...")
        print(f"      –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {action['duration']:.3f}—Å")
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
    history_file = "test_action_history.json"
    agent.save_action_history(history_file)
    print(f"\nüíæ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {history_file}")
    
    print("\n‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë     –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MIRAI Desktop Agent V2                            ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    
    # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    agent = test_initialization()
    if not agent:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        return 1
    
    # –í—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
    print("\n" + "=" * 70)
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
    print("=" * 70)
    print("1. –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–º—ã—à—å, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)")
    print("2. –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ Vision")
    print("3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏")
    print("4. OCR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)")
    print("5. –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞")
    print("6. –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π")
    print("7. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
    print()
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç (1-7) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—Å–µ—Ö: ").strip()
    
    try:
        if not choice or choice == "7":
            # –í—Å–µ —Ç–µ—Å—Ç—ã
            test_basic_operations(agent)
            test_screenshot_and_vision(agent)
            test_window_operations(agent)
            test_ocr(agent)
            test_autonomous_task(agent)
            test_action_history(agent)
        
        elif choice == "1":
            test_basic_operations(agent)
        elif choice == "2":
            test_screenshot_and_vision(agent)
        elif choice == "3":
            test_window_operations(agent)
        elif choice == "4":
            test_ocr(agent)
        elif choice == "5":
            test_autonomous_task(agent)
        elif choice == "6":
            test_action_history(agent)
        else:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: {choice}")
            return 1
        
        print("\n" + "=" * 70)
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("=" * 70)
        
        return 0
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit(main())
