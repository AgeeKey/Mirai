// üî• –¢–ï–°–¢ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ì–û –†–ï–ñ–ò–ú–ê COPILOT AUTO ACCEPT
// –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–±—Ä–∞—Ç—å –∫–æ–¥ –Ω–∏–∂–µ - Copilot –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å!

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞
function factorial(n: number): number {
  // –ù–∞—á–Ω–∏ –Ω–∞–±–∏—Ä–∞—Ç—å: if (n <= 1) return 1;
  // –ó–∞—Ç–µ–º Copilot –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é
  return n <= 1 ? 1 : n * factorial(n - 1); // <-- –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, —Ç–µ—Å—Ç –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
class User {
  constructor(
    public name: string,
    public email: string,
    public age: number
  ) {}
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è - –Ω–∞—á–Ω–∏ –Ω–∞–±–∏—Ä–∞—Ç—å
  isAdult() {
    // –ù–∞—á–Ω–∏ –Ω–∞–±–∏—Ä–∞—Ç—å: return this.age >= 18
    return this.age >= 18;
  }
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –Ω–∞—á–Ω–∏ –Ω–∞–±–∏—Ä–∞—Ç—å
  getInfo() {
    // –ù–∞—á–Ω–∏ –Ω–∞–±–∏—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    return `${this.name} <${this.email}> (${this.age})`;
  }
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function fetchUserData(userId: string) {
  // –ù–∞—á–Ω–∏ –Ω–∞–±–∏—Ä–∞—Ç—å: try {
  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    await new Promise(r => setTimeout(r, 50));
    return new User("Test", `${userId}@mail.local`, 25);
  } catch (e) {
    console.error("Fetch error", e);
    return null;
  }
}

// –ú–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª - –Ω–∞—á–Ω–∏ –Ω–∞–±–∏—Ä–∞—Ç—å
const evenNumbers = numbers.filter(n => n % 2 === 0);

// –£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ 2 - –Ω–∞—á–Ω–∏ –Ω–∞–±–∏—Ä–∞—Ç—å  
const doubled = numbers.map(n => n * 2);

console.log("üî• –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–±—Ä–∞—Ç—å –∫–æ–¥ –≤—ã—à–µ.");

export { factorial, User, fetchUserData, evenNumbers, doubled };