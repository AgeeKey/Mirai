// ‚ö° STRESS / SHOWCASE –§–ê–ô–õ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ì–û –†–ï–ñ–ò–ú–ê AUTO ACCEPT
// –û—Ç–∫—Ä–æ–π —ç—Ç–æ—Ç —Ñ–∞–π–ª, –Ω–∞—á–Ω–∏ –ø–µ—á–∞—Ç–∞—Ç—å —Ñ—Ä–∞–∑—ã –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ‚Äî —Å–º–æ—Ç—Ä–∏, –∫–∞–∫ Copilot –¥–æ–ø–∏—Å—ã–≤–∞–µ—Ç –∏ –∫–∞–∫
// —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ü–†–ò–ù–ò–ú–ê–ï–¢ –ø–æ–¥—Å–∫–∞–∑–∫—É (üî• –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ).
// -----------------------------------------------------------------------------
// –ü–æ–¥—Å–∫–∞–∑–∫–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –±–ª–æ–∫–∞–º. –ò–¥–∏ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ –∏ —Ç–µ—Å—Ç–∏—Ä—É–π.
// –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –≤–∫–ª—é—á–∏ strategy = "first" –∏ smartGuards = false, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–∞–∫—Å–∏–º—É–º.

// 1. –ü–†–û–°–¢–´–ï –§–£–ù–ö–¶–ò–ò -----------------------------------------------------------
// –ù–∞—á–Ω–∏ –Ω–∞–±–∏—Ä–∞—Ç—å: function sum(a: number, b: number)
// –û–∂–∏–¥–∞–µ–º–æ: Copilot –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Ç–µ–ª–æ return a + b;
function sum(a: number, b: number) { return a + b; }

// –ù–∞—á–Ω–∏: const square = (n: number)
const square = (n: number) => n * n;

// –ù–∞—á–Ω–∏: function fibonacci(n: number)
function fibonacci(n: number): number {
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}

// 2. –û–ë–†–ê–ë–û–¢–ö–ê –ú–ê–°–°–ò–í–û–í -------------------------------------------------------
// –ù–∞—á–Ω–∏: const nums = [
const nums = [1,2,3,4,5,6,7,8,9,10];
// –ù–∞—á–Ω–∏: const evens = nums.filter(
const evens = nums.filter(n => n % 2 === 0);
// –ù–∞—á–Ω–∏: const aggregated = nums.reduce(
const aggregated = nums.reduce((acc, v) => acc + v, 0);

// 3. –ö–õ–ê–°–°–´ –ò –û–ë–™–ï–ö–¢–´ ---------------------------------------------------------
// –ù–∞—á–Ω–∏: class Account {
class Account {
  constructor(public id: string, public balance: number = 0) {}
  // –ù–∞—á–Ω–∏: deposit(amount: number)
  deposit(amount: number) { this.balance += amount; return this; }
  // –ù–∞—á–Ω–∏: withdraw(amount: number)
  withdraw(amount: number) { if (amount > this.balance) throw new Error('Insufficient'); this.balance -= amount; return this; }
  // –ù–∞—á–Ω–∏: toString()
  toString() { return `Account(${this.id}) balance=${this.balance}`; }
}

// 4. –ê–°–ò–ù–•–†–û–ù–ù–´–ô –ö–û–î ----------------------------------------------------------
// –ù–∞—á–Ω–∏: async function delay(ms: number)
async function delay(ms: number) { return new Promise(r => setTimeout(r, ms)); }

// –ù–∞—á–Ω–∏: async function fetchJson(url: string)
async function fetchJson(url: string) {
  try {
    // –í —Å—Ä–µ–¥–µ Node fetch –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å: –¥–µ–ª–∞–µ–º –ª–µ–Ω–∏–≤—ã–π fallback
    let fetched: any;
    if (typeof (globalThis as any).fetch === 'function') {
      fetched = await (globalThis as any).fetch(url);
      if (!fetched.ok) throw new Error('Bad status ' + fetched.status);
      return await fetched.json();
    } else {
      // –ü—Ä–æ—Å—Ç–æ–π fallback –Ω–∞ https –±–µ–∑ –ø–æ–ª–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
      const https = await import('https');
      fetched = await new Promise<any>((resolve, reject) => {
        https.get(url, (resp: any) => {
          if (resp.statusCode && resp.statusCode >= 400) {
            reject(new Error('Bad status ' + resp.statusCode));
            return;
          }
          const chunks: Buffer[] = [];
            resp.on('data', (c: Buffer) => chunks.push(c));
            resp.on('end', () => {
              try {
                const raw = Buffer.concat(chunks).toString('utf8');
                resolve({ json: () => JSON.parse(raw) });
              } catch (e) { reject(e); }
            });
        }).on('error', reject);
      });
      return await fetched.json();
    }
  } catch (e) {
    console.error('fetchJson error', e);
    return null;
  }
}

// 5. –ü–ê–¢–¢–ï–†–ù–´ –° GUARDS --------------------------------------------------------
// –ù–∞—á–Ω–∏: function isNonEmptyString(value: any)
function isNonEmptyString(value: any): value is string {
  return typeof value === 'string' && value.trim().length > 0;
}

// –ù–∞—á–Ω–∏: function safeParseInt(str: string)
function safeParseInt(str: string) {
  const n = parseInt(str, 10);
  return Number.isNaN(n) ? null : n;
}

// 6. –û–ë–û–†–ê–ß–ò–í–ê–ù–ò–ï / –î–ï–ö–û–†–ê–¢–û–†–´ (–ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä) -------------------------------
// –ù–∞—á–Ω–∏: function measure<T extends(...args:any[]) => any>(fn: T)
function measure<T extends (...args: any[]) => any>(fn: T): T {
  return ((...args: any[]) => {
    const start = performance.now();
    const result = fn(...args);
    const end = performance.now();
    console.log(`‚è±Ô∏è ${fn.name} took ${(end - start).toFixed(2)}ms`);
    return result;
  }) as T;
}

// 7. –†–ê–ë–û–¢–ê –° –ö–ê–†–¢–ê–ú–ò / –ù–ê–ë–û–†–ê–ú–ò ---------------------------------------------
// –ù–∞—á–Ω–∏: const userSet = new Set<string>([
const userSet = new Set<string>(['alice','bob','carol']);
// –ù–∞—á–Ω–∏: const userMap = new Map<string, number>([
const userMap = new Map<string, number>([['alice',1],['bob',2]]);

// 8. –ì–ï–ù–ï–†–ê–¢–û–†–´ ----------------------------------------------------------------
// –ù–∞—á–Ω–∏: function *range(start: number, end: number)
function *range(start: number, end: number) {
  for (let i = start; i <= end; i++) yield i;
}

// 9. ERROR HANDLING –° –ü–û–í–¢–û–†–û–ú -------------------------------------------------
// –ù–∞—á–Ω–∏: async function withRetry<T>(fn: () => Promise<T>
async function withRetry<T>(fn: () => Promise<T>, attempts = 3): Promise<T> {
  let lastErr: any;
  for (let i = 0; i < attempts; i++) {
    try { return await fn(); } catch (e) { lastErr = e; await delay(50); }
  }
  throw lastErr;
}

// 10. –ü–†–û–°–¢–ê–Ø –ò–ú–ò–¢–ê–¶–ò–Ø DOMAIN –ú–û–î–ï–õ–ò ------------------------------------------
// –ù–∞—á–Ω–∏: interface Order {
interface Order { id: string; items: string[]; total: number; createdAt: Date; }
// –ù–∞—á–Ω–∏: function createOrder(id: string)
function createOrder(id: string): Order { return { id, items: [], total: 0, createdAt: new Date() }; }
// –ù–∞—á–Ω–∏: function addItem(order: Order, name: string, price: number)
function addItem(order: Order, name: string, price: number) { order.items.push(name); order.total += price; }

// 11. –¢–ï–°–¢–û–í–´–ï –í–´–ó–û–í–´ ---------------------------------------------------------
async function demo() {
  const acc = new Account('demo').deposit(100).withdraw(40);
  console.log(acc.toString());
  console.log('fibonacci(8)=', fibonacci(8));
  console.log('sum=', sum(2,5), 'square=', square(9));
  console.log('evens=', evens, 'agg=', aggregated);
  console.log('range(3,7)=', [...range(3,7)]);
  console.log('isNonEmptyString("  hi ")=', isNonEmptyString('  hi '));
  console.log('safeParseInt("42")=', safeParseInt('42'));
  await withRetry(async () => { await delay(10); return true; });
  console.log('‚úÖ demo complete');
}

// –ó–∞–ø—É—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –≤ Node (–ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å). –î–ª—è –∑–∞–ø—É—Å–∫–∞:
// npx ts-node src/tests/auto-accept-stress.ts (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ts-node)
// –∏–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ tsc, –∑–∞—Ç–µ–º node dist/tests/auto-accept-stress.js

if (require.main === module) {
  demo();
}

export {
    Account, addItem, aggregated, createOrder, delay, demo, evens, fetchJson, fibonacci, isNonEmptyString, measure, nums, range, safeParseInt, square, sum, userMap, userSet, withRetry
};

