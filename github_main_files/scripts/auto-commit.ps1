# üî• EXTREME Copilot Auto Accept Configuration
# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤
# –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö!

param(
    [string]$ConfigPath = ".\scripts\auto-commit-config.json",
    [switch]$DryRun = $false,
    [switch]$Verbose = $false
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (-not (Test-Path $ConfigPath)) {
    Write-Error "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $ConfigPath"
    exit 1
}

$config = Get-Content $ConfigPath | ConvertFrom-Json
Write-Host "üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑: $ConfigPath" -ForegroundColor Green

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $color = switch ($Level) {
        "INFO" { "White" }
        "WARN" { "Yellow" }
        "ERROR" { "Red" }
        "SUCCESS" { "Green" }
        default { "White" }
    }
    Write-Host "[$timestamp] [$Level] $Message" -ForegroundColor $color
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
if (-not (Test-Path ".git")) {
    Write-Log "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏" "ERROR"
    exit 1
}

Write-Log "üöÄ –ó–∞–ø—É—Å–∫ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ì–û –∞–≤—Ç–æ-–∫–æ–º–º–∏—Ç–∞..." "INFO"
Write-Log "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: $($config.intervalMinutes) –º–∏–Ω—É—Ç" "INFO"
Write-Log "üìÅ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: $($config.maxFileSizeKB) KB" "INFO"

# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ-–∫–æ–º–º–∏—Ç–∞
function Invoke-AutoCommit {
    try {
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        $status = git status --porcelain
        if (-not $status) {
            if ($Verbose) {
                Write-Log "‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞" "INFO"
            }
            return
        }

        Write-Log "üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è:" "INFO"
        if ($Verbose) {
            $status | ForEach-Object { Write-Log "  $_" "INFO" }
        }

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        $largeFiles = @()
        git diff --cached --name-only 2>$null | ForEach-Object {
            $file = $_
            if (Test-Path $file) {
                $sizeKB = (Get-Item $file).Length / 1024
                if ($sizeKB -gt $config.maxFileSizeKB) {
                    $largeFiles += $file
                }
            }
        }

        if ($largeFiles.Count -gt 0) {
            Write-Log "‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤: $($largeFiles -join ', ')" "WARN"
            $largeFiles | ForEach-Object { git reset HEAD $_ 2>$null }
        }

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if (-not $DryRun) {
            git add .
            
            # –°–æ–∑–¥–∞–Ω–∏–µ commit message
            $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            $commitMsg = "$($config.commitPrefix) $timestamp"
            
            if ($config.includeFileCount) {
                $fileCount = (git diff --cached --name-only | Measure-Object).Count
                $commitMsg += " ($fileCount files)"
            }

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
            git commit -m $commitMsg

            if ($LASTEXITCODE -eq 0) {
                Write-Log "‚úÖ –ö–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: $commitMsg" "SUCCESS"
                
                # –ê–≤—Ç–æ–ø—É—à (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
                if ($config.autoPush) {
                    Write-Log "üì§ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–ø—É—à..." "INFO"
                    git push origin HEAD
                    if ($LASTEXITCODE -eq 0) {
                        Write-Log "‚úÖ –ü—É—à –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ" "SUCCESS"
                    } else {
                        Write-Log "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—à–µ" "ERROR"
                    }
                }
            } else {
                Write-Log "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞" "ERROR"
            }
        } else {
            Write-Log "üîç DRY RUN: –ö–æ–º–º–∏—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω" "WARN"
        }

    } catch {
        Write-Log "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ-–∫–æ–º–º–∏—Ç–∞: $($_.Exception.Message)" "ERROR"
    }
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
if ($config.runOnce) {
    Write-Log "üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞..." "INFO"
    Invoke-AutoCommit
} else {
    Write-Log "üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞..." "INFO"
    Write-Log "‚ö†Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C" "WARN"
    
    $intervalMs = $config.intervalMinutes * 60 * 1000
    
    while ($true) {
        Invoke-AutoCommit
        
        if ($Verbose) {
            Write-Log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ $($config.intervalMinutes) –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞..." "INFO"
        }
        
        Start-Sleep -Milliseconds $intervalMs
    }
}

Write-Log "üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω" "INFO"