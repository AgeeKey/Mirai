#!/usr/bin/env python3
"""
–ü–û–õ–ù–´–ô –¢–ï–°–¢ –í–°–ï–• 8 –Ø–ó–´–ö–û–í –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø
"""

import asyncio
import sys
import os

sys.path.insert(0, "/root/mirai/mirai-agent")

# –î–æ–±–∞–≤–ª—è–µ–º Rust –≤ PATH
os.environ["PATH"] = f"{os.path.expanduser('~')}/.cargo/bin:" + os.environ["PATH"]

from core.multi_language_executor import MultiLanguageExecutor


async def test_all_languages():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö 8 —è–∑—ã–∫–æ–≤"""
    print("=" * 80)
    print("üåç –¢–ï–°–¢ –í–°–ï–• 8 –Ø–ó–´–ö–û–í –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø MIRAI")
    print("=" * 80)

    executor = MultiLanguageExecutor()

    tests = [
        {
            "name": "üêç Python",
            "code": """print("‚úÖ Python —Ä–∞–±–æ—Ç–∞–µ—Ç!")
import math
print(f"œÄ = {math.pi:.2f}")""",
            "language": "python",
        },
        {
            "name": "üìú JavaScript",
            "code": """console.log("‚úÖ JavaScript —Ä–∞–±–æ—Ç–∞–µ—Ç!");
const pi = Math.PI;
console.log(`œÄ = ${pi.toFixed(2)}`);""",
            "language": "javascript",
        },
        {
            "name": "üìò TypeScript",
            "code": """const message: string = "‚úÖ TypeScript —Ä–∞–±–æ—Ç–∞–µ—Ç!";
console.log(message);
const pi: number = Math.PI;
console.log(`œÄ = ${pi.toFixed(2)}`);""",
            "language": "typescript",
        },
        {
            "name": "üîß C",
            "code": """#include <stdio.h>
#include <math.h>
int main() {
    printf("‚úÖ C —Ä–∞–±–æ—Ç–∞–µ—Ç!\\n");
    printf("œÄ = %.2f\\n", M_PI);
    return 0;
}""",
            "language": "c",
        },
        {
            "name": "‚öôÔ∏è C++",
            "code": """#include <iostream>
#include <cmath>
using namespace std;
int main() {
    cout << "‚úÖ C++ —Ä–∞–±–æ—Ç–∞–µ—Ç!" << endl;
    cout << "œÄ = " << M_PI << endl;
    return 0;
}""",
            "language": "cpp",
        },
        {
            "name": "üîµ Go",
            "code": """package main
import (
    "fmt"
    "math"
)
func main() {
    fmt.Println("‚úÖ Go —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    fmt.Printf("œÄ = %.2f\\n", math.Pi)
}""",
            "language": "go",
        },
        {
            "name": "ü¶Ä Rust",
            "code": """fn main() {
    println!("‚úÖ Rust —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    let pi = std::f64::consts::PI;
    println!("œÄ = {:.2}", pi);
}""",
            "language": "rust",
        },
        {
            "name": "üêö Bash",
            "code": '''#!/bin/bash
echo "‚úÖ Bash —Ä–∞–±–æ—Ç–∞–µ—Ç!"
echo "Hostname: $(hostname)"
echo "Date: $(date +%Y-%m-%d)"''',
            "language": "bash",
        },
    ]

    passed = 0
    failed = 0

    for test in tests:
        print(f"\n{'='*80}")
        print(f"{test['name']}")
        print(f"{'='*80}")

        result = await executor.execute_code(test["code"], test["language"])

        if result["success"]:
            print(f"‚úÖ –£–°–ü–ï–• ({result['execution_time']}s)")
            print(f"–í—ã–≤–æ–¥:")
            print(result["output"])
            passed += 1
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê:")
            print(result["error"])
            failed += 1

    print(f"\n{'='*80}")
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"{'='*80}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}/8")
    print(f"‚ùå –û—à–∏–±–æ–∫: {failed}/8")
    print(f"{'='*80}")

    if passed == 8:
        print("üéâ –í–°–ï 8 –Ø–ó–´–ö–û–í –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û!")
    else:
        print(f"‚ö†Ô∏è {failed} —è–∑—ã–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    print(f"\nüöÄ MIRAI –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: {', '.join(executor.get_supported_languages())}")


if __name__ == "__main__":
    asyncio.run(test_all_languages())
