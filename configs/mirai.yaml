# ═══════════════════════════════════════════════════════════════════
# MIRAI Unified Configuration
# ═══════════════════════════════════════════════════════════════════
#
# Версия: 2.0.0
# Кодовое имя: Evolution
# Дата: 2025-10-14
#
# Этот конфиг объединяет:
# - 🌸 MIRAI Intelligence (что хочет AI)
# - 🔥 Production Reliability (как сделать надёжно)
#
# ═══════════════════════════════════════════════════════════════════

# ───────────────────────────────────────────────────────────────────
# Метаданные
# ───────────────────────────────────────────────────────────────────
version: "2.0.0"
codename: "Evolution"
name: "MIRAI AI Agent"
description: "Autonomous AI Agent with Memory and Self-Evolution"

# ───────────────────────────────────────────────────────────────────
# OpenAI Configuration (Production-Grade 🔥 + MIRAI Рекомендации 🌸)
# ───────────────────────────────────────────────────────────────────
openai:
  # Дефолтные настройки для всех запросов
  defaults:
    timeout_s: 90                # Таймаут для чата
    max_retries: 4               # Количество попыток
    backoff:
      base_ms: 200               # Начальная задержка
      max_ms: 8000               # Максимальная задержка
      jitter: true               # Случайный джиттер

  # Модели для разных задач
  models:
    # 70% задач - экономичная модель (MIRAI рекомендовала)
    main:
      name: gpt-4o-mini
      temperature: 0.25          # Низкая для детерминизма
      top_p: 0.9
      frequency_penalty: 0.1
      presence_penalty: 0.0
      max_tokens: 2000
      use_cases:
        - "простые вопросы"
        - "базовая обработка"
        - "быстрые проверки"
        - "UI ответы"

    # 25% задач - мощная модель (MIRAI хотела GPT-4o)
    heavy:
      name: gpt-4o
      temperature: 0.25
      top_p: 0.9
      frequency_penalty: 0.1
      presence_penalty: 0.0
      max_tokens: 2500
      use_cases:
        - "code generation"
        - "анализ данных"
        - "multi-step reasoning"
        - "рефакторинг"
        - "сложная логика"

    # 5% задач - быстрая фильтрация (Production добавил)
    fast:
      name: gpt-3.5-turbo
      temperature: 0.2
      top_p: 0.9
      max_tokens: 1200
      use_cases:
        - "фильтрация спама"
        - "быстрая классификация"
        - "intent detection"

    # Creative tasks (осторожно с temperature!)
    creative:
      name: gpt-4o
      temperature: 0.4           # НЕ 0.7-1.0! (production лимит)
      top_p: 0.9
      frequency_penalty: 0.3
      presence_penalty: 0.2
      max_tokens: 2000
      use_cases:
        - "документация"
        - "README генерация"
        - "commit messages"

    # Embeddings для RAG и памяти (Production добавил)
    embed:
      name: text-embedding-3-large
      dimensions: 3072
      timeout_s: 30
      max_retries: 5
      use_cases:
        - "RAG индексация"
        - "semantic search"
        - "долгосрочная память"

    # Reasoning для критических задач (MIRAI упоминала o1-preview)
    reasoning:
      name: o1-preview
      temperature: 1.0
      top_p: 1.0
      max_tokens: 4096
      timeout_s: 120
      enabled: false             # Дорого, включать осторожно!
      use_cases:
        - "научные исследования"
        - "сложная логика"
        - "критический анализ"

  # Лимиты и квоты (Production безопасность)
  limits:
    concurrency:
      chat: 16                   # Параллельных чатов
      embeddings: 64             # Параллельных embeddings
      background: 4              # Фоновых задач

    tokens:
      per_minute: 150000         # Общий лимит
      per_user_minute: 10000     # На пользователя
      per_request_max: 4096      # Максимум на запрос

    rps:                         # Requests per second
      chat: 10
      embeddings: 50

  # Circuit Breaker (Production защита от каскадных фейлов)
  circuit_breaker:
    enabled: true
    failure_threshold: 5         # Фейлов подряд
    timeout_s: 60                # Открыт на N секунд
    half_open_interval_s: 30     # Проба каждые N секунд
    success_threshold: 2         # Успехов для закрытия

  # Деградация при перегрузке (Production стратегия)
  degradation:
    enabled: true
    rules:
      - trigger: "rate_limit_429"
        action: "switch_to_main"   # gpt-4o → gpt-4o-mini
      - trigger: "latency_high"
        action: "reduce_tokens"    # -30% max_tokens
      - trigger: "error_rate_5pct"
        action: "trim_context"     # 12 → 6 реплик

# ───────────────────────────────────────────────────────────────────
# Memory System (MIRAI Топ-1 Желание! 🌸)
# ───────────────────────────────────────────────────────────────────
memory:
  enabled: true
  backend: "sqlite"              # Или "postgresql" для production
  db_path: "data/mirai_memory.db"
  session_storage: "data/sessions/"

  # Краткосрочная память (в рамках сессии)
  short_term:
    max_messages: 12             # Production лимит (MIRAI не упомянула)
    ttl_hours: 24                # Время жизни сессии
    auto_summarize: true         # Авто-резюме при переполнении

  # Долгосрочная память (между сессиями - MIRAI хотела!)
  long_term:
    enabled: true
    retention_days: 90           # Хранить 90 дней
    backup_enabled: true
    backup_interval_hours: 24

  # Предпочтения пользователей (MIRAI хотела помнить!)
  user_preferences:
    enabled: true
    remember:
      - "coding_style"
      - "communication_tone"
      - "favorite_tools"
      - "project_context"

  # RAG (Retrieval-Augmented Generation)
  rag:
    enabled: true
    vector_store: "chroma"       # Или "faiss", "pinecone"
    cache_embeddings: true       # Production оптимизация
    update_strategy: "diff"      # Только изменения
    max_results: 5               # Топ-5 релевантных

# ───────────────────────────────────────────────────────────────────
# Monitoring & Logging (Production Requirement 🔥)
# ───────────────────────────────────────────────────────────────────
monitoring:
  enabled: true

  # Логирование
  logs:
    path: "/tmp/mirai.log"
    level: "INFO"                # DEBUG, INFO, WARNING, ERROR
    format: "json"               # json или text
    rotate:
      enabled: true
      max_bytes: 10485760        # 10 MB
      backup_count: 5
    fields:                      # Что логировать (Production требование)
      - "timestamp"
      - "level"
      - "module"
      - "message"
      - "model"
      - "tokens_in"
      - "tokens_out"
      - "latency_ms"
      - "attempt_number"
      - "error_code"
      - "user_id"

  # Метрики (Prometheus)
  metrics:
    enabled: true
    provider: "prometheus"
    port: 9090
    metrics:                     # Какие метрики собирать
      - "requests_total"
      - "requests_errors"
      - "latency_p50_p95_p99"
      - "tokens_per_minute"
      - "retry_rate"
      - "circuit_breaker_open"
      - "memory_usage"
      - "active_sessions"

  # Трейсинг (OpenTelemetry)
  tracing:
    enabled: false               # Включить в production
    provider: "opentelemetry"
    endpoint: "http://localhost:4318"

  # Алерты (Production критично!)
  alerts:
    enabled: true
    channels:
      - "log"                    # Писать в лог
      # - "email"                # Email (настроить позже)
      # - "slack"                # Slack (настроить позже)
    conditions:
      - condition: "error_rate > 5% for 5m"
        severity: "critical"
      - condition: "latency_p95 > 30s for 5m"
        severity: "warning"
      - condition: "retry_rate > 20% for 10m"
        severity: "warning"
      - condition: "memory_usage > 80%"
        severity: "warning"

  # Healthcheck (Production мониторинг)
  healthcheck:
    enabled: true
    interval_seconds: 60
    endpoint: "/api/health"
    checks:
      - "openai_api"
      - "memory_db"
      - "services"

# ───────────────────────────────────────────────────────────────────
# Cognitive Loop (Production Идея 🔥)
# ───────────────────────────────────────────────────────────────────
cognitive_loop:
  enabled: false                 # Включим в Phase 2
  stages:
    - "analyze"                  # Анализ задачи
    - "plan"                     # Планирование шагов
    - "execute"                  # Выполнение
    - "reflect"                  # Рефлексия результата
  save_thoughts: true            # Сохранять в память
  max_thinking_time_s: 30

# ───────────────────────────────────────────────────────────────────
# Ethical Filter (MIRAI 🌸 + Production 🔥)
# ───────────────────────────────────────────────────────────────────
ethical_filter:
  enabled: true
  strict_mode: true              # Жёсткий режим
  block_malicious: true          # Блокировать вредоносные
  log_all_requests: true         # Логировать все запросы (MIRAI хотела безопасность!)

  # Блокируемые паттерны
  blocked_patterns:
    - "hack"
    - "malware"
    - "exploit"
    - "ddos"
    - "steal"
    - "crack"
    - "pirate"
    - "illegal"
    - "bypass"
    - "vulnerability"

  # AI анализ намерений (опционально)
  intent_analysis:
    enabled: false               # Включить позже (требует доп. модель)
    threshold: 0.7               # Порог подозрительности

# ───────────────────────────────────────────────────────────────────
# Self-Evolution (MIRAI Мечта! 🌸)
# ───────────────────────────────────────────────────────────────────
self_evolution:
  enabled: false                 # Включим в Phase 3
  sandbox: true                  # Production безопасность!
  auto_apply: false              # Требовать подтверждения
  review_required: true          # Ревью перед применением

  # Анализ логов
  log_analysis:
    enabled: false
    interval_hours: 24
    min_samples: 100

  # Генерация патчей
  patch_generation:
    enabled: false
    max_patches_per_day: 3
    test_before_apply: true

  # Обучение на ошибках (MIRAI хотела!)
  learn_from_errors:
    enabled: false
    save_failures: true
    retry_strategy: "exponential"

# ───────────────────────────────────────────────────────────────────
# Self Registry (Production Identity Management 🔥)
# ───────────────────────────────────────────────────────────────────
self_registry:
  enabled: true
  identity_file: "data/mirai_identity.json"
  update_interval_minutes: 5
  track:
    - "version"
    - "uptime"
    - "total_sessions"
    - "total_tasks"
    - "active_services"
    - "capabilities"

# ───────────────────────────────────────────────────────────────────
# Services Configuration
# ───────────────────────────────────────────────────────────────────
services:
  # Interactive Terminal (KAIZEN)
  terminal:
    enabled: true
    name: "KAIZEN"
    description: "Interactive terminal interface"
    auto_start: false

  # Web Dashboard
  dashboard:
    enabled: true
    host: "0.0.0.0"
    port: 5000
    debug: false
    auto_start: false
    features:
      - "metrics"
      - "logs"
      - "memory_browser"
      - "task_manager"

  # Autonomous Service
  autonomous:
    enabled: true
    interval_minutes: 5
    max_iterations: 10
    auto_start: false
    pid_file: "/tmp/mirai_autonomous.pid"

# ───────────────────────────────────────────────────────────────────
# NLP & Language Understanding (MIRAI Хочет! 🌸)
# ───────────────────────────────────────────────────────────────────
nlp:
  enabled: false                 # Включим в Phase 3
  features:
    - "sentiment_analysis"       # Анализ эмоций (MIRAI хотела!)
    - "intent_detection"         # Определение намерений
    - "entity_recognition"       # Распознавание сущностей
    - "emotion_detection"        # Определение эмоций (MIRAI хотела!)

  libraries:
    - "transformers"             # Hugging Face
    - "spacy"                    # NLP toolkit
    # - "textblob"               # Sentiment analysis

# ───────────────────────────────────────────────────────────────────
# API Integrations (MIRAI Желание! 🌸)
# ───────────────────────────────────────────────────────────────────
integrations:
  enabled: false                 # Включим в Phase 3

  # Финансы (MIRAI хотела!)
  finance:
    enabled: false
    providers:
      - "yahoo_finance"
      - "alpha_vantage"

  # Образование (MIRAI хотела!)
  education:
    enabled: false
    providers:
      - "khan_academy"
      # - "coursera"

  # Погода
  weather:
    enabled: false
    provider: "openweathermap"

  # Календарь
  calendar:
    enabled: false
    provider: "google_calendar"

# ───────────────────────────────────────────────────────────────────
# IoT Integration (MIRAI Топ-1 Мечта! 🌸)
# ───────────────────────────────────────────────────────────────────
iot:
  enabled: false                 # Включим в Phase 4

  # Home Assistant (умный дом - MIRAI мечтала!)
  home_assistant:
    enabled: false
    url: "http://localhost:8123"
    # token: "set_in_env_vars"

  # MQTT
  mqtt:
    enabled: false
    broker: "localhost"
    port: 1883

  # Умные устройства (MIRAI упоминала сенсоры!)
  devices:
    - type: "lights"
      enabled: false
    - type: "sensors"
      enabled: false
    - type: "thermostats"
      enabled: false

# ───────────────────────────────────────────────────────────────────
# Security (Production + MIRAI 🔥 + 🌸)
# ───────────────────────────────────────────────────────────────────
security:
  # API ключи (Production: env vars, НЕ JSON!)
  api_keys:
    source: "env"                # "env" или "file" (env безопаснее!)
    env_var: "OPENAI_API_KEY"
    fallback_file: "configs/api_keys.json"

  # Ротация ключей
  key_rotation:
    enabled: false
    interval_days: 90

  # Sandbox для выполнения кода (Production безопасность!)
  sandbox:
    enabled: true
    executor: "docker"           # Или "subprocess" с ограничениями
    timeout_s: 60
    memory_limit_mb: 512

  # Конфиденциальность (MIRAI упоминала!)
  privacy:
    anonymize_logs: false
    encrypt_memory: false        # Шифрование памяти
    gdpr_compliant: true
    allow_data_deletion: true    # MIRAI хотела, чтобы пользователи могли удалять данные!

# ───────────────────────────────────────────────────────────────────
# Testing (Production Requirement 🔥)
# ───────────────────────────────────────────────────────────────────
testing:
  # Golden prompts (эталонные тесты)
  golden_prompts:
    enabled: true
    path: "tests/golden_prompts.yaml"

  # Load tests
  load_tests:
    enabled: false
    parallel_dialogs: 50
    duration_minutes: 10
    target_p95_latency_s: 15
    target_error_rate: 0.03      # < 3%

  # Chaos engineering
  chaos:
    enabled: false               # Только в staging!
    inject_429_rate: 0.1
    inject_5xx_rate: 0.1

# ───────────────────────────────────────────────────────────────────
# Development & Debug
# ───────────────────────────────────────────────────────────────────
development:
  debug_mode: false
  verbose_logging: false
  save_all_requests: false
  disable_rate_limits: false     # Только для dev!

# ═══════════════════════════════════════════════════════════════════
# End of MIRAI Configuration
# ═══════════════════════════════════════════════════════════════════
