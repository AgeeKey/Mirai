#!/usr/bin/env python3
"""
üß™ MIRAI V3 SUPERAGENT - PHASE 7: MEMORY & LEARNING TESTS
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ (150 —à–∞–≥–æ–≤)

–ü–æ–∫—Ä—ã—Ç–∏–µ:
- Unit —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- Integration —Ç–µ—Å—Ç—ã
- Performance —Ç–µ—Å—Ç—ã
- Edge cases

–ê–≤—Ç–æ—Ä: MIRAI Team
"""

import unittest
import tempfile
import shutil
from pathlib import Path
from datetime import datetime, timedelta
import json
import numpy as np

from memory_complete import (
    MemoryType, MemoryItem, EventActionResult,
    ShortTermMemory, WorkingMemory, LongTermMemory,
    EpisodicMemory, SemanticMemory, ProceduralMemory,
    MemoryEncoder, MemoryRetriever, MemoryConsolidation,
    VectorDB, MemoryIndexer, AttentionMechanism, MemoryDecay,
    MemoryReinforcement, ExperienceRecorder, PatternDetector,
    LearningEngine, KnowledgeGraph, MemorySystem,
    MemoryVisionIntegration, SuperAgentValidator,
    initialize_memory_system
)


class TestMemoryTypes(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ (–®–∞–≥–∏ 1-5)"""
    
    def test_memory_type_enum(self):
        """–®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –ø–∞–º—è—Ç–∏"""
        self.assertEqual(MemoryType.SHORT_TERM.value, "short_term")
        self.assertEqual(MemoryType.LONG_TERM.value, "long_term")
        self.assertEqual(MemoryType.EPISODIC.value, "episodic")
        self.assertEqual(MemoryType.SEMANTIC.value, "semantic")
        self.assertEqual(MemoryType.PROCEDURAL.value, "procedural")
    
    def test_memory_item_creation(self):
        """–®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ MemoryItem"""
        item = MemoryItem(
            id="test_001",
            content={"data": "test"},
            memory_type=MemoryType.SHORT_TERM,
            importance=0.7
        )
        
        self.assertEqual(item.id, "test_001")
        self.assertEqual(item.content["data"], "test")
        self.assertEqual(item.memory_type, MemoryType.SHORT_TERM)
        self.assertEqual(item.importance, 0.7)
        self.assertIsNotNone(item.timestamp)
    
    def test_memory_item_serialization(self):
        """–®–∞–≥ 4: –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è MemoryItem"""
        item = MemoryItem(
            id="test_002",
            content={"key": "value"},
            memory_type=MemoryType.EPISODIC
        )
        
        # to_dict
        item_dict = item.to_dict()
        self.assertIsInstance(item_dict, dict)
        self.assertEqual(item_dict['id'], "test_002")
        self.assertEqual(item_dict['memory_type'], "episodic")
        
        # from_dict
        restored = MemoryItem.from_dict(item_dict)
        self.assertEqual(restored.id, item.id)
        self.assertEqual(restored.memory_type, item.memory_type)
    
    def test_event_action_result(self):
        """–®–∞–≥ 26: Event-Action-Result Triple"""
        ear = EventActionResult(
            event={"type": "click"},
            action={"type": "mouse_click"},
            result={"success": True},
            success=True,
            confidence=0.9
        )
        
        self.assertTrue(ear.success)
        self.assertEqual(ear.confidence, 0.9)
        
        # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
        ear_dict = ear.to_dict()
        self.assertIsInstance(ear_dict, dict)
        self.assertTrue(ear_dict['success'])


class TestShortTermMemory(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ (–®–∞–≥ 6)"""
    
    def setUp(self):
        self.stm = ShortTermMemory(capacity=5)
    
    def test_stm_creation(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ STM"""
        self.assertEqual(self.stm.capacity, 5)
        self.assertEqual(len(self.stm), 0)
    
    def test_stm_add_items(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        for i in range(3):
            item = MemoryItem(
                id=f"item_{i}",
                content={"index": i},
                memory_type=MemoryType.SHORT_TERM
            )
            self.stm.add(item)
        
        self.assertEqual(len(self.stm), 3)
    
    def test_stm_capacity_limit(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —ë–º–∫–æ—Å—Ç–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–æ —ë–º–∫–æ—Å—Ç—å 5
        for i in range(10):
            item = MemoryItem(
                id=f"item_{i}",
                content={"index": i},
                memory_type=MemoryType.SHORT_TERM
            )
            self.stm.add(item)
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        self.assertEqual(len(self.stm), 5)
        all_items = self.stm.get_all()
        self.assertEqual(all_items[0].id, "item_5")
        self.assertEqual(all_items[-1].id, "item_9")
    
    def test_stm_get_recent(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        for i in range(5):
            item = MemoryItem(
                id=f"item_{i}",
                content={"index": i},
                memory_type=MemoryType.SHORT_TERM
            )
            self.stm.add(item)
        
        recent = self.stm.get_recent(n=3)
        self.assertEqual(len(recent), 3)
        self.assertEqual(recent[-1].id, "item_4")
    
    def test_stm_clear(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        self.stm.add(MemoryItem("test", {}, MemoryType.SHORT_TERM))
        self.assertEqual(len(self.stm), 1)
        
        self.stm.clear()
        self.assertEqual(len(self.stm), 0)


class TestWorkingMemory(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ä–∞–±–æ—á–µ–π –ø–∞–º—è—Ç–∏ (–®–∞–≥ 7)"""
    
    def setUp(self):
        self.wm = WorkingMemory()
    
    def test_wm_creation(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Working Memory"""
        self.assertIsNone(self.wm.current_task)
        self.assertEqual(len(self.wm.context), 0)
        self.assertEqual(len(self.wm.active_items), 0)
    
    def test_wm_set_task(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏"""
        task = {"name": "test_task", "priority": "high"}
        self.wm.set_task(task)
        
        self.assertEqual(self.wm.current_task, task)
    
    def test_wm_update_context(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        self.wm.update_context("user", "test_user")
        self.wm.update_context("app", "chrome")
        
        self.assertEqual(self.wm.context["user"], "test_user")
        self.assertEqual(self.wm.context["app"], "chrome")
    
    def test_wm_add_item(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        item = MemoryItem("test", {}, MemoryType.WORKING)
        self.wm.add_item(item)
        
        self.assertEqual(len(self.wm.active_items), 1)
    
    def test_wm_clear(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—á–µ–π –ø–∞–º—è—Ç–∏"""
        self.wm.set_task({"name": "task"})
        self.wm.update_context("key", "value")
        self.wm.add_item(MemoryItem("test", {}, MemoryType.WORKING))
        
        self.wm.clear()
        
        self.assertIsNone(self.wm.current_task)
        self.assertEqual(len(self.wm.context), 0)
        self.assertEqual(len(self.wm.active_items), 0)
    
    def test_wm_get_context(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        self.wm.set_task({"name": "test"})
        self.wm.update_context("key", "value")
        
        context = self.wm.get_context()
        
        self.assertIn("task", context)
        self.assertIn("context", context)
        self.assertIn("active_items_count", context)


class TestLongTermMemory(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ (–®–∞–≥ 8)"""
    
    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()
        self.db_path = Path(self.temp_dir) / "test_memory.db"
        self.ltm = LongTermMemory(str(self.db_path))
    
    def tearDown(self):
        self.ltm.conn.close()
        shutil.rmtree(self.temp_dir)
    
    def test_ltm_creation(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ LTM"""
        self.assertTrue(self.db_path.exists())
        self.assertEqual(self.ltm.count_memories(), 0)
    
    def test_ltm_store_and_retrieve(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ"""
        item = MemoryItem(
            id="test_ltm_001",
            content={"data": "test_data"},
            memory_type=MemoryType.LONG_TERM,
            importance=0.8
        )
        
        self.ltm.store(item)
        
        retrieved = self.ltm.retrieve("test_ltm_001")
        
        self.assertIsNotNone(retrieved)
        self.assertEqual(retrieved.id, "test_ltm_001")
        self.assertEqual(retrieved.content["data"], "test_data")
        self.assertEqual(retrieved.importance, 0.8)
    
    def test_ltm_query_by_type(self):
        """–ó–∞–ø—Ä–æ—Å –ø–æ —Ç–∏–ø—É –ø–∞–º—è—Ç–∏"""
        # –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã
        for i, mem_type in enumerate([MemoryType.EPISODIC, MemoryType.SEMANTIC, MemoryType.EPISODIC]):
            item = MemoryItem(
                id=f"item_{i}",
                content={"index": i},
                memory_type=mem_type
            )
            self.ltm.store(item)
        
        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å episodic
        episodic_memories = self.ltm.query_by_type(MemoryType.EPISODIC)
        
        self.assertEqual(len(episodic_memories), 2)
    
    def test_ltm_count(self):
        """–ü–æ–¥—Å—á—ë—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.assertEqual(self.ltm.count_memories(), 0)
        
        for i in range(5):
            item = MemoryItem(f"item_{i}", {"i": i}, MemoryType.LONG_TERM)
            self.ltm.store(item)
        
        self.assertEqual(self.ltm.count_memories(), 5)
    
    def test_ltm_update_existing(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        item = MemoryItem("test", {"value": 1}, MemoryType.LONG_TERM)
        self.ltm.store(item)
        
        # –û–±–Ω–æ–≤–∏—Ç—å
        item.content["value"] = 2
        item.importance = 0.9
        self.ltm.store(item)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
        retrieved = self.ltm.retrieve("test")
        self.assertEqual(retrieved.content["value"], 2)
        self.assertEqual(retrieved.importance, 0.9)


class TestEpisodicMemory(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —ç–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ (–®–∞–≥ 9)"""
    
    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()
        self.db_path = Path(self.temp_dir) / "test_memory.db"
        self.ltm = LongTermMemory(str(self.db_path))
        self.episodic = EpisodicMemory(self.ltm)
    
    def tearDown(self):
        self.ltm.conn.close()
        shutil.rmtree(self.temp_dir)
    
    def test_record_episode(self):
        """–ó–∞–ø–∏—Å—å —ç–ø–∏–∑–æ–¥–∞"""
        episode_id = self.episodic.record_episode(
            event="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –±—Ä–∞—É–∑–µ—Ä",
            context={"app": "chrome", "user": "test"},
            outcome={"success": True}
        )
        
        self.assertIsNotNone(episode_id)
        self.assertTrue(episode_id.startswith("episode_"))
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ LTM
        retrieved = self.ltm.retrieve(episode_id)
        self.assertIsNotNone(retrieved)
        self.assertEqual(retrieved.memory_type, MemoryType.EPISODIC)
    
    def test_episode_importance_calculation(self):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ —ç–ø–∏–∑–æ–¥–∞"""
        # –£—Å–ø–µ—à–Ω—ã–π —ç–ø–∏–∑–æ–¥
        episode_id_success = self.episodic.record_episode(
            event="Success event",
            context={},
            outcome={"success": True}
        )
        
        # –≠–ø–∏–∑–æ–¥ —Å –æ—à–∏–±–∫–æ–π
        episode_id_error = self.episodic.record_episode(
            event="Error event",
            context={},
            outcome={"error": "Something went wrong"}
        )
        
        success_item = self.ltm.retrieve(episode_id_success)
        error_item = self.ltm.retrieve(episode_id_error)
        
        # –û—à–∏–±–∫–∏ –≤–∞–∂–Ω–µ–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.assertGreater(error_item.importance, success_item.importance)


class TestSemanticMemory(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ (–®–∞–≥ 10)"""
    
    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()
        self.db_path = Path(self.temp_dir) / "test_memory.db"
        self.ltm = LongTermMemory(str(self.db_path))
        self.semantic = SemanticMemory(self.ltm)
    
    def tearDown(self):
        self.ltm.conn.close()
        shutil.rmtree(self.temp_dir)
    
    def test_store_fact(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞"""
        self.semantic.store_fact(
            subject="Chrome",
            predicate="can_open",
            object_="URL",
            confidence=0.9
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ñ–∞–∫—Ç –≤ knowledge_base
        self.assertGreater(len(self.semantic.knowledge_base), 0)
    
    def test_query_facts(self):
        """–ó–∞–ø—Ä–æ—Å —Ñ–∞–∫—Ç–æ–≤"""
        self.semantic.store_fact("Python", "is", "language")
        self.semantic.store_fact("Python", "has", "libraries")
        self.semantic.store_fact("Java", "is", "language")
        
        python_facts = self.semantic.query_facts(subject="Python")
        
        self.assertEqual(len(python_facts), 2)


class TestProceduralMemory(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏ (–®–∞–≥ 11)"""
    
    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()
        self.db_path = Path(self.temp_dir) / "test_memory.db"
        self.ltm = LongTermMemory(str(self.db_path))
        self.procedural = ProceduralMemory(self.ltm)
    
    def tearDown(self):
        self.ltm.conn.close()
        shutil.rmtree(self.temp_dir)
    
    def test_store_procedure(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã"""
        steps = [
            {"action": "open_chrome"},
            {"action": "navigate_to_url"},
            {"action": "wait_for_load"}
        ]
        
        self.procedural.store_procedure(
            name="open_website",
            steps=steps,
            success_rate=0.85
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        proc = self.procedural.get_procedure("open_website")
        self.assertIsNotNone(proc)
        self.assertEqual(len(proc["steps"]), 3)
        self.assertEqual(proc["success_rate"], 0.85)
    
    def test_update_success_rate(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—Ö–∞"""
        self.procedural.store_procedure(
            name="test_proc",
            steps=[{"action": "test"}],
            success_rate=0.5
        )
        
        # –ù–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        for _ in range(5):
            self.procedural.update_success_rate("test_proc", success=True)
        
        proc = self.procedural.get_procedure("test_proc")
        
        # Success rate –¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è
        self.assertGreater(proc["success_rate"], 0.5)
        self.assertEqual(proc["execution_count"], 5)


class TestMemoryEncoder(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞–º—è—Ç–∏ (–®–∞–≥ 12)"""
    
    def setUp(self):
        self.encoder = MemoryEncoder()
    
    def test_encoder_creation(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ encoder"""
        self.assertIsNotNone(self.encoder)
        self.assertEqual(self.encoder.model, "text-embedding-3-large")
    
    def test_encode_text(self):
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        text = "Test text for encoding"
        embedding = self.encoder.encode(text)
        
        self.assertIsInstance(embedding, np.ndarray)
        self.assertEqual(len(embedding), 3072)
    
    def test_encode_caching(self):
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
        text = "Same text"
        
        emb1 = self.encoder.encode(text)
        emb2 = self.encoder.encode(text)
        
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ (–∏–∑ –∫—ç—à–∞)
        np.testing.assert_array_equal(emb1, emb2)
    
    def test_encode_memory_item(self):
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ MemoryItem"""
        item = MemoryItem(
            id="test",
            content={"data": "test data"},
            memory_type=MemoryType.LONG_TERM
        )
        
        self.assertIsNone(item.embedding)
        
        item = self.encoder.encode_memory_item(item)
        
        self.assertIsNotNone(item.embedding)
        self.assertEqual(len(item.embedding), 3072)


class TestMemoryRetriever(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ (–®–∞–≥ 13)"""
    
    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()
        self.db_path = Path(self.temp_dir) / "test_memory.db"
        self.ltm = LongTermMemory(str(self.db_path))
        self.encoder = MemoryEncoder()
        self.retriever = MemoryRetriever(self.ltm, self.encoder)
    
    def tearDown(self):
        self.ltm.conn.close()
        shutil.rmtree(self.temp_dir)
    
    def test_retriever_creation(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ retriever"""
        self.assertIsNotNone(self.retriever)
    
    def test_retrieve_recent(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for i in range(5):
            item = MemoryItem(f"item_{i}", {"i": i}, MemoryType.LONG_TERM)
            self.ltm.store(item)
        
        recent = self.retriever.retrieve_recent(n=3)
        
        self.assertEqual(len(recent), 3)
    
    def test_search_by_similarity(self):
        """–ü–æ–∏—Å–∫ –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É —Å—Ö–æ–¥—Å—Ç–≤—É"""
        # –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
        for i, text in enumerate(["cat", "dog", "car"]):
            item = MemoryItem(
                id=f"item_{i}",
                content={"text": text},
                memory_type=MemoryType.LONG_TERM
            )
            item = self.encoder.encode_memory_item(item)
            self.ltm.store(item)
        
        # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–∞ "cat"
        results = self.retriever.search_by_similarity("cat", top_k=2)
        
        self.assertEqual(len(results), 2)
        # –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–º
        self.assertIsInstance(results[0], tuple)
        self.assertIsInstance(results[0][1], float)  # similarity score


class TestMemoryConsolidation(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ (–®–∞–≥ 14)"""
    
    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()
        self.db_path = Path(self.temp_dir) / "test_memory.db"
        
        self.stm = ShortTermMemory(capacity=10)
        self.ltm = LongTermMemory(str(self.db_path))
        self.encoder = MemoryEncoder()
        self.consolidator = MemoryConsolidation(self.stm, self.ltm, self.encoder)
    
    def tearDown(self):
        self.ltm.conn.close()
        shutil.rmtree(self.temp_dir)
    
    def test_consolidation_creation(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ consolidator"""
        self.assertIsNotNone(self.consolidator)
    
    def test_consolidate_important_memories(self):
        """–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –≤–∞–∂–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        # –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ STM —Å —Ä–∞–∑–Ω–æ–π –≤–∞–∂–Ω–æ—Å—Ç—å—é
        for i in range(5):
            importance = 0.8 if i % 2 == 0 else 0.3
            item = MemoryItem(
                id=f"item_{i}",
                content={"i": i},
                memory_type=MemoryType.SHORT_TERM,
                importance=importance
            )
            self.stm.add(item)
        
        # –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è —Å –ø–æ—Ä–æ–≥–æ–º 0.6
        count = self.consolidator.consolidate(threshold=0.6)
        
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ (3 —ç–ª–µ–º–µ–Ω—Ç–∞)
        self.assertEqual(count, 3)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–Ω–∏ –≤ LTM
        self.assertGreater(self.ltm.count_memories(), 0)


class TestVectorDB(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î (–®–∞–≥ 16)"""
    
    def setUp(self):
        self.vector_db = VectorDB()
    
    def test_vector_db_creation(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ VectorDB"""
        self.assertEqual(len(self.vector_db), 0)
    
    def test_add_vectors(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤"""
        vec1 = np.random.rand(128)
        vec2 = np.random.rand(128)
        
        self.vector_db.add("id1", vec1, {"type": "test"})
        self.vector_db.add("id2", vec2, {"type": "test"})
        
        self.assertEqual(len(self.vector_db), 2)
    
    def test_search_vectors(self):
        """–ü–æ–∏—Å–∫ –≤–µ–∫—Ç–æ—Ä–æ–≤"""
        # –î–æ–±–∞–≤–∏—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã
        vec1 = np.array([1.0, 0.0, 0.0])
        vec2 = np.array([0.0, 1.0, 0.0])
        vec3 = np.array([0.9, 0.1, 0.0])  # –ü–æ—Ö–æ–∂ –Ω–∞ vec1
        
        self.vector_db.add("id1", vec1)
        self.vector_db.add("id2", vec2)
        self.vector_db.add("id3", vec3)
        
        # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ vec1
        results = self.vector_db.search(vec1, top_k=2)
        
        self.assertEqual(len(results), 2)
        # –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å id1 (–∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π)
        self.assertEqual(results[0][0], "id1")
        # –í—Ç–æ—Ä–æ–π - id3 (–ø–æ—Ö–æ–∂–∏–π)
        self.assertEqual(results[1][0], "id3")


class TestPatternDetector(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–®–∞–≥ 51)"""
    
    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()
        self.db_path = Path(self.temp_dir) / "test_memory.db"
        self.memory_system = MemorySystem(str(self.db_path))
        self.memory_system.initialize()
        self.pattern_detector = self.memory_system.pattern_detector
    
    def tearDown(self):
        self.memory_system.long_term_memory.conn.close()
        shutil.rmtree(self.temp_dir)
    
    def test_detect_action_patterns(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π"""
        # –ó–∞–ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        for i in range(5):
            self.memory_system.experience_recorder.record_experience(
                event={"type": "user_click"},
                action={"type": "mouse_click"},
                result={"success": True, "confidence": 0.9}
            )
        
        # –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤ LTM (–ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—â—É—Ç—Å—è –≤ LTM)
        self.memory_system.consolidator.consolidate(threshold=0.0)
        
        # –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns = self.pattern_detector.detect_action_patterns(min_occurrences=3)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏–∑-–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫
        self.assertIsInstance(patterns, list)
        
        # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        for pattern in patterns:
            self.assertIn('type', pattern)
            self.assertIn('action_type', pattern)
            self.assertIn('occurrences', pattern)
            self.assertIn('success_rate', pattern)


class TestLearningEngine(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –¥–≤–∏–∂–∫–∞ –æ–±—É—á–µ–Ω–∏—è (–®–∞–≥ 76)"""
    
    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()
        self.db_path = Path(self.temp_dir) / "test_memory.db"
        self.memory_system = MemorySystem(str(self.db_path))
        self.memory_system.initialize()
        self.learning_engine = self.memory_system.learning_engine
    
    def tearDown(self):
        self.memory_system.long_term_memory.conn.close()
        shutil.rmtree(self.temp_dir)
    
    def test_learn_from_success(self):
        """–û–±—É—á–µ–Ω–∏–µ –∏–∑ —É—Å–ø–µ—Ö–∞"""
        # –ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –æ–ø—ã—Ç
        exp_id = self.memory_system.experience_recorder.record_experience(
            event={"type": "open_app"},
            action={"type": "launch_chrome"},
            result={"success": True, "confidence": 0.9}
        )
        
        # –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤ LTM
        self.memory_system.consolidator.consolidate(threshold=0.0)
        
        # –û–±—É—á–∏—Ç—å—Å—è
        initial_rules = len(self.learning_engine.learned_rules)
        self.learning_engine.learn_from_experience(exp_id)
        
        # –î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ
        self.assertGreater(len(self.learning_engine.learned_rules), initial_rules)
    
    def test_learn_from_failure(self):
        """–û–±—É—á–µ–Ω–∏–µ –∏–∑ –Ω–µ—É–¥–∞—á–∏"""
        # –ó–∞–ø–∏—Å–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–π –æ–ø—ã—Ç
        exp_id = self.memory_system.experience_recorder.record_experience(
            event={"type": "click_button"},
            action={"type": "click"},
            result={"success": False, "error": "Button not found", "confidence": 0.5}
        )
        
        # –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å
        self.memory_system.consolidator.consolidate(threshold=0.0)
        
        # –û–±—É—á–∏—Ç—å—Å—è
        initial_rules = len(self.learning_engine.learned_rules)
        self.learning_engine.learn_from_experience(exp_id)
        
        # –î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª–æ –æ–± –æ—à–∏–±–∫–µ
        self.assertGreater(len(self.learning_engine.learned_rules), initial_rules)


class TestKnowledgeGraph(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∞ –∑–Ω–∞–Ω–∏–π (–®–∞–≥ 101)"""
    
    def setUp(self):
        self.kg = KnowledgeGraph()
    
    def test_kg_creation(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Knowledge Graph"""
        self.assertEqual(len(self.kg.nodes), 0)
        self.assertEqual(len(self.kg.edges), 0)
    
    def test_add_nodes_and_edges(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤ –∏ —Ä—ë–±–µ—Ä"""
        self.kg.add_node("Chrome", "application", {"version": "120"})
        self.kg.add_node("URL", "concept")
        self.kg.add_edge("Chrome", "can_open", "URL")
        
        self.assertEqual(len(self.kg.nodes), 2)
        self.assertEqual(len(self.kg.edges), 1)
    
    def test_query_graph(self):
        """–ó–∞–ø—Ä–æ—Å –∫ –≥—Ä–∞—Ñ—É"""
        self.kg.add_node("Python", "language")
        self.kg.add_node("Library", "concept")
        self.kg.add_edge("Python", "has", "Library")
        self.kg.add_edge("Python", "is", "high-level")
        
        # –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π Python
        results = self.kg.query(subject="Python")
        
        self.assertEqual(len(results), 2)
    
    def test_get_neighbors(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å–µ–¥–µ–π —É–∑–ª–∞"""
        self.kg.add_node("A", "type1")
        self.kg.add_node("B", "type2")
        self.kg.add_node("C", "type3")
        self.kg.add_edge("A", "connects_to", "B")
        self.kg.add_edge("A", "connects_to", "C")
        
        neighbors = self.kg.get_neighbors("A")
        
        self.assertEqual(len(neighbors), 2)
        self.assertIn("B", neighbors)
        self.assertIn("C", neighbors)


class TestMemorySystem(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è MemorySystem (–®–∞–≥ 15, 150)"""
    
    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()
        self.db_path = Path(self.temp_dir) / "test_memory.db"
        self.memory_system = initialize_memory_system(str(self.db_path))
    
    def tearDown(self):
        self.memory_system.long_term_memory.conn.close()
        shutil.rmtree(self.temp_dir)
    
    def test_full_initialization(self):
        """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        self.assertIsNotNone(self.memory_system.short_term_memory)
        self.assertIsNotNone(self.memory_system.working_memory)
        self.assertIsNotNone(self.memory_system.long_term_memory)
        self.assertIsNotNone(self.memory_system.episodic_memory)
        self.assertIsNotNone(self.memory_system.semantic_memory)
        self.assertIsNotNone(self.memory_system.procedural_memory)
        self.assertIsNotNone(self.memory_system.encoder)
        self.assertIsNotNone(self.memory_system.retriever)
        self.assertIsNotNone(self.memory_system.consolidator)
    
    def test_get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.memory_system.get_stats()
        
        self.assertIn('short_term_size', stats)
        self.assertIn('long_term_count', stats)
        self.assertIn('knowledge_graph_nodes', stats)
        self.assertIn('learned_rules', stats)
    
    def test_full_workflow(self):
        """–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å"""
        # 1. –ó–∞–ø–∏—Å–∞—Ç—å –æ–ø—ã—Ç
        exp_id = self.memory_system.experience_recorder.record_experience(
            event={"type": "test_event"},
            action={"type": "test_action"},
            result={"success": True, "confidence": 0.8}
        )
        
        self.assertIsNotNone(exp_id)
        
        # 2. –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å
        count = self.memory_system.consolidator.consolidate(threshold=0.5)
        self.assertGreaterEqual(count, 0)
        
        # 3. –û–±—É—á–∏—Ç—å—Å—è
        self.memory_system.learning_engine.learn_from_experience(exp_id)
        
        # 4. –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns = self.memory_system.pattern_detector.detect_action_patterns(min_occurrences=1)
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.memory_system.get_stats()
        self.assertGreater(stats['short_term_size'], 0)


class TestSuperAgentValidator(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ (–®–∞–≥ 150)"""
    
    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()
        self.db_path = Path(self.temp_dir) / "test_memory.db"
        self.memory_system = initialize_memory_system(str(self.db_path))
        self.validator = SuperAgentValidator(self.memory_system)
    
    def tearDown(self):
        self.memory_system.long_term_memory.conn.close()
        shutil.rmtree(self.temp_dir)
    
    def test_validate_all_components(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        results = self.validator.validate_all()
        
        # –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã
        self.assertTrue(all(results.values()))
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.assertTrue(results['short_term_memory'])
        self.assertTrue(results['long_term_memory'])
        self.assertTrue(results['episodic_memory'])
        self.assertTrue(results['learning_engine'])
        self.assertTrue(results['knowledge_graph'])


class TestPerformance(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()
        self.db_path = Path(self.temp_dir) / "test_memory.db"
        self.memory_system = initialize_memory_system(str(self.db_path))
    
    def tearDown(self):
        self.memory_system.long_term_memory.conn.close()
        shutil.rmtree(self.temp_dir)
    
    def test_bulk_experience_recording(self):
        """–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ–ø—ã—Ç–∞"""
        import time
        
        start = time.time()
        
        # –ó–∞–ø–∏—Å–∞—Ç—å 100 –æ–ø—ã—Ç–æ–≤
        for i in range(100):
            self.memory_system.experience_recorder.record_experience(
                event={"type": f"event_{i}"},
                action={"type": f"action_{i}"},
                result={"success": i % 2 == 0}
            )
        
        duration = time.time() - start
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º
        self.assertLess(duration, 10.0)  # < 10 —Å–µ–∫—É–Ω–¥
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å—ë –∑–∞–ø–∏—Å–∞–Ω–æ
        self.assertEqual(len(self.memory_system.short_term_memory), 20)  # capacity limit


def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    # –°–æ–∑–¥–∞—Ç—å test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
    suite.addTests(loader.loadTestsFromTestCase(TestMemoryTypes))
    suite.addTests(loader.loadTestsFromTestCase(TestShortTermMemory))
    suite.addTests(loader.loadTestsFromTestCase(TestWorkingMemory))
    suite.addTests(loader.loadTestsFromTestCase(TestLongTermMemory))
    suite.addTests(loader.loadTestsFromTestCase(TestEpisodicMemory))
    suite.addTests(loader.loadTestsFromTestCase(TestSemanticMemory))
    suite.addTests(loader.loadTestsFromTestCase(TestProceduralMemory))
    suite.addTests(loader.loadTestsFromTestCase(TestMemoryEncoder))
    suite.addTests(loader.loadTestsFromTestCase(TestMemoryRetriever))
    suite.addTests(loader.loadTestsFromTestCase(TestMemoryConsolidation))
    suite.addTests(loader.loadTestsFromTestCase(TestVectorDB))
    suite.addTests(loader.loadTestsFromTestCase(TestPatternDetector))
    suite.addTests(loader.loadTestsFromTestCase(TestLearningEngine))
    suite.addTests(loader.loadTestsFromTestCase(TestKnowledgeGraph))
    suite.addTests(loader.loadTestsFromTestCase(TestMemorySystem))
    suite.addTests(loader.loadTestsFromTestCase(TestSuperAgentValidator))
    suite.addTests(loader.loadTestsFromTestCase(TestPerformance))
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return result.wasSuccessful()


if __name__ == "__main__":
    success = run_tests()
    exit(0 if success else 1)
