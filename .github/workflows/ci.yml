name: CI - Tests & Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd mirai-agent
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8 mypy
    
    - name: Check code formatting (black)
      run: |
        cd mirai-agent
        black --check --diff core/ tests/ || echo "‚ö†Ô∏è Code needs formatting"
    
    - name: Lint with flake8
      run: |
        cd mirai-agent
        # Stop build if there are Python syntax errors or undefined names
        flake8 core/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 core/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        cd mirai-agent
        mypy core/ --ignore-missing-imports --no-strict-optional || echo "‚ö†Ô∏è Type hints need improvement"
    
    - name: Run unit tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        cd mirai-agent
        pytest tests/unit/ -v --tb=short
    
    - name: Run integration tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        cd mirai-agent
        pytest tests/integration/ -v --tb=short || echo "‚ö†Ô∏è Integration tests need attention"
    
    - name: Generate coverage report
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        cd mirai-agent
        pytest tests/ --cov=core --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./mirai-agent/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        cd mirai-agent
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run health check script
      run: |
        chmod +x scripts/healthcheck.sh
        # Health check –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å 1 –µ—Å–ª–∏ –Ω–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        # –ù–æ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
        ./scripts/healthcheck.sh --verbose || echo "‚ö†Ô∏è Health check warnings"
    
    - name: Test core imports
      run: |
        cd mirai-agent
        python3 -c "from core.autonomous_agent import AutonomousAgent; print('‚úÖ AutonomousAgent imports')"
        python3 -c "from core.memory_manager import MemoryManager; print('‚úÖ MemoryManager imports')"
        python3 -c "from core.logger import setup_logger; print('‚úÖ Logger imports')"
        python3 -c "from core.config_manager import ConfigManager; print('‚úÖ ConfigManager imports')"
    
    - name: Validate configuration
      run: |
        cd mirai-agent
        python3 -c "
from core.config_manager import ConfigManager
config = ConfigManager()
print(f'‚úÖ Config version: {config.get(\"version\")}')
print(f'‚úÖ Database path: {config.get(\"database.path\")}')
"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install safety
      run: |
        pip install safety bandit
    
    - name: Check dependencies for vulnerabilities
      run: |
        cd mirai-agent
        pip install -r requirements.txt
        safety check || echo "‚ö†Ô∏è Security vulnerabilities found"
    
    - name: Run bandit security scan
      run: |
        cd mirai-agent
        bandit -r core/ -ll || echo "‚ö†Ô∏è Security issues found"

  build-status:
    name: Build Status Summary
    runs-on: ubuntu-latest
    needs: [test, health-check, security]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        echo "üéØ CI Pipeline Complete!"
        echo "Test: ${{ needs.test.result }}"
        echo "Health: ${{ needs.health-check.result }}"
        echo "Security: ${{ needs.security.result }}"
