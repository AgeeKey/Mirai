#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–´ –î–õ–Ø –§–ê–ó–´ 3: TASK PLANNING
==================================

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 150 —à–∞–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from core.task_planning import TaskPlanningSystem

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


def test_simple_search_task():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞"""
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞")
    print("=" * 70)
    
    planner = TaskPlanningSystem()
    
    result = planner.plan_task(
        user_task="–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python",
        requirements=["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞", "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω"]
    )
    
    assert result.success, "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    assert result.parsed_task is not None, "–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞"
    assert len(result.decomposition) > 0, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ"
    assert len(result.subtasks) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–∑–∞–¥–∞—á–∏"
    assert result.execution_plan is not None, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    assert result.approved, "–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    
    print("‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω")
    print(f"   –ü–æ–¥–∑–∞–¥–∞—á: {len(result.subtasks)}")
    print(f"   –í—Ä–µ–º—è: {result.execution_plan['total_duration']:.1f}—Å")
    print(f"   –£—Ç–≤–µ—Ä–∂–¥–µ–Ω: {result.approved}")
    
    return result


def test_complex_creation_task():
    """–¢–µ—Å—Ç 2: –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è"""
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢ 2: –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    print("=" * 70)
    
    planner = TaskPlanningSystem()
    
    result = planner.plan_task(
        user_task="–°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π Python –ø—Ä–æ–µ–∫—Ç —Å —Ç–µ—Å—Ç–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π",
        requirements=[
            "–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω",
            "–¢–µ—Å—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω—ã",
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞"
        ],
        optimization_goals={
            'time': 0.3,
            'resources': 0.3,
            'safety': 0.4  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        }
    )
    
    assert result.success, "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    assert result.parsed_task.complexity.value >= 2, "–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ä–µ–¥–Ω–µ–π –∏–ª–∏ –≤—ã—à–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—è
    validation_tasks = [
        t for t in result.execution_plan['tasks']
        if t.get('type') in ['validation', 'safety_check']
    ]
    assert len(validation_tasks) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —à–∞–≥–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    
    print("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result.parsed_task.complexity.name}")
    print(f"   –ü–æ–¥–∑–∞–¥–∞—á: {len(result.subtasks)}")
    print(f"   –í–∞–ª–∏–¥–∞—Ü–∏–π: {len(validation_tasks)}")
    print(f"   –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è score: {result.execution_plan.get('optimization_score', 0):.2f}")
    
    return result


def test_parallel_execution_task():
    """–¢–µ—Å—Ç 3: –ó–∞–¥–∞—á–∞ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º"""
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢ 3: –ó–∞–¥–∞—á–∞ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
    print("=" * 70)
    
    planner = TaskPlanningSystem()
    
    result = planner.plan_task(
        user_task="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–∞—Ö –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç",
        requirements=["–í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã", "–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω"],
        optimization_goals={
            'time': 0.8,  # –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
            'resources': 0.1,
            'safety': 0.1
        }
    )
    
    assert result.success, "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
    parallelism = result.execution_plan.get('max_parallelism', 1)
    assert parallelism >= 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º"
    
    print("‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω")
    print(f"   –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º: {parallelism}")
    print(f"   –í—Ä–µ–º—è: {result.execution_plan['total_duration']:.1f}—Å")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –Ω–∞–≥—Ä—É–∑–∫–∏
    if 'load_balanced' in result.execution_plan:
        print(f"   –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏: ‚úÖ")
    
    return result


def test_validation_checks():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–π"""
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–π")
    print("=" * 70)
    
    planner = TaskPlanningSystem()
    
    result = planner.plan_task(
        user_task="–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞—á—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        requirements=["–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω"]
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    expected_checks = ['completeness', 'consistency', 'feasibility', 'safety', 'performance']
    
    for check in expected_checks:
        assert check in result.validation_results, f"–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ {check}"
        validation = result.validation_results[check]
        print(f"   {check.capitalize()}: "
              f"{'‚úÖ' if validation.valid else '‚ùå'} "
              f"(score: {validation.score:.2f}, "
              f"{validation.checks_passed}/{validation.checks_total})")
    
    print("‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω")
    
    return result


def test_risk_assessment():
    """–¢–µ—Å—Ç 5: –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢ 5: –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
    print("=" * 70)
    
    planner = TaskPlanningSystem()
    
    result = planner.plan_task(
        user_task="–£–¥–∞–ª–∏ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏ –æ—á–∏—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—É",  # –†–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
        optimization_goals={
            'time': 0.1,
            'resources': 0.1,
            'safety': 0.8  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        }
    )
    
    assert result.success, "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ü–µ–Ω–µ–Ω —Ä–∏—Å–∫
    assert result.parsed_task.risk_level is not None, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞"
    print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {result.parsed_task.risk_level.value}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    safety_checks = [
        t for t in result.execution_plan['tasks']
        if t.get('type') == 'safety_check'
    ]
    print(f"   –ü—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {len(safety_checks)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º checkpoints
    checkpoints = result.execution_plan.get('checkpoints', [])
    print(f"   Checkpoints: {len(checkpoints)}")
    
    assert len(safety_checks) > 0 or len(checkpoints) > 0, \
        "–î–ª—è —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    
    print("‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω")
    
    return result


def test_optimization():
    """–¢–µ—Å—Ç 6: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∞"""
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢ 6: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∞")
    print("=" * 70)
    
    planner = TaskPlanningSystem()
    
    # –î–≤–∞ –ø–ª–∞–Ω–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    result_speed = planner.plan_task(
        user_task="–û–±—Ä–∞–±–æ—Ç–∞–π –¥–∞–Ω–Ω—ã–µ",
        optimization_goals={'time': 1.0, 'resources': 0.0, 'safety': 0.0}
    )
    
    result_safety = planner.plan_task(
        user_task="–û–±—Ä–∞–±–æ—Ç–∞–π –¥–∞–Ω–Ω—ã–µ",
        optimization_goals={'time': 0.0, 'resources': 0.0, 'safety': 1.0}
    )
    
    # –ü–ª–∞–Ω —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ
    speed_time = result_speed.execution_plan.get('total_duration', float('inf'))
    safety_time = result_safety.execution_plan.get('total_duration', float('inf'))
    
    print(f"   –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: {speed_time:.1f}—Å")
    print(f"   –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {safety_time:.1f}—Å")
    
    # –ü–ª–∞–Ω —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
    speed_validations = len([
        t for t in result_speed.execution_plan['tasks']
        if t.get('type') in ['validation', 'safety_check']
    ])
    safety_validations = len([
        t for t in result_safety.execution_plan['tasks']
        if t.get('type') in ['validation', 'safety_check']
    ])
    
    print(f"   –í–∞–ª–∏–¥–∞—Ü–∏–π (—Å–∫–æ—Ä–æ—Å—Ç—å): {speed_validations}")
    print(f"   –í–∞–ª–∏–¥–∞—Ü–∏–π (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å): {safety_validations}")
    
    assert safety_validations >= speed_validations, \
        "–ü–ª–∞–Ω —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ–≤–µ—Ä–æ–∫"
    
    print("‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω")
    
    return result_speed, result_safety


def test_statistics():
    """–¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢ 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 70)
    
    planner = TaskPlanningSystem()
    stats = planner.get_statistics()
    
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {stats['name']}")
    print(f"   –í–µ—Ä—Å–∏—è: {stats['version']}")
    print(f"   –í—Å–µ–≥–æ —à–∞–≥–æ–≤: {stats['total_steps']}")
    print(f"   –†–∞–∑–¥–µ–ª–æ–≤: {len(stats['sections'])}")
    print(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {sum(stats['components'].values())}")
    
    assert stats['total_steps'] == 150, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 150 —à–∞–≥–æ–≤"
    assert len(stats['sections']) == 4, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —Ä–∞–∑–¥–µ–ª–∞"
    
    print("‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω")
    
    return stats


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n" + "=" * 70)
    print("üß™ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –§–ê–ó–´ 3")
    print("=" * 70)
    
    tests = [
        ("–ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞", test_simple_search_task),
        ("–°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è", test_complex_creation_task),
        ("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", test_parallel_execution_task),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è", test_validation_checks),
        ("–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤", test_risk_assessment),
        ("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", test_optimization),
        ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", test_statistics),
    ]
    
    results = {}
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = result
            passed += 1
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}", exc_info=True)
            results[test_name] = None
            failed += 1
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(tests)}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {passed/len(tests)*100:.1f}%")
    print("=" * 70)
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –§–∞–∑–∞ 3: Task Planning –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
    else:
        print(f"\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ {failed} —Ç–µ—Å—Ç–∞—Ö")
    
    return results, passed, failed


if __name__ == "__main__":
    results, passed, failed = run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if failed == 0 else 1)
