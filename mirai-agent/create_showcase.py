#!/usr/bin/env python3
"""
üöÄ MIRAI SHOWCASE - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º MIRAI
"""

import sys
import os

sys.path.insert(0, "/root/mirai/mirai-agent")
os.environ["PATH"] = f"{os.path.expanduser('~')}/.cargo/bin:" + os.environ["PATH"]

from core.autonomous_agent import AutonomousAgent


def main():
    print("=" * 80)
    print("üé¨ –ë–û–°–°-–ü–õ–ê–ù: –°–û–ó–î–ê–Å–ú MIRAI SHOWCASE")
    print("=" * 80)
    print("\n–ü–õ–ê–ù:")
    print("1. –°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π 'mirai-showcase' –Ω–∞ GitHub")
    print("2. –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –Ω–∞ –≤—Å–µ—Ö 8 —è–∑—ã–∫–∞—Ö")
    print("3. –°–æ–∑–¥–∞—Ç—å –≤–µ–±-API –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
    print("4. –î–æ–±–∞–≤–∏—Ç—å ML –ø—Ä–∏–º–µ—Ä")
    print("5. –ó–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë")
    print("\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~5 –º–∏–Ω—É—Ç")
    print("=" * 80)

    agent = AutonomousAgent()

    # –®–ê–ì 1: –°–æ–∑–¥–∞—ë–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    print("\nüì¶ –®–ê–ì 1/5: –°–æ–∑–¥–∞—ë–º GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
    print("-" * 80)

    result = agent.github_action(
        "create_repo",
        {
            "name": "mirai-showcase",
            "description": "ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞ MIRAI - 8 —è–∑—ã–∫–æ–≤, ML, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
            "private": False,
        },
    )
    print(result)

    # –®–ê–ì 2: –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö
    print("\nüíª –®–ê–ì 2/5: –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –Ω–∞ 8 —è–∑—ã–∫–∞—Ö...")
    print("-" * 80)

    examples_dir = "/root/mirai/mirai-showcase"
    os.makedirs(examples_dir, exist_ok=True)

    # Python
    print("   ‚úÖ Python...")
    agent.write_file(
        f"{examples_dir}/01_python_example.py",
        """#!/usr/bin/env python3
'''
MIRAI Example: Python
Fibonacci sequence generator
'''

def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

if __name__ == '__main__':
    print("üêç Python - Fibonacci sequence:")
    for i in range(10):
        print(f"F({i}) = {fibonacci(i)}")
""",
    )

    # JavaScript
    print("   ‚úÖ JavaScript...")
    agent.write_file(
        f"{examples_dir}/02_javascript_example.js",
        """#!/usr/bin/env node
/**
 * MIRAI Example: JavaScript
 * Prime number checker
 */

function isPrime(num) {
    if (num <= 1) return false;
    for (let i = 2; i <= Math.sqrt(num); i++) {
        if (num % i === 0) return false;
    }
    return true;
}

console.log("üìú JavaScript - Prime numbers up to 50:");
for (let i = 2; i <= 50; i++) {
    if (isPrime(i)) {
        process.stdout.write(i + " ");
    }
}
console.log();
""",
    )

    # C++
    print("   ‚úÖ C++...")
    agent.write_file(
        f"{examples_dir}/03_cpp_example.cpp",
        """/*
 * MIRAI Example: C++
 * Binary search implementation
 */

#include <iostream>
#include <vector>
using namespace std;

int binarySearch(vector<int>& arr, int target) {
    int left = 0, right = arr.size() - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target) return mid;
        if (arr[mid] < target) left = mid + 1;
        else right = mid - 1;
    }
    return -1;
}

int main() {
    cout << "‚öôÔ∏è C++ - Binary Search Demo" << endl;
    vector<int> arr = {1, 3, 5, 7, 9, 11, 13, 15};
    int target = 7;
    int result = binarySearch(arr, target);
    cout << "Found " << target << " at index: " << result << endl;
    return 0;
}
""",
    )

    # Go
    print("   ‚úÖ Go...")
    agent.write_file(
        f"{examples_dir}/04_go_example.go",
        """/*
 * MIRAI Example: Go
 * Concurrent worker pool
 */

package main

import (
    "fmt"
    "sync"
)

func worker(id int, jobs <-chan int, results chan<- int, wg *sync.WaitGroup) {
    defer wg.Done()
    for j := range jobs {
        fmt.Printf("Worker %d processing job %d\\n", id, j)
        results <- j * 2
    }
}

func main() {
    fmt.Println("üîµ Go - Concurrent Processing")
    jobs := make(chan int, 10)
    results := make(chan int, 10)
    var wg sync.WaitGroup

    for w := 1; w <= 3; w++ {
        wg.Add(1)
        go worker(w, jobs, results, &wg)
    }

    for j := 1; j <= 5; j++ {
        jobs <- j
    }
    close(jobs)

    wg.Wait()
    close(results)

    for r := range results {
        fmt.Printf("Result: %d\\n", r)
    }
}
""",
    )

    # Rust
    print("   ‚úÖ Rust...")
    agent.write_file(
        f"{examples_dir}/05_rust_example.rs",
        """/*
 * MIRAI Example: Rust
 * Memory-safe vector operations
 */

fn main() {
    println!("ü¶Ä Rust - Safe Vector Operations");
    
    let mut numbers: Vec<i32> = vec![1, 2, 3, 4, 5];
    
    // Map
    let doubled: Vec<i32> = numbers.iter().map(|x| x * 2).collect();
    println!("Doubled: {:?}", doubled);
    
    // Filter
    let evens: Vec<i32> = numbers.iter().filter(|x| *x % 2 == 0).cloned().collect();
    println!("Evens: {:?}", evens);
    
    // Sum
    let sum: i32 = numbers.iter().sum();
    println!("Sum: {}", sum);
}
""",
    )

    # Bash
    print("   ‚úÖ Bash...")
    agent.write_file(
        f"{examples_dir}/06_bash_example.sh",
        """#!/bin/bash
# MIRAI Example: Bash
# System information script

echo "üêö Bash - System Information"
echo "=========================="
echo "Hostname: $(hostname)"
echo "Kernel: $(uname -r)"
echo "Uptime: $(uptime -p)"
echo "CPU: $(nproc) cores"
echo "Memory: $(free -h | awk '/^Mem:/ {print $2}')"
echo "Disk: $(df -h / | awk 'NR==2 {print $4}') free"
""",
    )

    # –®–ê–ì 3: –°–æ–∑–¥–∞—ë–º README
    print("\nüìÑ –®–ê–ì 3/5: –°–æ–∑–¥–∞—ë–º README.md...")
    print("-" * 80)

    agent.write_file(
        f"{examples_dir}/README.md",
        """# ü§ñ MIRAI Showcase

> –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞ MIRAI

[![GitHub](https://img.shields.io/badge/GitHub-MIRAI-blue)](https://github.com/AgeeKey/mirai-showcase)
[![Languages](https://img.shields.io/badge/Languages-8-green)](.)
[![AI](https://img.shields.io/badge/AI-Autonomous-red)](.)

## üåü –û –ø—Ä–æ–µ–∫—Ç–µ

–≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω **–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º AI –∞–≥–µ–Ω—Ç–æ–º MIRAI** –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.

## üî§ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏

MIRAI –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥ –Ω–∞:

1. üêç **Python** - AI, ML, Data Science
2. üìú **JavaScript** - –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, Node.js
3. üìò **TypeScript** - –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JavaScript
4. üîß **C** - –°–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
5. ‚öôÔ∏è **C++** - –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
6. üîµ **Go** - –û–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã, –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
7. ü¶Ä **Rust** - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
8. üêö **Bash** - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ —Å–∫—Ä–∏–ø—Ç—ã

## üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

- SQLite - –õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î
- PostgreSQL - –†–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –ë–î
- Redis - –ö—ç—à –∏ –æ—á–µ—Ä–µ–¥–∏
- MongoDB - NoSQL –¥–æ–∫—É–º–µ–Ω—Ç—ã

## üõ†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ 8 —è–∑—ã–∫–∞—Ö
- ‚úÖ –†–∞–±–æ—Ç–∞ —Å 4 —Ç–∏–ø–∞–º–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
- ‚úÖ GitHub API (—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤, issues, PR)
- ‚úÖ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (PyTorch, scikit-learn)
- ‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (pandas, numpy)
- ‚úÖ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (Flask, Django)
- ‚úÖ –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
- ‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π

## üì¶ –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞

–í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:

```bash
# Python
python3 01_python_example.py

# JavaScript
node 02_javascript_example.js

# C++
g++ 03_cpp_example.cpp -o cpp_example && ./cpp_example

# Go
go run 04_go_example.go

# Rust
rustc 05_rust_example.rs && ./05_rust_example

# Bash
bash 06_bash_example.sh
```

## ü§ñ –û–± –∞–≥–µ–Ω—Ç–µ

**MIRAI** - —ç—Ç–æ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π AI –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π:

- –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è
- –ü–∏—Å–∞—Ç—å –∫–æ–¥ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ —è–∑—ã–∫–æ–≤
- –†–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ API
- –û–±—É—á–∞—Ç—å—Å—è –∏ —É–ª—É—á—à–∞—Ç—å —Å–µ–±—è
- –°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –æ—Ç –∏–¥–µ–∏ –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

## üìä –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

- **AI/ML**: PyTorch, scikit-learn, pandas
- **–í–µ–±**: Flask, Django, FastAPI
- **–ë–î**: PostgreSQL, Redis, SQLite, MongoDB
- **DevOps**: Docker, CI/CD
- **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**: pytest, unittest

## üöÄ –ó–∞–ø—É—Å–∫

```bash
git clone https://github.com/AgeeKey/mirai-showcase.git
cd mirai-showcase
# –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ
```

## üìù –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License - —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º AI –∞–≥–µ–Ω—Ç–æ–º MIRAI

## üîó –°—Å—ã–ª–∫–∏

- [–û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π MIRAI](https://github.com/AgeeKey/Mirai)
- [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](https://github.com/AgeeKey/Mirai/blob/main/README.md)

---

**ü§ñ –°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≥–µ–Ω—Ç–æ–º MIRAI | 2025**
""",
    )

    # –®–ê–ì 4: –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-API
    print("\nüåê –®–ê–ì 4/5: –°–æ–∑–¥–∞—ë–º –≤–µ–±-API...")
    print("-" * 80)

    agent.write_file(
        f"{examples_dir}/api_server.py",
        """#!/usr/bin/env python3
'''
MIRAI API Server
–ü—Ä–æ—Å—Ç–æ–π REST API –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
'''

from flask import Flask, jsonify, request
import datetime

app = Flask(__name__)

@app.route('/')
def home():
    return jsonify({
        'agent': 'MIRAI',
        'version': '2.0',
        'status': 'operational',
        'capabilities': {
            'languages': 8,
            'databases': 4,
            'ml_frameworks': ['PyTorch', 'scikit-learn'],
            'github_api': True
        },
        'timestamp': datetime.datetime.now().isoformat()
    })

@app.route('/api/execute', methods=['POST'])
def execute_code():
    data = request.json
    language = data.get('language', 'python')
    code = data.get('code', '')
    
    return jsonify({
        'status': 'received',
        'language': language,
        'code_length': len(code),
        'message': 'Code execution would happen here'
    })

@app.route('/api/health')
def health():
    return jsonify({'status': 'healthy', 'uptime': '100%'})

if __name__ == '__main__':
    print("üöÄ MIRAI API Server starting...")
    print("üì° Access at: http://localhost:5000")
    app.run(host='0.0.0.0', port=5000, debug=False)
""",
    )

    # –®–ê–ì 5: ML –ø—Ä–∏–º–µ—Ä
    print("\nüß† –®–ê–ì 5/5: –°–æ–∑–¥–∞—ë–º ML –ø—Ä–∏–º–µ—Ä...")
    print("-" * 80)

    agent.write_file(
        f"{examples_dir}/ml_example.py",
        """#!/usr/bin/env python3
'''
MIRAI ML Example
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å scikit-learn
'''

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import numpy as np

def main():
    print("üß† MIRAI - Machine Learning Demo")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\\nüìä Loading Iris dataset...")
    iris = load_iris()
    X, y = iris.data, iris.target
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/test
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    
    print(f"   Training samples: {len(X_train)}")
    print(f"   Testing samples: {len(X_test)}")
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    print("\\nüîß Training Random Forest model...")
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    print("\\nüéØ Making predictions...")
    y_pred = model.predict(X_test)
    
    # –¢–æ—á–Ω–æ—Å—Ç—å
    accuracy = accuracy_score(y_test, y_pred)
    print(f"\\n‚úÖ Accuracy: {accuracy * 100:.2f}%")
    
    # Feature importance
    print("\\nüìà Feature Importance:")
    for i, importance in enumerate(model.feature_importances_):
        print(f"   {iris.feature_names[i]}: {importance:.4f}")
    
    print("\\n‚úÖ ML Demo completed!")

if __name__ == '__main__':
    main()
""",
    )

    print("\n" + "=" * 80)
    print("‚úÖ –í–°–Å –ì–û–¢–û–í–û!")
    print("=" * 80)

    print(f"\nüìÅ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤: {examples_dir}")
    print("\nüì¶ –§–∞–π–ª—ã:")
    print("   ‚úÖ 01_python_example.py")
    print("   ‚úÖ 02_javascript_example.js")
    print("   ‚úÖ 03_cpp_example.cpp")
    print("   ‚úÖ 04_go_example.go")
    print("   ‚úÖ 05_rust_example.rs")
    print("   ‚úÖ 06_bash_example.sh")
    print("   ‚úÖ api_server.py (Flask API)")
    print("   ‚úÖ ml_example.py (Machine Learning)")
    print("   ‚úÖ README.md (–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)")

    print("\nüåê GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:")
    print("   https://github.com/AgeeKey/mirai-showcase")

    print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("   1. cd /root/mirai/mirai-showcase")
    print(
        "   2. git init && git remote add origin https://github.com/AgeeKey/mirai-showcase.git"
    )
    print("   3. git add . && git commit -m 'Initial commit by MIRAI'")
    print("   4. git push -u origin main")

    print("\nüí° –ò–õ–ò –ó–ê–ü–£–°–¢–ò–¢–¨ –î–ï–ú–û:")
    print("   python3 /root/mirai/mirai-showcase/ml_example.py")
    print("   python3 /root/mirai/mirai-showcase/api_server.py")


if __name__ == "__main__":
    main()
