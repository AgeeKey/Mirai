"""
Real-time Learning API
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
"""

import asyncio
import uuid
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Dict, Optional, List
import logging

from core.nasa_level.orchestrator import NASALearningOrchestrator
from core.nasa_level.learning_pipeline import Priority

logger = logging.getLogger(__name__)


class TaskStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á–∏ –æ–±—É—á–µ–Ω–∏—è"""
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


@dataclass
class LearningTask:
    """–ó–∞–¥–∞—á–∞ –æ–±—É—á–µ–Ω–∏—è"""
    task_id: str
    technology: str
    depth: str = "basic"
    priority: Priority = Priority.NORMAL
    status: TaskStatus = TaskStatus.PENDING
    progress: int = 0
    result: Optional[dict] = None
    error: Optional[str] = None
    created_at: datetime = field(default_factory=datetime.now)
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None

    def to_dict(self) -> dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON"""
        return {
            "task_id": self.task_id,
            "technology": self.technology,
            "depth": self.depth,
            "priority": self.priority.name,
            "status": self.status.value,
            "progress": self.progress,
            "result": self.result,
            "error": self.error,
            "created_at": self.created_at.isoformat(),
            "started_at": self.started_at.isoformat() if self.started_at else None,
            "completed_at": self.completed_at.isoformat() if self.completed_at else None,
        }


class LearningTaskManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á –æ–±—É—á–µ–Ω–∏—è
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞—á, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ,
    –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """

    def __init__(self, max_concurrent: int = 2):
        self.orchestrator = NASALearningOrchestrator()
        self.tasks: Dict[str, LearningTask] = {}
        self.queue: asyncio.Queue = asyncio.Queue()
        self.max_concurrent = max_concurrent
        self.workers: List[asyncio.Task] = []
        self.running = False
        self.callbacks: Dict[str, List] = {}  # task_id -> [callback functions]

        logger.info(f"üéØ LearningTaskManager initialized (max_concurrent={max_concurrent})")

    def add_task(
        self, 
        technology: str, 
        depth: str = "basic",
        priority: Priority = Priority.NORMAL
    ) -> str:
        """
        –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        
        Returns:
            task_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
        """
        task_id = str(uuid.uuid4())
        task = LearningTask(
            task_id=task_id,
            technology=technology,
            depth=depth,
            priority=priority,
        )
        
        self.tasks[task_id] = task
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        priority_value = priority.value
        self.queue.put_nowait((priority_value, task_id))
        
        logger.info(f"üìù Task added: {task_id} - {technology} ({priority.name})")
        self._emit_event(task_id, "created", {
            "task_id": task_id,
            "technology": technology,
            "status": "pending"
        })
        
        return task_id

    def get_task(self, task_id: str) -> Optional[LearningTask]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID"""
        return self.tasks.get(task_id)

    def get_all_tasks(self) -> List[LearningTask]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"""
        return list(self.tasks.values())

    def cancel_task(self, task_id: str) -> bool:
        """
        –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É
        
        Returns:
            True –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        task = self.tasks.get(task_id)
        if not task:
            return False
        
        if task.status in [TaskStatus.COMPLETED, TaskStatus.FAILED, TaskStatus.CANCELLED]:
            return False
        
        task.status = TaskStatus.CANCELLED
        task.completed_at = datetime.now()
        
        logger.info(f"‚ùå Task cancelled: {task_id}")
        self._emit_event(task_id, "cancelled", {"task_id": task_id})
        
        return True

    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
        if self.running:
            logger.warning("‚ö†Ô∏è  Task manager already running")
            return
        
        self.running = True
        logger.info(f"üöÄ Starting {self.max_concurrent} workers...")
        
        for i in range(self.max_concurrent):
            worker = asyncio.create_task(self._worker(i))
            self.workers.append(worker)
        
        logger.info(f"‚úÖ {len(self.workers)} workers started")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Ä–∫–µ—Ä—ã"""
        if not self.running:
            return
        
        logger.info("üõë Stopping workers...")
        self.running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã
        for worker in self.workers:
            worker.cancel()
        
        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.gather(*self.workers, return_exceptions=True)
        self.workers.clear()
        
        logger.info("‚úÖ Workers stopped")

    async def _worker(self, worker_id: int):
        """
        –í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        
        Args:
            worker_id: ID –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        logger.info(f"üë∑ Worker {worker_id} started")
        
        while self.running:
            try:
                # –ñ–¥—ë–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
                try:
                    priority, task_id = await asyncio.wait_for(
                        self.queue.get(), 
                        timeout=1.0
                    )
                except asyncio.TimeoutError:
                    continue
                
                task = self.tasks.get(task_id)
                if not task:
                    logger.error(f"‚ùå Task {task_id} not found")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
                if task.status == TaskStatus.CANCELLED:
                    logger.info(f"‚è≠Ô∏è  Task {task_id} was cancelled, skipping")
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
                await self._execute_task(worker_id, task)
                
            except asyncio.CancelledError:
                logger.info(f"üë∑ Worker {worker_id} cancelled")
                break
            except Exception as e:
                logger.error(f"üí• Worker {worker_id} error: {e}", exc_info=True)

        logger.info(f"üë∑ Worker {worker_id} stopped")

    async def _execute_task(self, worker_id: int, task: LearningTask):
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            worker_id: ID –≤–æ—Ä–∫–µ—Ä–∞
            task: –ó–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        logger.info(f"üéì Worker {worker_id} executing: {task.task_id} - {task.technology}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        task.status = TaskStatus.RUNNING
        task.started_at = datetime.now()
        task.progress = 0
        
        self._emit_event(task.task_id, "started", {
            "task_id": task.task_id,
            "technology": task.technology,
            "worker_id": worker_id
        })
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—É—á–µ–Ω–∏–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ executor)
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                None,
                self.orchestrator.learn_technology,
                task.technology,
                task.depth,
                task.priority
            )
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å learning engine)
            for progress in [25, 50, 75, 100]:
                task.progress = progress
                self._emit_event(task.task_id, "progress", {
                    "task_id": task.task_id,
                    "progress": progress,
                    "technology": task.technology
                })
                await asyncio.sleep(0.1)
            
            # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            task.status = TaskStatus.COMPLETED
            task.completed_at = datetime.now()
            task.progress = 100
            task.result = {
                "success": result.success,
                "proficiency": result.proficiency,
                "quality_grade": result.quality_grade,
                "execution_time": result.execution_time,
                "tests_passed": result.tests_passed,
                "tests_total": result.tests_total,
            }
            
            logger.info(f"‚úÖ Task completed: {task.task_id} - {task.technology} "
                       f"(proficiency: {result.proficiency:.1f}%)")
            
            self._emit_event(task.task_id, "completed", {
                "task_id": task.task_id,
                "technology": task.technology,
                "result": task.result
            })
            
        except Exception as e:
            # –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            task.status = TaskStatus.FAILED
            task.completed_at = datetime.now()
            task.error = str(e)
            
            logger.error(f"‚ùå Task failed: {task.task_id} - {e}")
            
            self._emit_event(task.task_id, "error", {
                "task_id": task.task_id,
                "technology": task.technology,
                "error": str(e)
            })

    def register_callback(self, task_id: str, callback):
        """
        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å callback –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∑–∞–¥–∞—á–∏
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            callback: –§—É–Ω–∫—Ü–∏—è callback(event_type, data)
        """
        if task_id not in self.callbacks:
            self.callbacks[task_id] = []
        self.callbacks[task_id].append(callback)

    def _emit_event(self, task_id: str, event_type: str, data: dict):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        """
        if task_id in self.callbacks:
            for callback in self.callbacks[task_id]:
                try:
                    callback(event_type, data)
                except Exception as e:
                    logger.error(f"üí• Callback error: {e}")

    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á"""
        total = len(self.tasks)
        pending = sum(1 for t in self.tasks.values() if t.status == TaskStatus.PENDING)
        running = sum(1 for t in self.tasks.values() if t.status == TaskStatus.RUNNING)
        completed = sum(1 for t in self.tasks.values() if t.status == TaskStatus.COMPLETED)
        failed = sum(1 for t in self.tasks.values() if t.status == TaskStatus.FAILED)
        cancelled = sum(1 for t in self.tasks.values() if t.status == TaskStatus.CANCELLED)
        
        return {
            "total": total,
            "pending": pending,
            "running": running,
            "completed": completed,
            "failed": failed,
            "cancelled": cancelled,
            "queue_size": self.queue.qsize(),
            "workers": len(self.workers),
            "max_concurrent": self.max_concurrent,
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å task manager
_task_manager: Optional[LearningTaskManager] = None


def get_task_manager() -> LearningTaskManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π task manager (singleton)"""
    global _task_manager
    if _task_manager is None:
        _task_manager = LearningTaskManager(max_concurrent=2)
    return _task_manager
