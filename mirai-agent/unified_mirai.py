#!/usr/bin/env python3
"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    MIRAI - –ï–¥–∏–Ω—ã–π –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ê–≥–µ–Ω—Ç                  ‚ïë
‚ïë                  One Agent to Rule Them All                         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

MIRAI - —ç—Ç–æ –û–î–ò–ù –º–æ—â–Ω—ã–π –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –í–°–Å:

ü§ñ –ê–í–¢–û–ù–û–ú–ù–û–°–¢–¨
- –°–∞–º —Å—Ç–∞–≤–∏—Ç —Å–µ–±–µ —Ü–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏
- –£—á–∏—Ç—Å—è –Ω–∞ —Å–≤–æ–∏—Ö –æ—à–∏–±–∫–∞—Ö
- –†–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º

üñ•Ô∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ü–¨–Æ–¢–ï–†–û–ú
- –£–ø—Ä–∞–≤–ª—è–µ—Ç –º—ã—à—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
- –í–∏–¥–∏—Ç —ç–∫—Ä–∞–Ω —á–µ—Ä–µ–∑ GPT-4 Vision
- –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–∫–Ω–∞–º–∏
- –£–ø—Ä–∞–≤–ª—è–µ—Ç –±—Ä–∞—É–∑–µ—Ä–æ–º

üíª –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï
- –ü–∏—à–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ –Ω–∞ Python, JS, C++, Go, Rust
- –†–∞–±–æ—Ç–∞–µ—Ç —Å GitHub
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–¥

üåê –ò–ù–¢–ï–†–ù–ï–¢
- –ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Google
- –†–∞–±–æ—Ç–∞–µ—Ç —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å API

üìä –î–ê–ù–ù–´–ï
- –†–∞–±–æ—Ç–∞–µ—Ç —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö (SQLite, PostgreSQL, MongoDB, Redis)
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
- –°–æ–∑–¥–∞—ë—Ç –æ—Ç—á—ë—Ç—ã

üß† –ü–ê–ú–Ø–¢–¨ –ò –û–ë–£–ß–ï–ù–ò–ï
- –ü–æ–º–Ω–∏—Ç –≤—Å—ë —á—Ç–æ –¥–µ–ª–∞–ª
- –£—á–∏—Ç—Å—è –Ω–∞ –æ–ø—ã—Ç–µ
- –£–ª—É—á—à–∞–µ—Ç —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏

–ê–≤—Ç–æ—Ä: MIRAI Team
–î–∞—Ç–∞: 2025-10-24
"""

import asyncio
import json
import logging
import os
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional

from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("mirai.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class UnifiedMiraiAgent:
    """
    –ï–¥–∏–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç MIRAI
    
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –í–°–ï –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ:
    - AutonomousAgent (–º—ã—à–ª–µ–Ω–∏–µ, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
    - DesktopAgent (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º)
    - MultiLanguageExecutor (–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞)
    - BrowserAutomation (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–º)
    - SelfEvolution (—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ)
    - DatabaseManager (—Ä–∞–±–æ—Ç–∞ —Å –ë–î)
    - GitHubIntegration (—Ä–∞–±–æ—Ç–∞ —Å GitHub)
    - WebSearch (–ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ)
    - Memory (–¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å)
    """
    
    def __init__(self, user_id: str = "main_user"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ–¥–∏–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ MIRAI"""
        
        logger.info("=" * 70)
        logger.info("MIRAI - –ó–∞–ø—É—Å–∫ –ï–¥–∏–Ω–æ–≥–æ –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ê–≥–µ–Ω—Ç–∞")
        logger.info("=" * 70)
        
        self.user_id = user_id
        self.start_time = time.time()
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á–∏
        self.api_keys = self._load_api_keys()
        self.client = OpenAI(api_key=self.api_keys.get("openai"))
        self.model = "gpt-4o"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT-4o –¥–ª—è –≤—Å–µ–≥–æ
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏
        self._init_modules()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        self.is_running = False
        self.current_task = None
        self.tasks_queue = []
        self.completed_tasks = []
        
        logger.info("‚úì MIRAI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        logger.info(f"   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º: {self.desktop_available}")
        logger.info(f"   ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞: {self.code_execution_available}")
        logger.info(f"   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–º: {self.browser_available}")
        logger.info(f"   ‚Ä¢ üåê Web Scraper (–ø–∞—Ä—Å–∏–Ω–≥): {self.web_scraper_available}")
        logger.info(f"   ‚Ä¢ ü§ñ Selenium (–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è): {self.selenium_available}")
        logger.info(f"   ‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –ë–î: {self.database_available}")
        logger.info(f"   ‚Ä¢ GitHub: {self.github_available}")
        logger.info(f"   ‚Ä¢ –í–µ–±-–ø–æ–∏—Å–∫: {self.web_search_available}")
        logger.info(f"   ‚Ä¢ –ü–∞–º—è—Ç—å: {self.memory_available}")
        logger.info(f"   ‚Ä¢ –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ: {self.evolution_available}")
    
    def _load_api_keys(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á–∏"""
        config_path = Path(__file__).parent / "configs" / "api_keys.json"
        
        if config_path.exists():
            with open(config_path, encoding='utf-8') as f:
                keys = json.load(f)
                return keys
        
        # Fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        return {
            "openai": os.getenv("OPENAI_API_KEY"),
            "github_token": os.getenv("GITHUB_TOKEN")
        }
    
    def _init_modules(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏"""
        
        # 1. Desktop Agent (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º)
        try:
            from core.desktop_agent_v2 import MiraiDesktopAgent
            self.desktop = MiraiDesktopAgent(
                openai_api_key=self.api_keys.get("openai"),
                enable_safety=True,
                enable_memory=False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é –ø–∞–º—è—Ç—å
                user_id=self.user_id
            )
            self.desktop_available = True
            logger.info("‚úÖ Desktop Agent –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Desktop Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.desktop = None
            self.desktop_available = False
        
        # 2. Multi-Language Executor (–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞)
        try:
            from core.multi_language_executor import MultiLanguageExecutor
            self.code_executor = MultiLanguageExecutor()
            self.code_execution_available = True
            logger.info("‚úÖ Multi-Language Executor –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Code Executor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.code_executor = None
            self.code_execution_available = False
        
        # 3. Browser Automation (–°—Ç–∞—Ä—ã–π –º–æ–¥—É–ª—å)
        try:
            from core.browser_automation import BrowserAutomation
            self.browser = BrowserAutomation(headless=False)
            self.browser_available = True
            logger.info("‚úÖ Browser Automation –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Browser –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.browser = None
            self.browser_available = False
        
        # 3.1. Web Scraper Agent (–ù–û–í–´–ô - –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü)
        try:
            from core.web_scraper_agent import WebScraperAgent
            self.web_scraper = WebScraperAgent(ai_manager=None)  # AI –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ–∑–∂–µ
            self.web_scraper_available = True
            logger.info("‚úÖ Web Scraper Agent –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Web Scraper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.web_scraper = None
            self.web_scraper_available = False
        
        # 3.2. Selenium Browser Agent (–ù–û–í–´–ô - –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞)
        try:
            from core.selenium_browser_agent import SeleniumBrowserAgent, SELENIUM_AVAILABLE
            if SELENIUM_AVAILABLE:
                self.selenium_agent = SeleniumBrowserAgent(headless=False)
                self.selenium_available = True
                logger.info("‚úÖ Selenium Browser Agent –∑–∞–≥—Ä—É–∂–µ–Ω")
            else:
                self.selenium_agent = None
                self.selenium_available = False
                logger.info("‚ÑπÔ∏è Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Selenium Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.selenium_agent = None
            self.selenium_available = False
        
        # 4. Database Manager
        try:
            from core.database_manager import DatabaseManager
            self.database = DatabaseManager()
            self.database_available = True
            logger.info("‚úÖ Database Manager –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Database –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.database = None
            self.database_available = False
        
        # 5. GitHub Integration
        try:
            from core.github_integration import GitHubIntegration
            self.github = GitHubIntegration()
            self.github_available = True
            logger.info("‚úÖ GitHub Integration –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è GitHub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.github = None
            self.github_available = False
        
        # 6. Web Search
        try:
            from core.web_search_integration import get_web_search
            self.web_search = get_web_search()
            self.web_search_available = True
            logger.info("‚úÖ Web Search –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Web Search –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.web_search = None
            self.web_search_available = False
        
        # 7. Memory Manager
        try:
            from core.memory_manager import get_memory_manager
            self.memory = get_memory_manager()
            self.session = self.memory.create_session(user_id=self.user_id)
            self.session_id = self.session.id
            self.memory_available = True
            logger.info(f"‚úÖ Memory Manager –∑–∞–≥—Ä—É–∂–µ–Ω (session: {self.session_id})")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Memory –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.memory = None
            self.session_id = None
            self.memory_available = False
        
        # 8. Self Evolution
        try:
            from core.self_evolution import SelfEvolutionSystem
            self.evolution = SelfEvolutionSystem()
            self.evolution_available = True
            logger.info("‚úÖ Self Evolution –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Self Evolution –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.evolution = None
            self.evolution_available = False
        
        # –°–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è GPT
        self.tools = self._create_tools()
    
    def _create_tools(self) -> List[Dict]:
        """–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è GPT"""
        tools = []
        
        # Desktop tools
        if self.desktop_available:
            tools.extend([
                {
                    "type": "function",
                    "function": {
                        "name": "control_mouse",
                        "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é: –∫–ª–∏–∫, –¥–≤–∏–∂–µ–Ω–∏–µ, –ø–æ–∑–∏—Ü–∏—è",
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "action": {"type": "string", "enum": ["click", "move", "get_position"]},
                                "x": {"type": "integer"},
                                "y": {"type": "integer"},
                                "button": {"type": "string", "enum": ["left", "right", "middle"]}
                            },
                            "required": ["action"]
                        }
                    }
                },
                {
                    "type": "function",
                    "function": {
                        "name": "control_keyboard",
                        "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: –ø–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–∞, –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à",
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "action": {"type": "string", "enum": ["type", "press"]},
                                "text": {"type": "string"},
                                "keys": {"type": "string"}
                            },
                            "required": ["action"]
                        }
                    }
                },
                {
                    "type": "function",
                    "function": {
                        "name": "screenshot_and_analyze",
                        "description": "–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Vision",
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "question": {"type": "string", "description": "–í–æ–ø—Ä–æ—Å –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ"}
                            }
                        }
                    }
                },
                {
                    "type": "function",
                    "function": {
                        "name": "manage_windows",
                        "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: –Ω–∞–π—Ç–∏, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–∫—Ä—ã—Ç—å",
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "action": {"type": "string", "enum": ["find", "activate", "open"]},
                                "title": {"type": "string"},
                                "app_name": {"type": "string"}
                            },
                            "required": ["action"]
                        }
                    }
                }
            ])
        
        # Code execution tools
        if self.code_execution_available:
            tools.append({
                "type": "function",
                "function": {
                    "name": "execute_code",
                    "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥ –Ω–∞ Python, JavaScript, C++, Go, Rust, Bash",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "language": {"type": "string", "enum": ["python", "javascript", "cpp", "go", "rust", "bash"]},
                            "code": {"type": "string"}
                        },
                        "required": ["language", "code"]
                    }
                }
            })
        
        # Web tools
        if self.web_search_available:
            tools.append({
                "type": "function",
                "function": {
                    "name": "search_web",
                    "description": "–ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Google",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "query": {"type": "string"}
                        },
                        "required": ["query"]
                    }
                }
            })
        
        if self.browser_available:
            tools.append({
                "type": "function",
                "function": {
                    "name": "browse_web",
                    "description": "–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "url": {"type": "string"}
                        },
                        "required": ["url"]
                    }
                }
            })
        
        # üåê –ù–û–í–´–ô: Web Scraper - —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑
        if self.web_scraper_available:
            tools.append({
                "type": "function",
                "function": {
                    "name": "search_and_analyze_web",
                    "description": "üåê –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –≤ Google —Å –ß–¢–ï–ù–ò–ï–ú –∏ –ê–ù–ê–õ–ò–ó–û–ú –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤. "
                                   "–ê–≥–µ–Ω—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–∞–π—Ç—ã, —á–∏—Ç–∞–µ—Ç –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –¥–∞—ë—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç. "
                                   "–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–µ–π.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Binance', '—á—Ç–æ —Ç–∞–∫–æ–µ Python')"
                            },
                            "num_results": {
                                "type": "integer",
                                "description": "–°–∫–æ–ª—å–∫–æ —Å–∞–π—Ç–æ–≤ –ø—Ä–æ—á–∏—Ç–∞—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)",
                                "default": 3
                            }
                        },
                        "required": ["query"]
                    }
                }
            })
        
        # ü§ñ –ù–û–í–´–ô: Selenium - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        if self.selenium_available:
            tools.append({
                "type": "function",
                "function": {
                    "name": "automate_browser",
                    "description": "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ Selenium. "
                                   "–ú–æ–∂–µ—Ç –∫–ª–∏–∫–∞—Ç—å, –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç, –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "action": {
                                "type": "string",
                                "enum": ["search_google", "screenshot", "visit_url"],
                                "description": "–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                            },
                            "query": {
                                "type": "string",
                                "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–ª—è search_google)"
                            },
                            "url": {
                                "type": "string",
                                "description": "URL –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è (–¥–ª—è visit_url)"
                            }
                        },
                        "required": ["action"]
                    }
                }
            })
        
        # Database tools
        if self.database_available:
            tools.append({
                "type": "function",
                "function": {
                    "name": "database_query",
                    "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "db_type": {"type": "string", "enum": ["sqlite", "postgresql"]},
                            "query": {"type": "string"}
                        },
                        "required": ["db_type", "query"]
                    }
                }
            })
        
        # GitHub tools
        if self.github_available:
            tools.append({
                "type": "function",
                "function": {
                    "name": "github_action",
                    "description": "–†–∞–±–æ—Ç–∞ —Å GitHub: —Å–æ–∑–¥–∞—Ç—å issue, commit, PR",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "action": {"type": "string", "enum": ["create_issue", "commit", "create_pr"]},
                            "repo": {"type": "string"},
                            "title": {"type": "string"},
                            "description": {"type": "string"}
                        },
                        "required": ["action"]
                    }
                }
            })
        
        # Utility tools
        tools.extend([
            {
                "type": "function",
                "function": {
                    "name": "read_file",
                    "description": "–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "filepath": {"type": "string"}
                        },
                        "required": ["filepath"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "write_file",
                    "description": "–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "filepath": {"type": "string"},
                            "content": {"type": "string"}
                        },
                        "required": ["filepath", "content"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "wait",
                    "description": "–ü–æ–¥–æ–∂–¥–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "seconds": {"type": "number"}
                        },
                        "required": ["seconds"]
                    }
                }
            }
        ])
        
        return tools
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def execute_task(self, task: str, max_iterations: int = 30) -> str:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–Ω–æ–º–Ω–æ
        
        MIRAI —Å–∞–º —Ä–µ—à–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å –∏ –≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        """
        logger.info("=" * 70)
        logger.info(f"üéØ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {task}")
        logger.info("=" * 70)
        
        self.current_task = task
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å
        if self.memory_available:
            from core.memory_manager import Message
            msg = Message(
                session_id=self.session_id,
                role="user",
                content=f"[TASK] {task}",
                timestamp=datetime.now()
            )
            self.memory.add_message(msg)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = f"""–¢—ã MIRAI - –µ–¥–∏–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π AI –∞–≥–µ–Ω—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –Ω–∞–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.

–¢–´ –£–ú–ï–ï–®–¨ –í–°–Å:
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º (–º—ã—à—å, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –æ–∫–Ω–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã)
‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (Python, JS, C++, Go, Rust)
‚úÖ –†–∞–±–æ—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º (–ø–æ–∏—Å–∫, –±—Ä–∞—É–∑–µ—Ä)
‚úÖ –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ (–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Ñ–∞–π–ª—ã)
‚úÖ GitHub (issues, commits, PRs)
‚úÖ –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ

–î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
{len(self.tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: {task}

–ü–†–ê–í–ò–õ–ê:
1. –†–∞–±–æ—Ç–∞–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ - —Å–∞–º —Ä–µ—à–∞–π —á—Ç–æ –¥–µ–ª–∞—Ç—å
2. –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
3. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±
4. –£—á–∏—Å—å –Ω–∞ –æ—à–∏–±–∫–∞—Ö
5. –ë—É–¥—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º

–î–µ–π—Å—Ç–≤—É–π!"""

        messages = [{"role": "system", "content": system_prompt}]
        
        for iteration in range(max_iterations):
            logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1}/{max_iterations}")
            
            try:
                # –ó–∞–ø—Ä–æ—Å –∫ GPT-4o
                response = self.client.chat.completions.create(
                    model=self.model,
                    messages=messages,
                    tools=self.tools,
                    tool_choice="auto",
                    temperature=0.7
                )
                
                response_message = response.choices[0].message
                messages.append(response_message)
                
                # –ï—Å–ª–∏ –Ω–µ—Ç tool calls - –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                if not response_message.tool_calls:
                    result = response_message.content or "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
                    logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {result}")
                    
                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if self.memory_available:
                        from core.memory_manager import Message
                        result_msg = Message(
                            session_id=self.session_id,
                            role="assistant",
                            content=f"[RESULT] {result}",
                            timestamp=datetime.now()
                        )
                        self.memory.add_message(result_msg)
                    
                    self.completed_tasks.append({
                        "task": task,
                        "result": result,
                        "iterations": iteration + 1,
                        "timestamp": datetime.now().isoformat()
                    })
                    
                    return result
                
                # –í—ã–ø–æ–ª–Ω–∏—Ç—å tool calls
                for tool_call in response_message.tool_calls:
                    function_name = tool_call.function.name
                    function_args = json.loads(tool_call.function.arguments)
                    
                    logger.info(f"üîß {function_name}({function_args})")
                    
                    # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
                    result = self._execute_tool(function_name, function_args)
                    
                    logger.info(f"üì§ {result[:100]}...")
                    
                    # –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    messages.append({
                        "tool_call_id": tool_call.id,
                        "role": "tool",
                        "name": function_name,
                        "content": result
                    })
            
            except Exception as e:
                error = f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}: {e}"
                logger.error(error, exc_info=True)
                return error
        
        return "‚ö†Ô∏è –õ–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ó–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    
    def _execute_tool(self, name: str, args: Dict[str, Any]) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        
        try:
            # Desktop tools
            if name == "control_mouse":
                action = args.get("action")
                if action == "click":
                    return self.desktop.click_at_position(args.get("x"), args.get("y"), button=args.get("button", "left"))
                elif action == "move":
                    return self.desktop.move_mouse(args.get("x"), args.get("y"))
                elif action == "get_position":
                    return self.desktop.get_mouse_position()
            
            elif name == "control_keyboard":
                action = args.get("action")
                if action == "type":
                    return self.desktop.type_text(args.get("text"))
                elif action == "press":
                    return self.desktop.press_key(args.get("keys"))
            
            elif name == "screenshot_and_analyze":
                self.desktop.take_screenshot()
                return self.desktop.analyze_screenshot(args.get("question", "–ß—Ç–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ?"))
            
            elif name == "manage_windows":
                action = args.get("action")
                if action == "find":
                    return self.desktop.find_window(args.get("title"))
                elif action == "activate":
                    return self.desktop.activate_window(args.get("title"))
                elif action == "open":
                    return self.desktop.open_application(args.get("app_name"))
            
            # Code execution
            elif name == "execute_code":
                return self.code_executor.execute(args.get("language"), args.get("code"))
            
            # Web tools
            elif name == "search_web":
                results = self.web_search.search(args.get("query"))
                return json.dumps(results, ensure_ascii=False)
            
            elif name == "browse_web":
                self.browser.navigate(args.get("url"))
                return f"‚úÖ –û—Ç–∫—Ä—ã—Ç: {args.get('url')}"
            
            # üåê –ù–û–í–´–ô: Web Scraper - —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑
            elif name == "search_and_analyze_web":
                return asyncio.run(self._search_and_analyze_web(
                    args.get("query"),
                    args.get("num_results", 3)
                ))
            
            # ü§ñ –ù–û–í–´–ô: Selenium - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞  
            elif name == "automate_browser":
                return asyncio.run(self._automate_browser(
                    args.get("action"),
                    args.get("query"),
                    args.get("url")
                ))
            
            # Database
            elif name == "database_query":
                return self.database.execute_query(args.get("db_type"), args.get("query"))
            
            # GitHub
            elif name == "github_action":
                action = args.get("action")
                if action == "create_issue":
                    return self.github.create_issue(args.get("repo"), args.get("title"), args.get("description"))
            
            # File operations
            elif name == "read_file":
                with open(args.get("filepath"), 'r', encoding='utf-8') as f:
                    return f.read()
            
            elif name == "write_file":
                with open(args.get("filepath"), 'w', encoding='utf-8') as f:
                    f.write(args.get("content"))
                return f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ {args.get('filepath')}"
            
            # Utility
            elif name == "wait":
                time.sleep(args.get("seconds"))
                return f"‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ {args.get('seconds')}—Å"
            
            else:
                return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {name}"
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {name}: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ù–û–í–´–ï –ú–ï–¢–û–î–´: –†–µ–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    async def _search_and_analyze_web(self, query: str, num_results: int = 3) -> str:
        """
        üåê –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –≤ Google —Å —á—Ç–µ–Ω–∏–µ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º —Å–∞–π—Ç–æ–≤.
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            num_results: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        logger.info(f"üåê –†–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑: {query}")
        
        try:
            # –£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            clean_query = self.web_scraper.extract_search_query(query)
            logger.info(f"üîç –û—á–∏—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {clean_query}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑
            result = await self.web_scraper.search_and_analyze(
                clean_query,
                num_results=num_results,
                analyze=True  # –í–∫–ª—é—á–∞–µ–º AI –∞–Ω–∞–ª–∏–∑
            )
            
            if not result['success']:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç
            response_parts = [
                f"üîç **–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω**: {clean_query}",
                f"üìä **–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤**: {result['summary']['total_results']}",
                f"üìÑ **–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–∞–π—Ç–æ–≤**: {result['summary']['scraped_pages']}",
                "",
                "üìã **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏**:"
            ]
            
            # –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            for i, res in enumerate(result['search_results'][:5], 1):
                response_parts.append(f"{i}. {res['title']}")
                response_parts.append(f"   üîó {res['url']}")
                if res.get('snippet'):
                    response_parts.append(f"   üìù {res['snippet'][:100]}...")
            
            # AI –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
            if result.get('analysis'):
                response_parts.extend([
                    "",
                    "üß† **–ê–ù–ê–õ–ò–ó –ò–ù–§–û–†–ú–ê–¶–ò–ò**:",
                    "‚îÄ" * 50,
                    result['analysis'],
                    "‚îÄ" * 50
                ])
            
            # –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
            if result['scraped_content']:
                response_parts.append("")
                response_parts.append("üìö **–ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç** (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏):")
                for i, content in enumerate(result['scraped_content'][:2], 1):
                    response_parts.append(f"\n{i}. **{content['title']}**")
                    response_parts.append(f"   {content['content'][:300]}...")
            
            return "\n".join(response_parts)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ search_and_analyze_web: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    async def _automate_browser(
        self,
        action: str,
        query: Optional[str] = None,
        url: Optional[str] = None
    ) -> str:
        """
        ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ Selenium.
        
        Args:
            action: –î–µ–π—Å—Ç–≤–∏–µ (search_google, screenshot, visit_url)
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è search_google
            url: URL –¥–ª—è visit_url
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
        """
        logger.info(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {action}")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.selenium_agent.driver:
                await self.selenium_agent.initialize()
            
            if action == "search_google":
                if not query:
                    return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
                result = await self.selenium_agent.search_google(query)
                
                if not result['success']:
                    return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {result.get('error')}"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response = [
                    f"‚úÖ –ü–æ–∏—Å–∫ –≤ Google –≤—ã–ø–æ–ª–Ω–µ–Ω: {query}",
                    f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result['count']}",
                    "",
                    "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
                ]
                
                for i, res in enumerate(result['results'][:5], 1):
                    response.append(f"{i}. {res['title']}")
                    response.append(f"   üîó {res['url']}")
                
                return "\n".join(response)
            
            elif action == "screenshot":
                filepath = await self.selenium_agent.take_screenshot()
                if filepath:
                    return f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filepath}"
                else:
                    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"
            
            elif action == "visit_url":
                if not url:
                    return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω URL"
                
                content = await self.selenium_agent.visit_and_read(url)
                if content:
                    return f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {url}\n\nüìÑ –ö–æ–Ω—Ç–µ–Ω—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):\n{content[:500]}..."
                else:
                    return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {url}"
            
            else:
                return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ automate_browser: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º - —Å–∞–º —Å—Ç–∞–≤–∏—Ç —Å–µ–±–µ –∑–∞–¥–∞—á–∏
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    async def run_autonomous(self):
        """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º - MIRAI —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
        logger.info("MIRAI –±—É–¥–µ—Ç —Å–∞–º –≤—ã–±–∏—Ä–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è")
        
        self.is_running = True
        
        while self.is_running:
            try:
                # –°–ø—Ä–æ—Å–∏—Ç—å —É —Å–µ–±—è - —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?
                next_task = self._decide_next_task()
                
                if next_task:
                    logger.info(f"üìã MIRAI —Ä–µ—à–∏–ª: {next_task}")
                    result = self.execute_task(next_task)
                    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ–π
                await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞
            
            except KeyboardInterrupt:
                logger.info("‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                self.is_running = False
                break
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}", exc_info=True)
                await asyncio.sleep(60)
    
    def _decide_next_task(self) -> Optional[str]:
        """–†–µ—à–∏—Ç—å –∫–∞–∫—É—é –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–π"""
        
        # –°–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state = {
            "completed_tasks": len(self.completed_tasks),
            "uptime": time.time() - self.start_time,
            "available_tools": len(self.tools)
        }
        
        # –°–ø—Ä–æ—Å–∏—Ç—å GPT-4o —á—Ç–æ –¥–µ–ª–∞—Ç—å
        prompt = f"""–¢—ã MIRAI - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç. –†–µ—à–∏ –∫–∞–∫—É—é –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–π.

–¢–í–û–Å –°–û–°–¢–û–Ø–ù–ò–ï:
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {state['completed_tasks']}
- –†–∞–±–æ—Ç–∞—é: {state['uptime']:.0f} —Å–µ–∫—É–Ω–¥
- –î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {state['available_tools']}

–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º
- –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ò–Ω—Ç–µ—Ä–Ω–µ—Ç
- –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
- –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ

–ü—Ä–µ–¥–ª–æ–∂–∏ –û–î–ù–£ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –∫–æ—Ç–æ—Ä—É—é —Å—Ç–æ–∏—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:
1. –ü–æ–ª–µ–∑–Ω–æ–π –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
2. –í—ã–ø–æ–ª–Ω–∏–º–æ–π —Å —Ç–µ–∫—É—â–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
3. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞—á–∏, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": prompt}],
                temperature=0.8,
                max_tokens=200
            )
            
            task = response.choices[0].message.content.strip()
            return task if task else None
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏: {e}")
            return None
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
        return {
            "running": self.is_running,
            "current_task": self.current_task,
            "completed_tasks": len(self.completed_tasks),
            "uptime": time.time() - self.start_time,
            "capabilities": {
                "desktop": self.desktop_available,
                "code_execution": self.code_execution_available,
                "browser": self.browser_available,
                "database": self.database_available,
                "github": self.github_available,
                "web_search": self.web_search_available,
                "memory": self.memory_available,
                "evolution": self.evolution_available
            }
        }
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MIRAI...")
        self.is_running = False


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë                    MIRAI - –ï–¥–∏–Ω—ã–π –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ê–≥–µ–Ω—Ç                  ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print()
    
    try:
        # –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
        mirai = UnifiedMiraiAgent()
        
        print("\n" + "=" * 70)
        print("üìã –ú–ï–ù–Æ")
        print("=" * 70)
        print("1. –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
        print("2. –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º (MIRAI —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞—á–∏)")
        print("3. –°—Ç–∞—Ç—É—Å")
        print("4. –í—ã—Ö–æ–¥")
        print()
        
        while True:
            choice = input("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
            
            if choice == "1":
                # –†—É—á–Ω–∞—è –∑–∞–¥–∞—á–∞
                print("\n" + "-" * 70)
                task = input("üéØ –ó–∞–¥–∞—á–∞ –¥–ª—è MIRAI: ").strip()
                
                if task:
                    print("\nü§î MIRAI –¥—É–º–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç...")
                    print("-" * 70)
                    
                    result = mirai.execute_task(task)
                    
                    print("\n" + "=" * 70)
                    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
                    print("=" * 70)
                    print(result)
                    print("=" * 70)
            
            elif choice == "2":
                # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º
                print("\nü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
                print("MIRAI –±—É–¥–µ—Ç —Å–∞–º –≤—ã–±–∏—Ä–∞—Ç—å –∑–∞–¥–∞—á–∏. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                print("-" * 70)
                
                try:
                    asyncio.run(mirai.run_autonomous())
                except KeyboardInterrupt:
                    print("\n‚ö†Ô∏è –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            elif choice == "3":
                # –°—Ç–∞—Ç—É—Å
                status = mirai.get_status()
                print("\n" + "=" * 70)
                print("üìä –°–¢–ê–¢–£–° MIRAI")
                print("=" * 70)
                print(f"–†–∞–±–æ—Ç–∞–µ—Ç: {status['running']}")
                print(f"–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: {status['current_task']}")
                print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {status['completed_tasks']}")
                print(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status['uptime']:.0f} —Å–µ–∫—É–Ω–¥")
                print(f"\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
                for cap, available in status['capabilities'].items():
                    emoji = "‚úÖ" if available else "‚ùå"
                    print(f"  {emoji} {cap}")
                print("=" * 70)
            
            elif choice == "4":
                # –í—ã—Ö–æ–¥
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                mirai.stop()
                break
            
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error("Critical error", exc_info=True)
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
