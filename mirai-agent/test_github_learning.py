#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç NASA Learning —Å GitHub Integration

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω–∞ GitHub
- –ß—Ç–µ–Ω–∏–µ README –∏–∑ —Ç–æ–ø–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
"""

import os
import sys

sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))

from core.autonomous_agent import AutonomousAgent
from core.nasa_level.orchestrator import NASALearningOrchestrator


def test_github_integration_learning():
    """–¢–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è —Å GitHub –ø—Ä–∏–º–µ—Ä–∞–º–∏"""

    print("=" * 80)
    print("üöÄ TESTING: NASA Learning + GitHub Integration")
    print("=" * 80)

    # –°–æ–∑–¥–∞—ë–º orchestrator (–æ–Ω —Å–∞–º —Å–æ–∑–¥–∞—Å—Ç –∞–≥–µ–Ω—Ç–∞ –≤–Ω—É—Ç—Ä–∏)
    orchestrator = NASALearningOrchestrator()

    # –¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è
    technology = "fastapi"

    print(f"\nüìö Learning technology: {technology}")
    print(f"   Expected: Search GitHub repos, read README, integrate examples\n")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    result = orchestrator.learn_technology(technology=technology, depth="basic")

    print("\n" + "=" * 80)
    print("üìä RESULTS")
    print("=" * 80)

    print(f"\n‚úÖ Success: {result.success}")
    print(f"üìà Proficiency: {result.proficiency:.2%}")
    print(f"‚≠ê Quality Grade: {result.quality_grade}")
    print(f"üß™ Tests: {result.tests_passed}/{result.tests_total} passed")
    print(f"‚è±Ô∏è  Time: {result.execution_time:.2f}s")

    if result.errors:
        print(f"\n‚ùå Errors:")
        for error in result.errors:
            print(f"   - {error}")

    if result.suggestions:
        print(f"\nüí° Suggestions:")
        for suggestion in result.suggestions:
            print(f"   - {suggestion}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub integration
    print("\n" + "=" * 80)
    print("üîç GITHUB INTEGRATION CHECK")
    print("=" * 80)

    research_artifact = None
    for artifact in result.artifacts:
        if artifact.phase.value == "research":
            research_artifact = artifact
            break

    if research_artifact:
        metadata = research_artifact.metadata
        print(f"\nüì¶ Research Artifact Metadata:")
        print(f"   - Content length: {metadata.get('length', 0)} chars")
        print(
            f"   - GitHub search attempted: {metadata.get('github_search_attempted', False)}"
        )
        print(f"   - Has GitHub examples: {metadata.get('has_github_examples', False)}")
        print(f"   - Quality score: {research_artifact.quality_score:.2f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GitHub –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        content_lower = research_artifact.content.lower()
        has_github_mention = "github" in content_lower
        has_readme = "readme" in content_lower
        has_repository = "repository" in content_lower or "repo" in content_lower

        print(f"\nüìù Content Analysis:")
        print(f"   - Mentions GitHub: {has_github_mention}")
        print(f"   - Mentions README: {has_readme}")
        print(f"   - Mentions repositories: {has_repository}")

        if metadata.get("has_github_examples", False):
            print(f"\n‚ú® SUCCESS: GitHub integration is working!")
            print(f"   Research phase included real-world examples from GitHub")
        else:
            print(f"\n‚ö†Ô∏è  WARNING: GitHub integration may not be working")
            print(f"   No GitHub examples found in research phase")
    else:
        print("\n‚ùå ERROR: No research artifact found")

    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\n" + "=" * 80)
    print("üéØ FINAL ASSESSMENT")
    print("=" * 80)

    success_criteria = [
        ("Learning completed successfully", result.success),
        ("Proficiency >= 50%", result.proficiency >= 0.5),
        ("Quality grade >= D", result.quality_grade in ["A+", "A", "B", "C", "D"]),
        (
            "GitHub search attempted",
            research_artifact
            and research_artifact.metadata.get("github_search_attempted", False),
        ),
        ("At least 1 test passed", result.tests_passed > 0),
    ]

    passed = 0
    total = len(success_criteria)

    for criterion, status in success_criteria:
        symbol = "‚úÖ" if status else "‚ùå"
        print(f"{symbol} {criterion}")
        if status:
            passed += 1

    print(f"\nüèÜ Score: {passed}/{total} criteria met ({passed/total*100:.0f}%)")

    if passed == total:
        print("\nüéâ PERFECT! All criteria passed!")
        print("   NASA Learning + GitHub Integration is working correctly!")
    elif passed >= total * 0.8:
        print("\nüëç GOOD! Most criteria passed!")
        print("   Minor issues may need attention")
    elif passed >= total * 0.6:
        print("\n‚ö†Ô∏è  WARNING! Some criteria failed")
        print("   Review the errors above")
    else:
        print("\n‚ùå FAILURE! Integration not working properly")
        print("   Check GitHub authentication and code changes")

    return result


if __name__ == "__main__":
    print("\nü§ñ MIRAI NASA Learning + GitHub Integration Test")
    print("   Testing enhanced learning with real-world code examples\n")

    try:
        result = test_github_integration_learning()

        print("\n" + "=" * 80)
        print("‚úÖ Test completed!")
        print("=" * 80)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if result.success and result.proficiency >= 0.5:
            sys.exit(0)
        else:
            sys.exit(1)

    except Exception as e:
        print(f"\n‚ùå Test failed with exception: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
