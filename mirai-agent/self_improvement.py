#!/usr/bin/env python3
"""
MIRAI - –†–µ–∂–∏–º —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è
–ê–≥–µ–Ω—Ç —Å–∞–º —Ä–µ—à–∞–µ—Ç —Å–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É–ª—É—á—à–∞–µ—Ç —Å–µ–±—è
"""

import os
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

from core.autonomous_agent import AutonomousAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/tmp/mirai_self_improvement.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('MIRAI-SELF-IMPROVEMENT')


async def self_improvement_loop():
    """–¶–∏–∫–ª —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è - –∞–≥–µ–Ω—Ç —Å–∞–º —Ä–µ—à–∞–µ—Ç —Å–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã"""
    
    logger.info("=" * 80)
    logger.info("üîß MIRAI - –†–ï–ñ–ò–ú –°–ê–ú–û–£–õ–£–ß–®–ï–ù–ò–Ø –ó–ê–ü–£–©–ï–ù")
    logger.info("=" * 80)
    
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    logger.info(f"‚úÖ OpenAI Key: {api_key[:20]}...")
    
    agent = AutonomousAgent()
    logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è")
    logger.info("=" * 80)
    
    # –ó–∞–¥–∞—á–∏ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    improvement_tasks = [
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –í–ê–õ–ò–î–ê–¶–ò–Ø
        {
            "name": "–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞",
            "task": """–¢—ã MIRAI - —É–ª—É—á—à–∞–µ—à—å —Å–µ–±—è.

–ü–†–û–ë–õ–ï–ú–ê: –ë—ã–ª–∞ –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞.

–ó–ê–î–ê–ß–ê:
1. –°–æ–∑–¥–∞–π –º–æ–¥—É–ª—å validation.py –≤ core/
2. –î–æ–±–∞–≤—å —Ñ—É–Ω–∫—Ü–∏—é validate_python_code(code) 
3. –ò—Å–ø–æ–ª—å–∑—É–π ast.parse() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
4. –í–µ—Ä–Ω–∏ True/False –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö

–°–æ–∑–¥–∞–π –†–ï–ê–õ–¨–ù–´–ô —Ä–∞–±–æ—á–∏–π –∫–æ–¥!"""
        },
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
        {
            "name": "–£–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            "task": """–¢—ã MIRAI - —É–ª—É—á—à–∞–µ—à—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.

–ü–†–û–ë–õ–ï–ú–ê: –õ–æ–≥–∏ –Ω–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–µ—Ç —Ä–æ—Ç–∞—Ü–∏–∏.

–ó–ê–î–ê–ß–ê:
1. –°–æ–∑–¥–∞–π –º–æ–¥—É–ª—å core/advanced_logger.py
2. –†–µ–∞–ª–∏–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (JSON)
3. –î–æ–±–∞–≤—å —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤ (–ø–æ —Ä–∞–∑–º–µ—Ä—É/–≤—Ä–µ–º–µ–Ω–∏)
4. –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: DEBUG, INFO, WARNING, ERROR
5. –ú–∞—Å–∫–∏—Ä–æ–≤–∫—É API –∫–ª—é—á–µ–π –≤ –ª–æ–≥–∞—Ö
6. –°–æ—Ö—Ä–∞–Ω–∏ –∫–æ–¥ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π

–°–æ–∑–¥–∞–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥!"""
        },
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ú–û–ù–ò–¢–û–†–ò–ù–ì
        {
            "name": "–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
            "task": """–¢—ã MIRAI - –¥–æ–±–∞–≤–ª—è–µ—à—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.

–ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.

–ó–ê–î–ê–ß–ê:
1. –°–æ–∑–¥–∞–π utils/monitoring.py
2. –î–æ–±–∞–≤—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫:
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ (CPU, RAM)
3. –°–æ—Ö—Ä–∞–Ω—è–π –º–µ—Ç—Ä–∏–∫–∏ –≤ JSON —Ñ–∞–π–ª
4. –°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é get_health_status()
5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –∫–æ–¥

–†–µ–∞–ª–∏–∑—É–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!"""
        },
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø
        {
            "name": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
            "task": """–¢—ã MIRAI - —Å–æ–∑–¥–∞–µ—à—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.

–ü–†–û–ë–õ–ï–ú–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π.

–ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª core/autonomous_agent.py
2. –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π README.md –¥–ª—è –Ω–µ–≥–æ
3. –û–ø–∏—à–∏ –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é
4. –î–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
5. –°–æ–∑–¥–∞–π —Ñ–∞–π–ª docs/AUTONOMOUS_AGENT.md

–°–¥–µ–ª–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é!"""
        },
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
        {
            "name": "–°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã",
            "task": """–¢—ã MIRAI - –ø–∏—à–µ—à—å —Ç–µ—Å—Ç—ã.

–ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤.

–ó–ê–î–ê–ß–ê:
1. –°–æ–∑–¥–∞–π tests/test_autonomous_agent.py
2. –ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:
   - test_execute_python()
   - test_read_file()
   - test_write_file()
   - test_create_task()
3. –ò—Å–ø–æ–ª—å–∑—É–π pytest
4. –î–æ–±–∞–≤—å –º–æ–∫–∏ –¥–ª—è OpenAI API
5. –°–æ—Ö—Ä–∞–Ω–∏ —Ç–µ—Å—Ç—ã

–°–æ–∑–¥–∞–π —Ä–∞–±–æ—á–∏–µ unit —Ç–µ—Å—Ç—ã!"""
        },
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 6: –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
        {
            "name": "–£–ª—É—á—à–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "task": """–¢—ã MIRAI - —É–∫—Ä–µ–ø–ª—è–µ—à—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.

–ü–†–û–ë–õ–ï–ú–ê: API –∫–ª—é—á–∏ –º–æ–≥—É—Ç –ø–æ–ø–∞—Å—Ç—å –≤ –ª–æ–≥–∏.

–ó–ê–î–ê–ß–ê:
1. –°–æ–∑–¥–∞–π utils/security.py
2. –†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏–∏:
   - mask_api_key(key) - –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –∫–ª—é—á–µ–π
   - encrypt_config(data) - —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤
   - validate_file_path(path) - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—É—Ç–µ–π
3. –î–æ–±–∞–≤—å –∑–∞—â–∏—Ç—É –æ—Ç directory traversal
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏–∏

–°–¥–µ–ª–∞–π —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ–π!"""
        },
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 7: –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø
        {
            "name": "–î–æ–±–∞–≤–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å",
            "task": """–¢—ã MIRAI - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—à—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.

–ü–†–û–ë–õ–ï–ú–ê: –ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API.

–ó–ê–î–ê–ß–ê:
1. –°–æ–∑–¥–∞–π core/async_agent.py
2. –ü–µ—Ä–µ–¥–µ–ª–∞–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ async/await:
   - async def execute_python_async()
   - async def search_web_async()
   - async def batch_execute() - –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
3. –ò—Å–ø–æ–ª—å–∑—É–π aiohttp –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —Å–∫–æ—Ä–æ—Å—Ç—å

–£—Å–∫–æ—Ä—å —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞!"""
        },
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 8: CI/CD
        {
            "name": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD",
            "task": """–¢—ã MIRAI - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é.

–ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç CI/CD –ø–∞–π–ø–ª–∞–π–Ω–∞.

–ó–ê–î–ê–ß–ê:
1. –°–æ–∑–¥–∞–π .github/workflows/test.yml
2. –ù–∞—Å—Ç—Ä–æ–π GitHub Actions –¥–ª—è:
   - –ó–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π push
   - –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∏–ª—è –∫–æ–¥–∞ (ruff)
   - –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ (mypy)
3. –î–æ–±–∞–≤—å badge –≤ README
4. –°–æ–∑–¥–∞–π workflow –¥–ª—è –¥–µ–ø–ª–æ—è

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π –ø—Ä–æ—Ü–µ—Å—Å—ã!"""
        }
    ]
    
    iteration = 1
    completed_improvements = []
    
    try:
        while iteration <= len(improvement_tasks):
            task_info = improvement_tasks[iteration - 1]
            
            logger.info("\n" + "=" * 80)
            logger.info(f"üîß –£–õ–£–ß–®–ï–ù–ò–ï #{iteration}: {task_info['name']}")
            logger.info("=" * 80)
            logger.info(f"\nüìã –ó–∞–¥–∞—á–∞:\n{task_info['task'][:200]}...\n")
            
            try:
                # –ê–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è
                result = agent.think(task_info['task'], max_iterations=15)
                
                logger.info(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–ª—É—á—à–µ–Ω–∏—è #{iteration}:")
                logger.info(f"{result}\n")
                
                completed_improvements.append({
                    'iteration': iteration,
                    'name': task_info['name'],
                    'status': 'completed',
                    'timestamp': datetime.now().isoformat()
                })
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–ª—É—á—à–µ–Ω–∏–∏ #{iteration}: {e}")
                completed_improvements.append({
                    'iteration': iteration,
                    'name': task_info['name'],
                    'status': 'failed',
                    'error': str(e),
                    'timestamp': datetime.now().isoformat()
                })
            
            logger.info("=" * 80)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É–ª—É—á—à–µ–Ω–∏—è–º–∏
            if iteration < len(improvement_tasks):
                logger.info(f"‚è∏Ô∏è  –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è...")
                await asyncio.sleep(30)
            
            iteration += 1
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "=" * 80)
        logger.info("üéâ –í–°–ï –£–õ–£–ß–®–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´!")
        logger.info("=" * 80)
        logger.info(f"\n–í—Å–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏–π: {len(improvement_tasks)}")
        logger.info(f"–£—Å–ø–µ—à–Ω—ã—Ö: {sum(1 for x in completed_improvements if x['status'] == 'completed')}")
        logger.info(f"–û—à–∏–±–æ–∫: {sum(1 for x in completed_improvements if x['status'] == 'failed')}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = "# –û—Ç—á–µ—Ç –æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–∏ MIRAI\n\n"
        report += f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        report += "## –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:\n\n"
        
        for imp in completed_improvements:
            status_icon = "‚úÖ" if imp['status'] == 'completed' else "‚ùå"
            report += f"{status_icon} {imp['iteration']}. {imp['name']} - {imp['status']}\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open('/root/mirai/mirai-agent/self_improvement_report.md', 'w') as f:
            f.write(report)
        
        logger.info(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: self_improvement_report.md")
        logger.info("=" * 80)
        
    except KeyboardInterrupt:
        logger.info("\n\nüõë –°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.error(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        asyncio.run(self_improvement_loop())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise


if __name__ == "__main__":
    main()
