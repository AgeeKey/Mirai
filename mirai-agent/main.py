# Дополнительные примерные комментарии
# Пример использования функции:

# Асинхронное выполнение чисел:
# result = await execute_async_task(1, 2)

# Асинхронное выполнение с текстовыми данными:
# result = await execute_async_task('text1', 'text2')

# Общие рекомендации:
# 1. Всегда проверяйте типы переданных параметров.
# 2. Используйте конструкцию try-except для обработки ошибок.
# 3. Пишите тесты для каждой функции.
# 4. Следите за производительностью асинхронных задач.

# Добавьте документацию для функции execute_async_task:
# Функция execute_async_task принимает два аргумента: arg1 и arg2,
# и выполняет асинхронную задачу. Возвращает результат операции.

# Подробная документация для execute_async_task:
# 
# Параметры:
# - arg1: Первый аргумент, может быть числом или строкой.
# - arg2: Второй аргумент, может быть числом или строкой.
# 
# Примечание:
# Цель этой функции - выполнить асинхронную задачу в зависимости от типов входных данных.
# В случае, если оба аргумента являются числами, задача будет
# обрабатывать их как математическую операцию. Для строк задача
# выполнит конкатенацию.