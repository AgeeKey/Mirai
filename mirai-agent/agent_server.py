#!/usr/bin/env python3
"""
MIRAI Agent Server
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º
"""

from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
import asyncio
from dotenv import load_dotenv
import sys
import os

sys.path.append(os.path.dirname(__file__))
from core.autonomous_agent import AutonomousAgent

load_dotenv()

app = FastAPI(title="MIRAI Autonomous Agent", version="2.0.0")

# CORS –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç
agent = AutonomousAgent()
current_task = None


class TaskRequest(BaseModel):
    prompt: str
    max_iterations: int = 5


@app.get("/", response_class=HTMLResponse)
async def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∞–≥–µ–Ω—Ç–∞"""
    return """
<!DOCTYPE html>
<html>
<head>
    <title>MIRAI - Autonomous Agent</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 50%, #7e22ce 100%);
            min-height: 100vh;
            padding: 20px;
            color: #fff;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
        }
        
        .header h1 {
            font-size: 3.5em;
            margin-bottom: 10px;
            text-shadow: 3px 3px 6px rgba(0,0,0,0.3);
            background: linear-gradient(45deg, #fff, #a78bfa);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .header .subtitle {
            font-size: 1.2em;
            opacity: 0.9;
        }
        
        .status-badge {
            display: inline-block;
            padding: 8px 20px;
            background: #10b981;
            border-radius: 20px;
            font-weight: bold;
            margin-top: 15px;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        
        .grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .card h2 {
            font-size: 1.8em;
            margin-bottom: 20px;
            color: #a78bfa;
        }
        
        .capabilities {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }
        
        .capability {
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            border-left: 4px solid #10b981;
        }
        
        .capability-icon {
            font-size: 1.5em;
            margin-bottom: 5px;
        }
        
        .task-input {
            width: 100%;
            min-height: 150px;
            padding: 15px;
            border-radius: 10px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            background: rgba(255, 255, 255, 0.1);
            color: #fff;
            font-size: 16px;
            resize: vertical;
        }
        
        .task-input::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }
        
        .button {
            padding: 15px 40px;
            font-size: 18px;
            background: linear-gradient(45deg, #10b981, #059669);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: bold;
            transition: transform 0.2s;
            margin-top: 15px;
        }
        
        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(16, 185, 129, 0.4);
        }
        
        .button:disabled {
            background: #666;
            cursor: not-allowed;
            transform: none;
        }
        
        .output {
            background: #1a1a2e;
            padding: 20px;
            border-radius: 10px;
            min-height: 300px;
            max-height: 500px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        
        .output.working {
            border: 2px solid #10b981;
            animation: borderPulse 1s infinite;
        }
        
        @keyframes borderPulse {
            0%, 100% { border-color: #10b981; }
            50% { border-color: #059669; }
        }
        
        .examples {
            display: grid;
            gap: 10px;
        }
        
        .example {
            padding: 10px 15px;
            background: rgba(167, 139, 250, 0.2);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
            border: 1px solid rgba(167, 139, 250, 0.3);
        }
        
        .example:hover {
            background: rgba(167, 139, 250, 0.3);
            transform: translateX(5px);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ MIRAI</h1>
            <div class="subtitle">Autonomous AI Agent</div>
            <div class="status-badge">üü¢ ONLINE & READY</div>
        </div>
        
        <div class="grid">
            <div class="card">
                <h2>‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞</h2>
                <div class="capabilities">
                    <div class="capability">
                        <div class="capability-icon">üêç</div>
                        <strong>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞</strong>
                        <div>Python, –∫–æ–º–∞–Ω–¥—ã shell</div>
                    </div>
                    <div class="capability">
                        <div class="capability-icon">üåê</div>
                        <strong>–ü–æ–∏—Å–∫ –≤ —Å–µ—Ç–∏</strong>
                        <div>–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
                    </div>
                    <div class="capability">
                        <div class="capability-icon">üìÅ</div>
                        <strong>–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏</strong>
                        <div>–ß—Ç–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ</div>
                    </div>
                    <div class="capability">
                        <div class="capability-icon">üîß</div>
                        <strong>–°–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è</strong>
                        <div>–£–ª—É—á—à–µ–Ω–∏–µ —Å–µ–±—è</div>
                    </div>
                    <div class="capability">
                        <div class="capability-icon">üéØ</div>
                        <strong>–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å</strong>
                        <div>–°–∞–º —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏</div>
                    </div>
                    <div class="capability">
                        <div class="capability-icon">üß†</div>
                        <strong>GPT-4 –º–æ–∑–≥</strong>
                        <div>–£–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</div>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h2>üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á</h2>
                <div class="examples">
                    <div class="example" onclick="setExample('–°–æ–∑–¥–∞–π –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –±–∏—Ç–∫–æ–∏–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª')">
                        üí∞ –°–∫—Ä–∞–ø–µ—Ä –∫—É—Ä—Å–∞ Bitcoin
                    </div>
                    <div class="example" onclick="setExample('–ù–∞–π–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ AI –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –≤ markdown')">
                        üì∞ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ AI
                    </div>
                    <div class="example" onclick="setExample('–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–æ–∫')">
                        üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–æ–≥–æ–≤
                    </div>
                    <div class="example" onclick="setExample('–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é –∏–≥—Ä—É –Ω–∞ Python —Å GUI')">
                        üéÆ –ü—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞
                    </div>
                    <div class="example" onclick="setExample('–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è')">
                        üèóÔ∏è –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card">
            <h2>üí¨ –î–∞–π –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É</h2>
            <textarea id="taskInput" class="task-input" placeholder="–û–ø–∏—à–∏ —á—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –∞–≥–µ–Ω—Ç...

–ù–∞–ø—Ä–∏–º–µ—Ä:
- –°–æ–∑–¥–∞–π REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
- –ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –≤ ML
- –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
- –£–ª—É—á—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –≤ –ø—Ä–æ–µ–∫—Ç–µ"></textarea>
            <button class="button" id="startBtn" onclick="startTask()">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞</button>
        </div>
        
        <div class="card">
            <h2>üìä –í—ã–≤–æ–¥ –∞–≥–µ–Ω—Ç–∞</h2>
            <div id="output" class="output">–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...</div>
        </div>
    </div>
    
    <script>
        function setExample(text) {
            document.getElementById('taskInput').value = text;
        }
        
        async function startTask() {
            const taskInput = document.getElementById('taskInput');
            const output = document.getElementById('output');
            const startBtn = document.getElementById('startBtn');
            
            const prompt = taskInput.value.trim();
            
            if (!prompt) {
                alert('–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∞–≥–µ–Ω—Ç–∞!');
                return;
            }
            
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            startBtn.disabled = true;
            startBtn.textContent = '‚è≥ –ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç...';
            
            // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
            output.classList.add('working');
            output.textContent = 'ü§ñ –ê–≥–µ–Ω—Ç –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...\\n\\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\\n';
            
            try {
                const response = await fetch('/api/execute', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        prompt: prompt,
                        max_iterations: 10
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    output.textContent = '‚úÖ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê\\n\\n' + data.result;
                } else {
                    output.textContent = '‚ùå –û–®–ò–ë–ö–ê\\n\\n' + data.error;
                }
                
            } catch (error) {
                output.textContent = '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message;
            } finally {
                output.classList.remove('working');
                startBtn.disabled = false;
                startBtn.textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞';
            }
        }
        
        // Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        document.getElementById('taskInput').addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.key === 'Enter') {
                startTask();
            }
        });
    </script>
</body>
</html>
    """


@app.post("/api/execute")
async def execute_task(task: TaskRequest):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç–æ–º"""
    try:
        print(f"\nüéØ –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task.prompt[:100]}...")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
        result = agent.think(task.prompt, max_iterations=task.max_iterations)

        return JSONResponse({"success": True, "result": result, "tasks": agent.tasks})

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return JSONResponse({"success": False, "error": str(e)}, status_code=500)


@app.get("/api/status")
async def get_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
    return {
        "status": "online",
        "model": agent.model,
        "tasks_completed": len(agent.tasks),
        "memory_size": len(agent.memory),
    }


@app.get("/api/tasks")
async def get_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    return {"tasks": agent.tasks}


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "healthy", "agent": "online"}


if __name__ == "__main__":
    print("=" * 60)
    print("üöÄ MIRAI Autonomous Agent Server")
    print("=" * 60)
    print(f"üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000")
    print(f"üìö API Docs: http://localhost:8000/docs")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {agent.model}")
    print("=" * 60)

    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
