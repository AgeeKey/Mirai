#!/usr/bin/env python3
"""
MIRAI - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º 24/7
–ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ —Ñ–æ–Ω–µ, —É–ª—É—á—à–∞–µ—Ç —Å–µ–±—è, –ø–∏—à–µ—Ç –∫–æ–¥, –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
"""

import os
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

from core.autonomous_agent import AutonomousAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("/tmp/mirai_autonomous.log"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger("MIRAI")


async def autonomous_loop():
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""

    logger.info("=" * 80)
    logger.info("ü§ñ MIRAI - –ê–í–¢–û–ù–û–ú–ù–´–ô –†–ï–ñ–ò–ú 24/7 –ó–ê–ü–£–©–ï–ù")
    logger.info("=" * 80)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    logger.info(f"‚úÖ OpenAI Key: {api_key[:20]}...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    agent = AutonomousAgent()
    logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    logger.info(f"üìä –ú–æ–¥–µ–ª—å: {agent.model}")
    logger.info(f"üõ†Ô∏è  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(agent.tools)}")
    logger.info("=" * 80)

    # –°—á–µ—Ç—á–∏–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π
    iteration = 1

    # –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    autonomous_tasks = [
        """–¢—ã MIRAI - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π AI –∞–≥–µ–Ω—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π 24/7.
        
–¢–≤–æ—è —Ç–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ /root/mirai/mirai-agent
2. –ù–∞–π–¥–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
3. –°–æ–∑–¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–¥ –∏–ª–∏ —É—Ç–∏–ª–∏—Ç—É
4. –°–æ—Ö—Ä–∞–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª

–ë—É–¥—å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º! –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.""",
        """–¢—ã –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç MIRAI.

–ó–∞–¥–∞—á–∞:
1. –ù–∞–π–¥–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö AI –∞–≥–µ–Ω—Ç–æ–≤
2. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
3. –°–æ—Ö—Ä–∞–Ω–∏ –≤ —Ñ–∞–π–ª research/ai_agents_best_practices.md

–ò—Å–ø–æ–ª—å–∑—É–π search_web –∏ write_file.""",
        """–¢—ã MIRAI - —Å–∞–º–æ—É–ª—É—á—à–∞—é—â–∏–π—Å—è –∞–≥–µ–Ω—Ç.

–ó–∞–¥–∞—á–∞:
1. –ù–∞–ø–∏—à–∏ —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã (CPU, RAM, –¥–∏—Å–∫)
2. –°–æ—Ö—Ä–∞–Ω–∏ –∫–∞–∫ utils/system_monitor.py
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

–ò—Å–ø–æ–ª—å–∑—É–π write_file –∏ execute_python.""",
        """–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è MIRAI:

1. –°–æ–∑–¥–∞–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
2. –°–æ—Ö—Ä–∞–Ω–∏ –∫–∞–∫ utils/auto_backup.py
3. –î–æ–±–∞–≤—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

–ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º!""",
        """MIRAI, —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ.

–ó–∞–¥–∞—á–∞:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–æ–≥–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
2. –ù–∞–π–¥–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —É–ª—É—á—à–µ–Ω–∏—è
3. –°–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç performance_analysis.md

–ò—Å–ø–æ–ª—å–∑—É–π read_file –∏ write_file.""",
    ]

    try:
        while True:
            logger.info("\n" + "=" * 80)
            logger.info(
                f"üîÑ –ò–¢–ï–†–ê–¶–ò–Ø #{iteration} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            logger.info("=" * 80)

            # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É —Ü–∏–∫–ª–∏—á–Ω–æ
            task = autonomous_tasks[(iteration - 1) % len(autonomous_tasks)]

            logger.info(f"\nüéØ –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞:")
            logger.info(f"{task[:200]}...\n")

            try:
                # –ê–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É
                result = agent.think(task, max_iterations=10)

                logger.info(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏ #{iteration}:")
                logger.info(f"{result}\n")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                if agent.tasks:
                    logger.info(f"üìã –ó–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–∞: {len(agent.tasks)}")
                    for task_item in agent.tasks[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–¥–∞—á–∏
                        logger.info(f"  ‚Ä¢ {task_item['name']}: {task_item['status']}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ #{iteration}: {e}")

            logger.info("=" * 80)
            logger.info(f"‚è∏Ô∏è  –ü–∞—É–∑–∞ 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏...")
            logger.info("=" * 80)

            iteration += 1

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ (60 —Å–µ–∫—É–Ω–¥)
            await asyncio.sleep(60)

    except KeyboardInterrupt:
        logger.info("\n\nüõë –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.error(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        asyncio.run(autonomous_loop())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise


if __name__ == "__main__":
    main()
