#!/usr/bin/env python3
"""
üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê MIRAI
===========================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –í–°–ï —Å–∏—Å—Ç–µ–º—ã –∏ –≤—ã–¥–∞—ë—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ
"""

import os
import sys
import json
import sqlite3
from pathlib import Path
from datetime import datetime, timedelta
import subprocess

print("üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê MIRAI")
print("=" * 70)
print()

# === 1. –°–¢–ê–¢–£–° –°–õ–£–ñ–ë–´ ===
print("1Ô∏è‚É£ –°–¢–ê–¢–£–° –°–õ–£–ñ–ë–´ MIRAI:")
result = subprocess.run(['systemctl', 'is-active', 'mirai'], capture_output=True, text=True)
status = result.stdout.strip()
if status == 'active':
    print(f"   ‚úÖ –°–ª—É–∂–±–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {status}")
else:
    print(f"   ‚ùå –°–ª—É–∂–±–∞ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç: {status}")

# Uptime
result = subprocess.run(['systemctl', 'show', 'mirai', '--property=ActiveEnterTimestamp'], capture_output=True, text=True)
if result.returncode == 0:
    timestamp = result.stdout.split('=')[1].strip()
    print(f"   ‚è∞ –†–∞–±–æ—Ç–∞–µ—Ç —Å: {timestamp}")

# Memory
result = subprocess.run(['systemctl', 'show', 'mirai', '--property=MemoryCurrent'], capture_output=True, text=True)
if result.returncode == 0:
    memory_bytes = int(result.stdout.split('=')[1].strip())
    memory_mb = memory_bytes / 1024 / 1024
    print(f"   üíæ –ü–∞–º—è—Ç—å: {memory_mb:.1f} MB")

print()

# === 2. –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
print("2Ô∏è‚É£ –ë–ê–ó–´ –î–ê–ù–ù–´–•:")

data_dir = Path("/root/mirai/mirai-agent/data")

# mirai_memory.db
db_path = data_dir / "mirai_memory.db"
if db_path.exists():
    size = db_path.stat().st_size / 1024
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM sessions")
    sessions = cursor.fetchone()[0]
    conn.close()
    print(f"   ‚úÖ mirai_memory.db: {size:.1f} KB, {sessions} —Å–µ—Å—Å–∏–π")
else:
    print(f"   ‚ùå mirai_memory.db: –ù–ï –ù–ê–ô–î–ï–ù–ê")

# long_term_memory.db
db_path = data_dir / "long_term_memory.db"
if db_path.exists():
    size = db_path.stat().st_size / 1024
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        cursor.execute("SELECT COUNT(*) FROM goals WHERE status = 'active'")
        goals = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM achievements")
        achievements = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM decisions")
        decisions = cursor.fetchone()[0]
        print(f"   ‚úÖ long_term_memory.db: {size:.1f} KB")
        print(f"      ‚Ä¢ –¶–µ–ª–µ–π: {goals}")
        print(f"      ‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {achievements}")
        print(f"      ‚Ä¢ –†–µ—à–µ–Ω–∏–π: {decisions}")
    except sqlite3.OperationalError as e:
        print(f"   ‚ö†Ô∏è long_term_memory.db: {size:.1f} KB (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å—Ç–∞—Ä–µ–ª–∞)")
        print(f"      –û—à–∏–±–∫–∞: {e}")
    
    conn.close()
else:
    print(f"   ‚ùå long_term_memory.db: –ù–ï –ù–ê–ô–î–ï–ù–ê")

# personality.db
db_path = data_dir / "personality.db"
if db_path.exists():
    size = db_path.stat().st_size / 1024
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute("SELECT overall_level, total_xp FROM overall_progress WHERE id = 1")
    row = cursor.fetchone()
    if row:
        level, xp = row
        print(f"   ‚úÖ personality.db: {size:.1f} KB")
        print(f"      ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å MIRAI: {level}")
        print(f"      ‚Ä¢ –û–±—â–∏–π XP: {xp:.0f}")
        
        cursor.execute("SELECT COUNT(*) FROM skills")
        skills = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM titles")
        titles = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM traits")
        traits = cursor.fetchone()[0]
        
        print(f"      ‚Ä¢ –ù–∞–≤—ã–∫–æ–≤: {skills}")
        print(f"      ‚Ä¢ –¢–∏—Ç—É–ª–æ–≤: {titles}")
        print(f"      ‚Ä¢ –ß–µ—Ä—Ç: {traits}")
    
    conn.close()
else:
    print(f"   ‚ùå personality.db: –ù–ï –ù–ê–ô–î–ï–ù–ê")

print()

# === 3. –õ–û–ì–ò –ò –û–®–ò–ë–ö–ò ===
print("3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞):")

# –ü–æ–¥—Å—á—ë—Ç –æ—à–∏–±–æ–∫
result = subprocess.run(
    ['journalctl', '-u', 'mirai', '--since', '24 hours ago', '--no-pager'],
    capture_output=True, text=True
)
logs = result.stdout

error_count = logs.count('[ERROR]')
warning_count = logs.count('[WARNING]')
info_count = logs.count('[INFO]')

print(f"   üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(logs.splitlines())}")
print(f"   ‚ùå –û—à–∏–±–æ–∫ (ERROR): {error_count}")
print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (WARNING): {warning_count}")
print(f"   ‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (INFO): {info_count}")

# –ò—â–µ–º —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏
print("\n   üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:")
errors = []
for line in logs.splitlines():
    if '[ERROR]' in line or 'Traceback' in line or 'Exception' in line:
        errors.append(line)

if errors:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    unique_errors = {}
    for error in errors:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—Ç—å –æ—à–∏–±–∫–∏
        if 'ERROR]' in error:
            msg = error.split('[ERROR]')[1].strip()[:80]
            unique_errors[msg] = unique_errors.get(msg, 0) + 1
    
    for msg, count in sorted(unique_errors.items(), key=lambda x: x[1], reverse=True)[:5]:
        print(f"      [{count}x] {msg}")
else:
    print(f"      ‚úÖ –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫!")

print()

# === 4. –ü–†–û–í–ï–†–ö–ê –ú–û–î–£–õ–ï–ô ===
print("4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ú–û–î–£–õ–ï–ô:")

modules = [
    ('core.long_term_memory', 'LongTermMemory'),
    ('core.self_awareness', 'SelfAwareness'),
    ('core.auto_planner', 'AutoPlanner'),
    ('core.self_modification', 'SelfModification'),
    ('core.personality_system', 'PersonalitySystem'),
    ('core.github_integration', 'GitHubIntegration'),
]

sys.path.insert(0, '/root/mirai/mirai-agent')

for module_name, class_name in modules:
    try:
        module = __import__(module_name, fromlist=[class_name])
        cls = getattr(module, class_name)
        print(f"   ‚úÖ {class_name}: –∏–º–ø–æ—Ä—Ç OK")
    except Exception as e:
        print(f"   ‚ùå {class_name}: –û–®–ò–ë–ö–ê - {e}")

print()

# === 5. –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–û–î–û–í ===
print("5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ú–ï–¢–û–î–û–í:")

try:
    from core.personality_system import PersonalitySystem
    personality = PersonalitySystem()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º auto_develop_personality
    print("   üß™ –¢–µ—Å—Ç PersonalitySystem.auto_develop_personality()...")
    try:
        from core.long_term_memory import LongTermMemory
        ltm = LongTermMemory()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞
        if hasattr(ltm, 'get_recent_achievements'):
            print("      ‚úÖ LongTermMemory.get_recent_achievements() —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("      ‚ùå LongTermMemory.get_recent_achievements() –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢!")
            print("         –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω!")
            
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        
except Exception as e:
    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PersonalitySystem: {e}")

print()

# === 6. –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ===
print("6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í autonomous_service.py:")

service_path = Path("/root/mirai/mirai-agent/autonomous_service.py")
if service_path.exists():
    content = service_path.read_text()
    
    checks = [
        ("Long-Term Memory", "from core.long_term_memory import LongTermMemory"),
        ("Self-Awareness", "from core.self_awareness import SelfAwareness"),
        ("Auto-Planner", "from core.auto_planner import AutoPlanner"),
        ("Self-Modification", "from core.self_modification import SelfModification"),
        ("Personality System", "from core.personality_system import PersonalitySystem"),
    ]
    
    for name, import_line in checks:
        if import_line in content:
            print(f"   ‚úÖ {name}: –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print(f"   ‚ùå {name}: –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
    print("\n   üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–æ–≤:")
    if "self.personality.auto_develop_personality()" in content:
        print("      ‚úÖ auto_develop_personality() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
    else:
        print("      ‚ö†Ô∏è auto_develop_personality() –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
    
    if "self.ltm.record_achievement" in content:
        print("      ‚úÖ record_achievement() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
    else:
        print("      ‚ö†Ô∏è record_achievement() –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
        
else:
    print("   ‚ùå autonomous_service.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")

print()

# === 7. –†–ï–ê–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ ===
print("7Ô∏è‚É£ –†–ï–ê–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ MIRAI:")

metrics_path = Path("/root/mirai/metrics/latest.json")
if metrics_path.exists():
    with open(metrics_path) as f:
        metrics = json.load(f)
    
    print(f"   üìä –¶–∏–∫–ª–æ–≤ –∑–∞ —á–∞—Å: {metrics.get('cycles_last_hour', 0)}")
    print(f"   üìù –°—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –∑–∞ —á–∞—Å: {metrics.get('log_lines_last_hour', 0)}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫ –∑–∞ —á–∞—Å: {metrics.get('errors_last_hour', 0)}")
    print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∑–∞ —á–∞—Å: {metrics.get('warnings_last_hour', 0)}")
else:
    print("   ‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

print()

# === 8. –í–´–í–û–î ===
print("=" * 70)
print("üéØ –ò–¢–û–ì–û–í–´–ô –í–´–í–û–î:")
print()

issues = []

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
if error_count > 0:
    issues.append(f"‚ùå –ö–†–ò–¢–ò–ß–ù–û: {error_count} –æ—à–∏–±–æ–∫ –∑–∞ 24 —á–∞—Å–∞")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º LongTermMemory
try:
    from core.long_term_memory import LongTermMemory
    ltm = LongTermMemory()
    if not hasattr(ltm, 'get_recent_achievements'):
        issues.append("‚ùå –ö–†–ò–¢–ò–ß–ù–û: LongTermMemory.get_recent_achievements() –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
except:
    issues.append("‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å LongTermMemory")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Personality
if db_path.exists():
    conn = sqlite3.connect(data_dir / "personality.db")
    cursor = conn.cursor()
    cursor.execute("SELECT total_xp FROM overall_progress WHERE id = 1")
    xp = cursor.fetchone()[0]
    conn.close()
    
    if xp < 100:
        issues.append(f"‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: Personality System –ø–æ—á—Ç–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (XP: {xp:.0f})")

if issues:
    print("üî¥ –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
    for issue in issues:
        print(f"   {issue}")
    print()
    print("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –≤ LongTermMemory")
    print("   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ auto_develop_personality() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
    print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
    print("   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
else:
    print("‚úÖ –í–°–Å –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!")
    print("   MIRAI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–∞–∫ –∑–∞–¥—É–º–∞–Ω–æ")

print()
print("=" * 70)
