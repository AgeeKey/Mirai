#!/usr/bin/env python3
"""
üå∏ –ú–ò–†–ê–ô - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π AI –∞–≥–µ–Ω—Ç
–°–∞–º–∞ —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á–∏, —Å–∞–º–∞ —Ä–µ—à–∞–µ—Ç, –ø–∏—à–µ—Ç —Ö–æ–∑—è–∏–Ω—É –≤ Telegram –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å
"""
import json
import logging
import time
import asyncio
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

import requests
from core.autonomous_agent import AutonomousAgent
from core.cicd_monitor import CICDMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("/tmp/mirai_autonomous.log"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)


class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å —Ö–æ–∑—è–∏–Ω–æ–º"""

    def __init__(self, token: str, admin_chat_id: str):
        self.token = token
        self.admin_chat_id = admin_chat_id
        self.base_url = f"https://api.telegram.org/bot{token}"
        self.last_update_id = 0

    def send_message(self, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ö–æ–∑—è–∏–Ω—É"""
        try:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Telegram: {text[:100]}...")
            url = f"{self.base_url}/sendMessage"
            data = {"chat_id": self.admin_chat_id, "text": text, "parse_mode": "HTML"}
            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200:
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
                return True
            else:
                logger.error(f"‚ùå Telegram API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}: {response.text}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}", exc_info=True)
            return False

    def get_updates(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ö–æ–∑—è–∏–Ω–∞"""
        try:
            url = f"{self.base_url}/getUpdates"
            params = {"offset": self.last_update_id + 1, "timeout": 30}

            logger.info(
                f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram (offset={self.last_update_id + 1})..."
            )
            response = requests.get(url, params=params, timeout=35)

            if response.status_code == 200:
                data = response.json()
                logger.info(
                    f"üì¶ Telegram –æ—Ç–≤–µ—Ç: ok={data.get('ok')}, updates={len(data.get('result', []))}"
                )

                if data["ok"] and data["result"]:
                    messages = []
                    for update in data["result"]:
                        self.last_update_id = update["update_id"]
                        logger.info(f"  Update ID: {update['update_id']}")

                        if "message" in update and "text" in update["message"]:
                            chat_id = str(update["message"]["chat"]["id"])
                            from_user = update["message"].get("from", {})
                            is_bot = from_user.get("is_bot", False)
                            text = update["message"]["text"]
                            
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ú–ò–†–ê–ô (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —ç–º–æ–¥–∑–∏ –±–æ—Ç–∞)
                            bot_prefixes = ["üå∏", "‚úÖ", "‚ö†Ô∏è", "üôã‚Äç‚ôÄÔ∏è", "ü§î"]
                            is_from_mirai = any(text.startswith(prefix) for prefix in bot_prefixes)
                            
                            logger.info(
                                f"  Chat ID: {chat_id}, Admin: {self.admin_chat_id}, is_bot: {is_bot}, from_mirai: {is_from_mirai}"
                            )

                            # –¢–æ–ª—å–∫–æ –æ—Ç –∞–¥–º–∏–Ω–∞ –ò –ù–ï –æ—Ç –ú–ò–†–ê–ô
                            if chat_id == self.admin_chat_id and not is_from_mirai:
                                messages.append(
                                    {
                                        "text": update["message"]["text"],
                                        "date": update["message"]["date"],
                                    }
                                )
                                logger.info(
                                    f"  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞: {update['message']['text']}"
                                )
                            elif is_from_mirai:
                                logger.info(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
                            else:
                                logger.warning(
                                    f"  ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –æ—Ç –∞–¥–º–∏–Ω–∞ (chat_id={chat_id})"
                                )
                    return messages
            else:
                logger.error(f"‚ùå Telegram API error: {response.status_code}")
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}", exc_info=True)
            return []


class MiraiAutonomous:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ú–ò–†–ê–ô"""

    def __init__(self):
        logger.info("üå∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –ú–ò–†–ê–ô...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏
        config_path = Path(__file__).parent / "configs" / "api_keys.json"
        with open(config_path) as f:
            config = json.load(f)

        # –ú–ò–†–ê–ô –º–æ–∑–≥
        self.mirai = AutonomousAgent()

        # CI/CD –º–æ–Ω–∏—Ç–æ—Ä
        self.monitor = CICDMonitor(
            github_token=config["GITHUB_TOKEN"],
            repo_owner="AgeeKey",
            repo_name="mirai-showcase",
        )

        # Telegram –±–æ—Ç
        self.telegram = TelegramBot(
            token=config["TELEGRAM_BOT_TOKEN"],
            admin_chat_id=config["TELEGRAM_CHAT_ID_ADMIN"],
        )

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.cycle_count = 0
        self.current_task = None
        self.waiting_for_human = False
        self.tasks_completed = []

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–æ–∑—è–∏–Ω—É
        self.telegram.send_message(
            "üå∏ <b>–ú–ò–†–ê–ô –∑–∞–ø—É—â–µ–Ω–∞ –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ!</b>\n\n"
            "‚ú® –Ø –±—É–¥—É:\n"
            "‚Ä¢ –°–∞–º–∞ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏ —Ä–µ—à–∞—Ç—å –∏—Ö\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å CI/CD\n"
            "‚Ä¢ –ü–∏—Å–∞—Ç—å —Ç–µ–±–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å\n"
            "‚Ä¢ –°–ª—É—à–∞—Ç—å —Ç–≤–æ–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n"
            "üìù –õ–æ–≥–∏: /tmp/mirai_autonomous.log\n"
            "üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É..."
        )

    def ask_mirai_for_task(self) -> Optional[str]:
        """–ú–ò–†–ê–ô —Å–∞–º–∞ —Ä–µ—à–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ"""
        logger.info("ü§î –ú–ò–†–ê–ô –¥—É–º–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CI/CD
        health = self.monitor.check_health()

        context = f"""
–¢—ã –ú–ò–†–ê–ô - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π AI –∞–≥–µ–Ω—Ç. –¢–≤–æ—è —Ä–∞–±–æ—Ç–∞ - —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∞—Ç—å –ø—Ä–æ–µ–∫—Ç.

üìä –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
‚Ä¢ CI/CD —Å—Ç–∞—Ç—É—Å: {health['status']}
‚Ä¢ –û—Ü–µ–Ω–∫–∞: {health['grade']}
‚Ä¢ Success Rate: {health['metrics']['success_rate']}%
‚Ä¢ –¶–∏–∫–ª: #{self.cycle_count}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {len(self.tasks_completed)}

‚úÖ –ß—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ:
{chr(10).join('  ‚Ä¢ ' + t for t in self.tasks_completed[-5:])}

üéØ –í—ã–±–µ—Ä–∏ –û–î–ù–£ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞:

–í–ê–†–ò–ê–ù–¢–´:
1. –£–ª—É—á—à–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏ (–¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ unit-—Ç–µ—Å—Ç–æ–≤)
2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (black --check –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏)
3. –î–æ–±–∞–≤–∏—Ç—å integration —Ç–µ—Å—Ç—ã
4. –£–ª—É—á—à–∏—Ç—å CI/CD (–¥–æ–±–∞–≤–∏—Ç—å cache, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å)
5. –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é (README –≤ tests/)
6. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ–∏—á—É (–ø—Ä–µ–¥–ª–æ–∂–∏ —Å–∞–º–∞)
7. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
8. –ù–£–ñ–ù–ê –ü–û–ú–û–©–¨ –ß–ï–õ–û–í–ï–ö–ê (–µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã)

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–ó–ê–î–ê–ß–ê: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]
–î–ï–ô–°–¢–í–ò–ï: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏]
–ù–£–ñ–ï–ù_–ß–ï–õ–û–í–ï–ö: [–¥–∞/–Ω–µ—Ç –∏ –ø–æ—á–µ–º—É]
"""

        response = self.mirai.think(context, max_iterations=1)
        logger.info(f"üå∏ –ú–ò–†–ê–ô —Ä–µ—à–∏–ª–∞:\n{response}")

        return response

    def execute_task(self, task_description: str) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"""
        logger.info(f"üîß –í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É: {task_description}")

        # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫ - –ø–∏—à–µ–º –≤ Telegram
        if (
            "–ù–£–ñ–ï–ù_–ß–ï–õ–û–í–ï–ö: –¥–∞" in task_description.lower()
            or "–Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å" in task_description.lower()
        ):
            self.telegram.send_message(
                f"üôã‚Äç‚ôÄÔ∏è <b>–ú–ò–†–ê–ô –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!</b>\n\n"
                f"–ó–∞–¥–∞—á–∞: {task_description}\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å."
            )
            self.waiting_for_human = True
            return False

        # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
        return True

    def check_human_messages(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ö–æ–∑—è–∏–Ω–∞"""
        logger.info("üì® –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ö–æ–∑—è–∏–Ω–∞...")
        messages = self.telegram.get_updates()

        logger.info(f"üì¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")

        for msg in messages:
            text = msg["text"]
            logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç —Ö–æ–∑—è–∏–Ω–∞: {text}")

            # –ú–ò–†–ê–ô –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            response = self.mirai.think(
                f"–•–æ–∑—è–∏–Ω –Ω–∞–ø–∏—Å–∞–ª: '{text}'. –ß—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å?", max_iterations=1
            )

            logger.info(f"üå∏ –ú–ò–†–ê–ô –ø–æ–Ω—è–ª–∞: {response}")

            # –û—Ç–≤–µ—á–∞–µ–º —Ö–æ–∑—è–∏–Ω—É
            logger.info("üì® –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç —Ö–æ–∑—è–∏–Ω—É...")
            success = self.telegram.send_message(
                f"‚úÖ <b>–ü–æ–Ω—è–ª–∞!</b>\n\n{response}\n\nüîß –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ..."
            )
            
            if success:
                logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")

            self.waiting_for_human = False
            self.current_task = response

    def autonomous_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
        self.cycle_count += 1

        logger.info("=" * 70)
        logger.info(f"üîÑ –ê–í–¢–û–ù–û–ú–ù–´–ô –¶–ò–ö–õ #{self.cycle_count}")
        logger.info(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info("=" * 70)

        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ö–æ–∑—è–∏–Ω–∞
            self.check_human_messages()

            # 2. –ï—Å–ª–∏ –∂–¥—ë–º —á–µ–ª–æ–≤–µ–∫–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if self.waiting_for_human:
                logger.info("‚è≥ –ñ–¥—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –æ—Ç —Ö–æ–∑—è–∏–Ω–∞...")
                return

            # 3. –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ - –ø—Ä–æ—Å–∏–º –ú–ò–†–ê–ô –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é
            if not self.current_task:
                self.current_task = self.ask_mirai_for_task()

            # 4. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            if self.current_task:
                success = self.execute_task(self.current_task)

                if success:
                    self.tasks_completed.append(self.current_task[:100])
                    logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ö–æ–∑—è–∏–Ω–∞
                    self.telegram.send_message(
                        f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n{self.current_task[:200]}"
                    )

                    self.current_task = None  # –ì–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ

            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º CI/CD
            health = self.monitor.check_health()
            logger.info(f"üìä CI/CD: {health['status']} | {health['grade']}")

            if not health["is_healthy"]:
                logger.warning("‚ö†Ô∏è CI/CD –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!")
                self.telegram.send_message(
                    f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
                    f"CI/CD: {health['status']}\n"
                    f"–û—Ü–µ–Ω–∫–∞: {health['grade']}\n"
                    f"Success Rate: {health['metrics']['success_rate']}%"
                )

            logger.info("‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}", exc_info=True)
            self.telegram.send_message(f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n{str(e)}")

    def run(self, interval_seconds=120):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª"""
        logger.info(
            """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üå∏ MIRAI - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üéØ –ß–¢–û –Ø –î–ï–õ–ê–Æ:
   ‚Ä¢ –°–∞–º–∞ —Å—Ç–∞–≤–ª—é –∑–∞–¥–∞—á–∏
   ‚Ä¢ –°–∞–º–∞ –∏—Ö —Ä–µ—à–∞—é
   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—é CI/CD
   ‚Ä¢ –ü–∏—à—É —Ö–æ–∑—è–∏–Ω—É –≤ Telegram, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å
   ‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram

üìù –õ–æ–≥–∏: /tmp/mirai_autonomous.log
üí¨ Telegram: –∞–∫—Ç–∏–≤–µ–Ω

üöÄ –ó–ê–ü–£–°–ö...
        """
        )

        try:
            while True:
                self.autonomous_cycle()
                logger.info(f"üò¥ –°–ø–ª—é {interval_seconds} —Å–µ–∫—É–Ω–¥...\n")
                time.sleep(interval_seconds)

        except KeyboardInterrupt:
            logger.info("‚å®Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.telegram.send_message("üå∏ –ú–ò–†–ê–ô –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            self.telegram.send_message(f"üí• <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!</b>\n\n{str(e)}")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="MIRAI Autonomous Agent")
    parser.add_argument(
        "--interval",
        type=int,
        default=120,
        help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)",
    )
    args = parser.parse_args()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º requests –µ—Å–ª–∏ –Ω–µ—Ç
    try:
        import requests
    except ImportError:
        import subprocess
        import sys

        logger.info("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é requests...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "requests"])
        import requests

    mirai = MiraiAutonomous()
    mirai.run(interval_seconds=args.interval)
