#!/usr/bin/env python3
"""
üõ°Ô∏è API KEY WATCHDOG - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è API –∫–ª—é—á–µ–π
–ó–∞—â–∏—â–∞–µ—Ç MIRAI –æ—Ç –ø–æ–ª–æ–º–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å API –∫–ª—é—á–∞–º–∏
"""

import json
import logging
import os
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('/tmp/api_watchdog.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class APIKeyWatchdog:
    """Watchdog –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è API –∫–ª—é—á–µ–π"""
    
    def __init__(self):
        self.config_path = Path(__file__).parent / "configs" / "api_keys.json"
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.consecutive_failures = 0
        self.max_failures = 3
        
    def load_api_key(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        try:
            with open(self.config_path) as f:
                config = json.load(f)
            return config.get('openai')
        except Exception as e:
            logger.error(f"‚ùå –ù–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: {e}")
            return None
    
    def test_api_key(self, api_key):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ API –∫–ª—é—á"""
        try:
            from openai import OpenAI
            
            client = OpenAI(api_key=api_key)
            response = client.chat.completions.create(
                model='gpt-4o-mini',
                messages=[{'role': 'user', 'content': 'test'}],
                max_tokens=5,
                timeout=10
            )
            
            return True, "OK"
            
        except Exception as e:
            return False, str(e)
    
    def kill_old_processes(self):
        """–£–±–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã MIRAI (—Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)"""
        try:
            # –ù–∞–π—Ç–∏ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            cmd = """ps aux | grep -E "mirai.*autonomous|mirai_autonomous" | grep -v "grep\\|vscode\\|watchdog" | awk '$10 ~ /[0-9]+-[0-9]+/ || $11 ~ /[0-9]+-[0-9]+/ {print $2}'"""
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            old_pids = result.stdout.strip().split('\n')
            old_pids = [pid for pid in old_pids if pid.strip()]
            
            if old_pids:
                logger.warning(f"üî™ –ù–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {old_pids}")
                for pid in old_pids:
                    try:
                        subprocess.run(['kill', '-9', pid], check=False)
                        logger.info(f"   ‚úÖ –£–±–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å {pid}")
                    except Exception as e:
                        logger.error(f"   ‚ùå –ù–µ –º–æ–≥—É —É–±–∏—Ç—å {pid}: {e}")
                return len(old_pids)
            
            return 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–±–∏–π—Å—Ç–≤–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            return 0
    
    def restart_service(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å autonomous service"""
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é autonomous service...")
            
            # –£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã autonomous
            subprocess.run(['killall', '-9', 'python'], check=False)
            time.sleep(2)
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π
            service_path = Path(__file__).parent / "autonomous_service.py"
            log_path = "/tmp/mirai_autonomous.log"
            
            cmd = f"nohup python3 {service_path} > {log_path} 2>&1 &"
            subprocess.run(cmd, shell=True, cwd=Path(__file__).parent)
            
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å
            result = subprocess.run(
                ['pgrep', '-f', 'autonomous_service.py'],
                capture_output=True,
                text=True
            )
            
            if result.stdout.strip():
                logger.info(f"   ‚úÖ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω (PID: {result.stdout.strip()})")
                return True
            else:
                logger.error("   ‚ùå –ù–µ –º–æ–≥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
            return False
    
    def send_alert(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –≤ Telegram"""
        try:
            with open(self.config_path) as f:
                config = json.load(f)
            
            bot_token = config.get('TELEGRAM_BOT_TOKEN')
            chat_id = config.get('TELEGRAM_CHAT_ID_ADMIN')
            
            if bot_token and chat_id:
                import requests
                url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                data = {
                    'chat_id': chat_id,
                    'text': f"üö® API WATCHDOG ALERT\n\n{message}",
                    'parse_mode': 'Markdown'
                }
                requests.post(url, json=data, timeout=10)
                logger.info("   üì± –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                
        except Exception as e:
            logger.error(f"‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç: {e}")
    
    def check_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...")
        
        # 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á
        api_key = self.load_api_key()
        if not api_key:
            logger.error("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ!")
            self.consecutive_failures += 1
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á
        is_valid, error = self.test_api_key(api_key)
        
        if is_valid:
            logger.info("‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!")
            self.consecutive_failures = 0
            
            # –£–±–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏
            killed = self.kill_old_processes()
            if killed > 0:
                logger.info(f"üßπ –£–±–∏—Ç–æ {killed} —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            
            return True
        else:
            logger.error(f"‚ùå API –∫–ª—é—á –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç: {error}")
            self.consecutive_failures += 1
            
            # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ - –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã
            if self.consecutive_failures >= self.max_failures:
                logger.error(f"üö® –ö–†–ò–¢–ò–ß–ù–û: {self.consecutive_failures} –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥!")
                
                # –£–±–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                self.kill_old_processes()
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å
                if self.restart_service():
                    logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è—é —Å–Ω–æ–≤–∞...")
                    time.sleep(10)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
                    is_valid_retry, _ = self.test_api_key(api_key)
                    if is_valid_retry:
                        logger.info("‚úÖ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                        self.consecutive_failures = 0
                        return True
                
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç
                alert_msg = f"""
‚ùå API –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç {self.consecutive_failures} —Ä–∞–∑ –ø–æ–¥—Ä—è–¥!

–û—à–∏–±–∫–∞: {error}

–î–µ–π—Å—Ç–≤–∏—è:
- –£–±–∏—Ç—ã —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
- –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å–µ—Ä–≤–∏—Å
- –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞!

–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                """
                self.send_alert(alert_msg)
            
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å watchdog"""
        logger.info("üõ°Ô∏è API KEY WATCHDOG –ó–ê–ü–£–©–ï–ù")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval}s")
        logger.info(f"   –ú–∞–∫—Å–∏–º—É–º –æ—à–∏–±–æ–∫: {self.max_failures}")
        logger.info("")
        
        cycle = 0
        
        try:
            while True:
                cycle += 1
                logger.info(f"{'='*60}")
                logger.info(f"üîÑ –¶–ò–ö–õ #{cycle}")
                logger.info(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                logger.info(f"{'='*60}")
                
                health = self.check_health()
                
                if health:
                    logger.info(f"‚úÖ –¶–∏–∫–ª #{cycle} –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning(f"‚ö†Ô∏è  –¶–∏–∫–ª #{cycle} –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
                
                logger.info(f"üò¥ –°–ø–ª—é {self.check_interval}s...")
                logger.info("")
                
                time.sleep(self.check_interval)
                
        except KeyboardInterrupt:
            logger.info("\nüõë Watchdog –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            self.send_alert(f"Watchdog crashed: {e}")


if __name__ == '__main__':
    watchdog = APIKeyWatchdog()
    watchdog.run()
