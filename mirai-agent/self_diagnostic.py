#!/usr/bin/env python3
"""
üîç MIRAI Self-Diagnostic System
================================

MIRAI –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∞–º–∞ —Å–µ–±—è:
- –í—Å–µ —Ñ–∞–π–ª—ã –∫–æ–¥–∞
- –ò–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –æ—à–∏–±–∫–∏
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
- –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
"""

import ast
import importlib
import json
import os
import subprocess
import sys
from collections import defaultdict
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, "/root/mirai/mirai-agent")


class SelfDiagnostic:
    """–ü–æ–ª–Ω–∞—è —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ MIRAI"""

    def __init__(self):
        self.mirai_root = Path("/root/mirai/mirai-agent")
        self.core_dir = self.mirai_root / "core"

        self.results = {
            "timestamp": datetime.now().isoformat(),
            "files_checked": 0,
            "total_issues": 0,
            "critical_issues": 0,
            "warnings": 0,
            "files_ok": 0,
            "files_with_errors": [],
            "files_with_warnings": [],
            "files_perfect": [],
            "detailed_report": {},
        }

    def check_syntax(self, file_path: str) -> Tuple[bool, List[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python"""
        errors = []
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                code = f.read()
            ast.parse(code)
            return True, []
        except SyntaxError as e:
            errors.append(f"üî¥ SYNTAX ERROR: Line {e.lineno}: {e.msg}")
            return False, errors
        except Exception as e:
            errors.append(f"üî¥ PARSE ERROR: {str(e)}")
            return False, errors

    def check_imports(self, file_path: str) -> Tuple[bool, List[str], List[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        errors = []
        warnings = []

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                tree = ast.parse(f.read())

            for node in ast.walk(tree):
                if isinstance(node, ast.Import):
                    for alias in node.names:
                        try:
                            importlib.import_module(alias.name)
                        except ImportError:
                            errors.append(f"üî¥ MISSING IMPORT: {alias.name}")
                        except Exception as e:
                            warnings.append(f"‚ö†Ô∏è IMPORT WARNING: {alias.name} - {e}")

                elif isinstance(node, ast.ImportFrom):
                    if node.module:
                        try:
                            importlib.import_module(node.module)
                        except ImportError:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
                            if not node.module.startswith("core."):
                                errors.append(f"üî¥ MISSING MODULE: {node.module}")
                        except Exception as e:
                            warnings.append(f"‚ö†Ô∏è MODULE WARNING: {node.module} - {e}")

            return len(errors) == 0, errors, warnings

        except Exception as e:
            return False, [f"üî¥ IMPORT CHECK FAILED: {str(e)}"], []

    def check_code_quality(self, file_path: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        issues = {
            "missing_docstrings": [],
            "long_functions": [],
            "complex_functions": [],
            "unused_imports": [],
            "code_smells": [],
        }

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                code = f.read()
                tree = ast.parse(code)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ docstrings
            for node in ast.walk(tree):
                if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
                    if not ast.get_docstring(node):
                        issues["missing_docstrings"].append(
                            f"Line {node.lineno}: {node.name}"
                        )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ñ—É–Ω–∫—Ü–∏–π
                if isinstance(node, ast.FunctionDef):
                    if hasattr(node, "end_lineno"):
                        func_length = node.end_lineno - node.lineno
                        if func_length > 100:
                            issues["long_functions"].append(
                                f"Line {node.lineno}: {node.name} ({func_length} lines)"
                            )
                        elif func_length > 50:
                            issues["complex_functions"].append(
                                f"Line {node.lineno}: {node.name} ({func_length} lines)"
                            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            lines = code.split("\n")
            line_freq = defaultdict(int)
            for line in lines:
                stripped = line.strip()
                if len(stripped) > 30 and not stripped.startswith("#"):
                    line_freq[stripped] += 1

            for line, count in line_freq.items():
                if count > 5:
                    issues["code_smells"].append(
                        f"Duplicated code ({count} times): {line[:60]}..."
                    )

        except Exception as e:
            issues["code_smells"].append(f"Quality check failed: {e}")

        return issues

    def check_file_executable(self, file_path: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å/–≤—ã–ø–æ–ª–Ω–∏—Ç—å"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –º–æ–¥—É–ª—å
            module_path = (
                file_path.replace("/root/mirai/mirai-agent/", "")
                .replace("/", ".")
                .replace(".py", "")
            )

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
            if "__main__" in open(file_path).read():
                return True, "‚úÖ Executable script"

            return True, "‚úÖ Importable module"

        except Exception as e:
            return False, f"üî¥ Cannot import: {e}"

    def analyze_file(self, file_path: str) -> Dict:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        file_name = os.path.basename(file_path)

        report = {
            "file": file_name,
            "path": str(file_path),
            "status": "unknown",
            "errors": [],
            "warnings": [],
            "quality_issues": {},
            "lines_of_code": 0,
            "complexity_score": 0,
        }

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        syntax_ok, syntax_errors = self.check_syntax(file_path)
        if not syntax_ok:
            report["errors"].extend(syntax_errors)
            report["status"] = "critical"
            return report

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        imports_ok, import_errors, import_warnings = self.check_imports(file_path)
        report["errors"].extend(import_errors)
        report["warnings"].extend(import_warnings)

        # 3. –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
        quality_issues = self.check_code_quality(file_path)
        report["quality_issues"] = quality_issues

        # 4. –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–æ–∫
        with open(file_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
            report["lines_of_code"] = len(
                [l for l in lines if l.strip() and not l.strip().startswith("#")]
            )

        # 5. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        total_issues = len(report["errors"]) + sum(
            len(v) for v in quality_issues.values()
        )

        if report["errors"]:
            report["status"] = "critical"
        elif total_issues > 10:
            report["status"] = "needs_attention"
        elif total_issues > 5:
            report["status"] = "warnings"
        else:
            report["status"] = "good"

        report["complexity_score"] = total_issues

        return report

    def scan_all_files(self) -> Dict:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤"""
        print("üîç MIRAI SELF-DIAGNOSTIC STARTING...\n")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
        python_files = []

        # Core –º–æ–¥—É–ª–∏
        if self.core_dir.exists():
            python_files.extend(list(self.core_dir.glob("*.py")))

        # –ö–æ—Ä–Ω–µ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
        for pattern in ["*.py", "autonomous_*.py"]:
            python_files.extend(list(self.mirai_root.glob(pattern)))

        # –§–∏–ª—å—Ç—Ä—É–µ–º __init__ –∏ —Ç–µ—Å—Ç—ã
        python_files = [
            f
            for f in python_files
            if f.name != "__init__.py" and not f.name.startswith("test_")
        ]

        print(f"üìÅ Found {len(python_files)} Python files\n")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for i, file_path in enumerate(python_files, 1):
            print(f"[{i}/{len(python_files)}] Checking {file_path.name}...", end=" ")

            report = self.analyze_file(str(file_path))
            self.results["detailed_report"][file_path.name] = report
            self.results["files_checked"] += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if report["status"] == "critical":
                print("üî¥ CRITICAL")
                self.results["critical_issues"] += len(report["errors"])
                self.results["files_with_errors"].append(file_path.name)
            elif report["status"] == "needs_attention":
                print("üü† NEEDS ATTENTION")
                self.results["warnings"] += report["complexity_score"]
                self.results["files_with_warnings"].append(file_path.name)
            elif report["status"] == "warnings":
                print("üü° WARNINGS")
                self.results["warnings"] += report["complexity_score"]
                self.results["files_with_warnings"].append(file_path.name)
            else:
                print("‚úÖ GOOD")
                self.results["files_ok"] += 1
                self.results["files_perfect"].append(file_path.name)

        # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–∏—Ö –ø—Ä–æ–±–ª–µ–º
        for report in self.results["detailed_report"].values():
            self.results["total_issues"] += report["complexity_score"]

        return self.results

    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
        report = []

        report.append(
            "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
        )
        report.append(
            "‚ïë           üîç MIRAI SELF-DIAGNOSTIC REPORT                        ‚ïë"
        )
        report.append(
            "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n"
        )

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report.append("üìä OVERALL STATISTICS:")
        report.append(f"   Files checked: {self.results['files_checked']}")
        report.append(f"   Total issues: {self.results['total_issues']}")
        report.append(f"   Critical errors: {self.results['critical_issues']}")
        report.append(f"   Warnings: {self.results['warnings']}")
        report.append(f"   Files OK: {self.results['files_ok']}")
        report.append("")

        # –°—Ç–∞—Ç—É—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        critical_count = len(self.results["files_with_errors"])
        warning_count = len(self.results["files_with_warnings"])
        ok_count = len(self.results["files_perfect"])

        report.append("üìà STATUS BREAKDOWN:")
        report.append(f"   üî¥ Critical: {critical_count} files")
        report.append(f"   üü° Warnings: {warning_count} files")
        report.append(f"   ‚úÖ Perfect: {ok_count} files")
        report.append("")

        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if self.results["files_with_errors"]:
            report.append("üî¥ CRITICAL ISSUES (MUST FIX):")
            for file_name in self.results["files_with_errors"]:
                file_report = self.results["detailed_report"][file_name]
                report.append(f"\n   üìÑ {file_name}:")
                for error in file_report["errors"]:
                    report.append(f"      {error}")
            report.append("")

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if self.results["files_with_warnings"]:
            report.append("üü° FILES NEEDING ATTENTION:")
            for file_name in self.results["files_with_warnings"]:
                file_report = self.results["detailed_report"][file_name]
                report.append(
                    f"\n   üìÑ {file_name} ({file_report['lines_of_code']} LOC):"
                )

                # –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
                quality = file_report["quality_issues"]

                if quality["missing_docstrings"]:
                    report.append(
                        f"      ‚ö†Ô∏è Missing docstrings: {len(quality['missing_docstrings'])}"
                    )

                if quality["long_functions"]:
                    report.append(
                        f"      ‚ö†Ô∏è Long functions (>100 lines): {len(quality['long_functions'])}"
                    )
                    for func in quality["long_functions"][:3]:
                        report.append(f"         ‚Ä¢ {func}")

                if quality["complex_functions"]:
                    report.append(
                        f"      ‚ö†Ô∏è Complex functions (50-100 lines): {len(quality['complex_functions'])}"
                    )

                if quality["code_smells"]:
                    report.append(f"      ‚ö†Ô∏è Code smells: {len(quality['code_smells'])}")

                if file_report["warnings"]:
                    for warning in file_report["warnings"][:5]:
                        report.append(f"      {warning}")

            report.append("")

        # –û—Ç–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
        if self.results["files_perfect"]:
            report.append("‚úÖ PERFECT FILES (No issues):")
            for file_name in sorted(self.results["files_perfect"]):
                file_report = self.results["detailed_report"][file_name]
                report.append(f"   ‚úì {file_name} ({file_report['lines_of_code']} LOC)")
            report.append("")

        # –¢–æ–ø-5 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        report.append("üìè TOP 5 LARGEST FILES:")
        files_by_size = sorted(
            self.results["detailed_report"].items(),
            key=lambda x: x[1]["lines_of_code"],
            reverse=True,
        )[:5]

        for file_name, file_report in files_by_size:
            status_emoji = {
                "critical": "üî¥",
                "needs_attention": "üü†",
                "warnings": "üü°",
                "good": "‚úÖ",
            }
            emoji = status_emoji.get(file_report["status"], "‚ùì")
            report.append(
                f"   {emoji} {file_name}: {file_report['lines_of_code']} lines"
            )

        report.append("")

        # –¢–æ–ø-5 —Å–∞–º—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if self.results["total_issues"] > 0:
            report.append("‚ö†Ô∏è TOP 5 MOST COMPLEX FILES:")
            files_by_complexity = sorted(
                self.results["detailed_report"].items(),
                key=lambda x: x[1]["complexity_score"],
                reverse=True,
            )[:5]

            for file_name, file_report in files_by_complexity:
                if file_report["complexity_score"] > 0:
                    report.append(
                        f"   üî∂ {file_name}: {file_report['complexity_score']} issues"
                    )

            report.append("")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.append("üí° RECOMMENDATIONS:")

        if self.results["critical_issues"] > 0:
            report.append("   1. üî¥ FIX CRITICAL ERRORS IMMEDIATELY")
            report.append("      These files have syntax or import errors!")

        if critical_count == 0 and warning_count > 0:
            report.append("   1. üü° Address warnings in complex files")
            report.append("      Consider refactoring large functions")

        if ok_count > critical_count + warning_count:
            report.append("   1. ‚úÖ Code quality is generally good!")
            report.append("      Most files are clean and well-structured")

        report.append("")

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        report.append("üéØ FINAL VERDICT:")

        if critical_count > 0:
            report.append("   Status: üî¥ CRITICAL - Requires immediate attention")
            report.append(f"   Action: Fix {critical_count} critical files ASAP")
        elif warning_count > len(self.results["files_perfect"]):
            report.append("   Status: üü° NEEDS IMPROVEMENT")
            report.append("   Action: Refactor complex files, add docstrings")
        else:
            report.append("   Status: ‚úÖ EXCELLENT")
            report.append("   Action: Maintain code quality, keep improving!")

        report.append("")
        report.append(f"Generated: {self.results['timestamp']}")
        report.append("ü§ñ MIRAI Self-Diagnostic System v1.0")

        return "\n".join(report)

    def save_report(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞"""
        if filename is None:
            filename = f"/root/mirai/MIRAI_DIAGNOSTIC_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"

        report_text = self.generate_report()

        with open(filename, "w", encoding="utf-8") as f:
            f.write(report_text)

        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON
        json_file = filename.replace(".txt", ".json")
        with open(json_file, "w", encoding="utf-8") as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)

        return filename, json_file


def main():
    """–ó–∞–ø—É—Å–∫ —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    diagnostic = SelfDiagnostic()

    # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    results = diagnostic.scan_all_files()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    print("\n" + "=" * 70 + "\n")
    report = diagnostic.generate_report()
    print(report)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç—ã
    txt_file, json_file = diagnostic.save_report()

    print("\n" + "=" * 70)
    print(f"üìÑ Full report saved to: {txt_file}")
    print(f"üìä JSON data saved to: {json_file}")
    print("=" * 70 + "\n")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if results["critical_issues"] > 0:
        sys.exit(1)  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    elif results["total_issues"] > 20:
        sys.exit(2)  # –ú–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    else:
        sys.exit(0)  # –í—Å—ë —Ö–æ—Ä–æ—à–æ


if __name__ == "__main__":
    main()
