#!/usr/bin/env python3
"""
ü§ñ KAIZEN Terminal - Interactive CLI Interface
Based on: yoda, PyInquirer, prompt-toolkit
KAIZEN –∂–∏–≤—ë—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, MIRAI —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ
"""

import sys
import asyncio
from datetime import datetime
from pathlib import Path

sys.path.insert(0, '/root/mirai/mirai-agent')

from prompt_toolkit import PromptSession
from prompt_toolkit.history import FileHistory
from prompt_toolkit.auto_suggest import AutoSuggestFromHistory
from prompt_toolkit.completion import WordCompleter
from prompt_toolkit.styles import Style
from rich.console import Console
from rich.panel import Panel
from rich.markdown import Markdown
from rich.table import Table
from rich import print as rprint

from core.autonomous_agent import AutonomousAgent
from core.cicd_monitor import CICDMonitor
import json


class KaizenTerminal:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è KAIZEN"""
    
    def __init__(self):
        self.console = Console()
        self.kaizen = AutonomousAgent()
        
        # Load config
        config_path = Path(__file__).parent / "configs" / "api_keys.json"
        with open(config_path) as f:
            config = json.load(f)
        
        self.monitor = CICDMonitor(
            github_token=config["GITHUB_TOKEN"],
            repo_owner="AgeeKey",
            repo_name="mirai-showcase"
        )
        
        # Commands autocomplete
        self.commands = WordCompleter([
            'help', 'exit', 'quit',
            'status', 'cicd', 'health',
            'mirai', 'ask mirai', 'consult',
            'metrics', 'logs', 'runs',
            'improve', 'optimize',
            'clear', 'history'
        ], ignore_case=True)
        
        # Prompt style
        self.style = Style.from_dict({
            'prompt': '#00aa00 bold',
            'user': '#00aaff',
        })
        
        # Session with history
        self.session = PromptSession(
            history=FileHistory('/tmp/kaizen_terminal_history.txt'),
            auto_suggest=AutoSuggestFromHistory(),
            completer=self.commands,
            style=self.style,
        )
        
        self.running = True
    
    def show_welcome(self):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        welcome = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          ü§ñ KAIZEN TERMINAL - Interactive AI Interface               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–ü—Ä–∏–≤–µ—Ç! –Ø KAIZEN (ÊîπÂñÑ), —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç MIRAI.

MIRAI —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –≤ —Ñ–æ–Ω–µ, –∞ —è –∑–¥–µ—Å—å —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
   ‚Ä¢ status     - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º
   ‚Ä¢ cicd       - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å CI/CD
   ‚Ä¢ mirai      - —Å–ø—Ä–æ—Å–∏—Ç—å MIRAI
   ‚Ä¢ metrics    - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
   ‚Ä¢ runs       - –ø–æ—Å–ª–µ–¥–Ω–∏–µ workflow runs
   ‚Ä¢ help       - —Å–ø—Ä–∞–≤–∫–∞
   ‚Ä¢ exit       - –≤—ã—Ö–æ–¥

üí° –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ, —è –ø–æ–π–º—É!

ÊîπÂñÑ - Continuous Improvement
        """
        self.console.print(Panel(welcome, border_style="green"))
    
    def show_help(self):
        """–°–ø—Ä–∞–≤–∫–∞"""
        table = Table(title="ü§ñ KAIZEN Commands")
        table.add_column("–ö–æ–º–∞–Ω–¥–∞", style="cyan")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        
        table.add_row("status", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º")
        table.add_row("cicd / health", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ CI/CD")
        table.add_row("mirai [–≤–æ–ø—Ä–æ—Å]", "–°–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç–∞ —É MIRAI")
        table.add_row("metrics", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ CI/CD")
        table.add_row("runs", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ workflow runs")
        table.add_row("logs", "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ MIRAI (–∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞)")
        table.add_row("improve", "–ü–æ–ø—Ä–æ—Å–∏—Ç—å MIRAI –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è")
        table.add_row("clear", "–û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω")
        table.add_row("help", "–≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞")
        table.add_row("exit / quit", "–í—ã—Ö–æ–¥")
        
        self.console.print(table)
    
    def cmd_status(self):
        """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º"""
        self.console.print("\n[bold cyan]üìä –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º...[/bold cyan]")
        
        # CI/CD status
        health = self.monitor.check_health()
        
        if health['is_healthy']:
            status_icon = "üü¢"
            status_text = "HEALTHY"
            color = "green"
        else:
            status_icon = "üî¥"
            status_text = "UNHEALTHY"
            color = "red"
        
        self.console.print(f"\n{status_icon} [bold {color}]CI/CD: {status_text}[/bold {color}]")
        self.console.print(f"   Grade: [bold]{health['grade']}[/bold]")
        self.console.print(f"   Success Rate: {health['metrics']['success_rate']}%")
        self.console.print(f"   Total Runs: {health['metrics']['total_runs']}")
        self.console.print(f"   Failed: {health['metrics']['failed']}")
        
        # MIRAI autonomous service status
        try:
            with open('/tmp/kaizen_mirai_metrics.jsonl', 'r') as f:
                lines = f.readlines()
                if lines:
                    last = json.loads(lines[-1])
                    self.console.print(f"\nüå∏ [bold magenta]MIRAI Autonomous Service:[/bold magenta]")
                    self.console.print(f"   Last Cycle: {last['timestamp']}")
                    self.console.print(f"   Cycle #: {last['cycle']}")
                    self.console.print("   Status: üü¢ ACTIVE")
                else:
                    self.console.print("\nüå∏ MIRAI: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        except FileNotFoundError:
            self.console.print("\nüå∏ MIRAI: –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    
    def cmd_cicd(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å CI/CD"""
        self.console.print("\n[bold cyan]üîç –ü—Ä–æ–≤–µ—Ä—è—é CI/CD pipeline...[/bold cyan]")
        
        health = self.monitor.check_health()
        metrics = health['metrics']
        
        table = Table(title="CI/CD Metrics")
        table.add_column("Metric", style="cyan")
        table.add_column("Value", style="yellow")
        
        table.add_row("Health", health['status'])
        table.add_row("Grade", health['grade'])
        table.add_row("Success Rate", f"{metrics['success_rate']}%")
        table.add_row("Total Runs", str(metrics['total_runs']))
        table.add_row("Successful", str(metrics['successful']))
        table.add_row("Failed", str(metrics['failed']))
        table.add_row("Avg Duration", f"{metrics['avg_duration_minutes']} min")
        
        self.console.print(table)
        
        if not health['is_healthy']:
            self.console.print("\n[bold red]‚ö†Ô∏è  Pipeline –Ω–µ–∑–¥–æ—Ä–æ–≤! –£–ø–∞–≤—à–∏–µ workflows:[/bold red]")
            failures = self.monitor.get_failing_workflows()
            for f in failures[:3]:
                self.console.print(f"   ‚ùå {f['name']} #{f['run_number']}")
    
    def cmd_mirai(self, question: str):
        """–°–ø—Ä–æ—Å–∏—Ç—å MIRAI"""
        if not question:
            question = "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã?"
        
        self.console.print(f"\n[bold magenta]üí≠ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å MIRAI...[/bold magenta]")
        self.console.print(f"[dim]–í–æ–ø—Ä–æ—Å: {question}[/dim]\n")
        
        # Create MIRAI agent for consultation
        mirai = AutonomousAgent()
        response = mirai.think(question, max_iterations=1)
        
        panel = Panel(
            response,
            title="üå∏ MIRAI",
            border_style="magenta"
        )
        self.console.print(panel)
    
    def cmd_metrics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏"""
        self.console.print("\n[bold cyan]üìà –ß–∏—Ç–∞—é –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏...[/bold cyan]")
        
        try:
            with open('/tmp/kaizen_mirai_metrics.jsonl', 'r') as f:
                lines = f.readlines()[-10:]  # Last 10
                
            table = Table(title="Last 10 Cycles Metrics")
            table.add_column("Cycle", style="cyan")
            table.add_column("Time", style="white")
            table.add_column("Success %", style="green")
            table.add_column("Failed", style="red")
            
            for line in lines:
                data = json.loads(line)
                time_str = datetime.fromisoformat(data['timestamp']).strftime("%H:%M:%S")
                table.add_row(
                    str(data['cycle']),
                    time_str,
                    f"{data['success_rate']}%",
                    str(data['failed'])
                )
            
            self.console.print(table)
        except FileNotFoundError:
            self.console.print("[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫[/yellow]")
    
    def cmd_runs(self):
        """–ü–æ—Å–ª–µ–¥–Ω–∏–µ runs"""
        self.console.print("\n[bold cyan]üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ workflow runs...[/bold cyan]")
        
        runs = self.monitor.get_workflow_runs(limit=5)
        
        for run in runs:
            emoji = "‚úÖ" if run['conclusion'] == 'success' else "‚ùå" if run['conclusion'] == 'failure' else "‚è≥"
            self.console.print(f"\n{emoji} [bold]{run['name']}[/bold] #{run['run_number']}")
            self.console.print(f"   Status: {run['status']} ‚Üí {run['conclusion'] or 'running'}")
            self.console.print(f"   Commit: {run['head_commit']['message'].split(chr(10))[0][:60]}")
    
    def cmd_logs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ MIRAI"""
        self.console.print("\n[bold cyan]üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ MIRAI:[/bold cyan]\n")
        
        try:
            with open('/tmp/kaizen_mirai.log', 'r') as f:
                lines = f.readlines()[-20:]
            for line in lines:
                print(line, end='')
        except FileNotFoundError:
            self.console.print("[yellow]–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")
    
    async def process_command(self, user_input: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        cmd = user_input.lower().strip()
        
        if cmd in ['exit', 'quit', 'q']:
            self.console.print("\n[bold green]üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏! ÊîπÂñÑ[/bold green]\n")
            self.running = False
        
        elif cmd in ['help', 'h', '?']:
            self.show_help()
        
        elif cmd == 'status':
            self.cmd_status()
        
        elif cmd in ['cicd', 'health', 'ci']:
            self.cmd_cicd()
        
        elif cmd.startswith('mirai'):
            question = cmd[5:].strip() if len(cmd) > 5 else ""
            self.cmd_mirai(question)
        
        elif cmd in ['metrics', 'stats']:
            self.cmd_metrics()
        
        elif cmd in ['runs', 'workflows']:
            self.cmd_runs()
        
        elif cmd == 'logs':
            self.cmd_logs()
        
        elif cmd == 'improve':
            self.cmd_mirai("–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ? –î–∞–π 3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        
        elif cmd == 'clear':
            self.console.clear()
        
        elif cmd == 'history':
            self.console.print("\n[dim]–ò—Å—Ç–æ—Ä–∏—è –≤ /tmp/kaizen_terminal_history.txt[/dim]")
        
        elif cmd:
            # –°–≤–æ–±–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º KAIZEN AI
            self.console.print(f"\n[bold cyan]ü§ñ KAIZEN –¥—É–º–∞–µ—Ç...[/bold cyan]\n")
            response = self.kaizen.think(user_input, max_iterations=1)
            
            panel = Panel(
                response,
                title="ü§ñ KAIZEN",
                border_style="cyan"
            )
            self.console.print(panel)
    
    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª"""
        self.show_welcome()
        
        while self.running:
            try:
                user_input = await asyncio.to_thread(
                    self.session.prompt,
                    [('class:prompt', 'ü§ñ KAIZEN'), ('class:user', ' > ')]
                )
                
                if user_input.strip():
                    await self.process_command(user_input)
            
            except KeyboardInterrupt:
                self.console.print("\n[yellow]–ò—Å–ø–æ–ª—å–∑—É–π 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞[/yellow]")
            except EOFError:
                break


async def main():
    """Entry point"""
    terminal = KaizenTerminal()
    await terminal.run()


if __name__ == '__main__':
    asyncio.run(main())
