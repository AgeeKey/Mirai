#!/usr/bin/env python3
"""
üß™ Tests for Phase 4: Action Execution Engine

Comprehensive tests for all 150 steps
"""

import sys
import asyncio
from pathlib import Path

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.action_execution import (
    ActionExecutor,
    ActionQueue,
    ExecutionContextValidator,
    ActionTemplateLoader,
    ActionHandlerRegistry,
    Action,
    ActionType,
    ActionStatus,
)


def test_action_executor():
    """Test 1: Action Executor - –®–∞–≥ 1"""
    print("\nüß™ TEST 1: Action Executor")
    print("="*60)
    
    executor = ActionExecutor()
    assert executor is not None
    assert not executor.is_initialized
    assert not executor.is_running
    
    print("‚úÖ ActionExecutor —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    return True


async def test_executor_initialization():
    """Test 2: Executor Initialization"""
    print("\nüß™ TEST 2: Executor Initialization")
    print("="*60)
    
    executor = ActionExecutor()
    success = await executor.initialize()
    
    assert success
    assert executor.is_initialized
    
    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
    return True


def test_execution_context_validator():
    """Test 3: Execution Context Validator - –®–∞–≥ 2"""
    print("\nüß™ TEST 3: Execution Context Validator")
    print("="*60)
    
    validator = ExecutionContextValidator()
    result = validator.validate()
    
    assert result is not None
    assert isinstance(result.is_valid, bool)
    assert isinstance(result.errors, list)
    assert isinstance(result.warnings, list)
    assert isinstance(result.info, dict)
    
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {'PASSED' if result.is_valid else 'FAILED'}")
    print(f"   –û—à–∏–±–æ–∫: {len(result.errors)}")
    print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(result.warnings)}")
    return True


def test_action_queue():
    """Test 4: Action Queue - –®–∞–≥ 3"""
    print("\nüß™ TEST 4: Action Queue")
    print("="*60)
    
    queue = ActionQueue(max_size=10)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    action1 = Action(
        id="1",
        type=ActionType.MOUSE_CLICK,
        parameters={'x': 100, 'y': 200},
        description="Test action 1"
    )
    
    action2 = Action(
        id="2",
        type=ActionType.KEYBOARD_TYPE,
        parameters={'text': 'Hello'},
        description="Test action 2"
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º enqueue
    assert queue.enqueue(action1)
    assert queue.enqueue(action2, priority=True)
    assert queue.size() == 2
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º dequeue
    first = queue.dequeue()
    assert first is not None
    assert first.id == "2"  # Priority first
    
    second = queue.dequeue()
    assert second is not None
    assert second.id == "1"
    
    assert queue.is_empty()
    
    print("‚úÖ ActionQueue —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


def test_action_templates():
    """Test 5: Action Templates - –®–∞–≥ 4"""
    print("\nüß™ TEST 5: Action Templates")
    print("="*60)
    
    loader = ActionTemplateLoader()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ templates
    templates = loader.list_templates()
    assert len(templates) > 0
    print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —à–∞–±–ª–æ–Ω–∞
    click_action = loader.create_from_template('click', {'x': 100, 'y': 200})
    assert click_action['type'] == 'mouse_click'
    assert click_action['params']['x'] == 100
    
    type_action = loader.create_from_template('type', {'text': 'Hello'})
    assert type_action['type'] == 'keyboard_type'
    assert type_action['params']['text'] == 'Hello'
    
    print("‚úÖ ActionTemplateLoader —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


def test_action_handlers():
    """Test 6: Action Handlers Registry - –®–∞–≥ 5"""
    print("\nüß™ TEST 6: Action Handlers Registry")
    print("="*60)
    
    registry = ActionHandlerRegistry()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = registry.get_stats()
    assert stats['total_handlers'] > 0
    assert stats['total_action_types'] > 0
    print(f"   Handlers: {stats['total_handlers']}")
    print(f"   Action types: {stats['total_action_types']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º dispatch
    result = registry.dispatch('mouse_click', x=100, y=200)
    assert result['success']
    assert result['action'] == 'mouse_click'
    
    result = registry.dispatch('keyboard_type', text='Test')
    assert result['success']
    assert result['action'] == 'keyboard_type'
    
    print("‚úÖ ActionHandlerRegistry —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


async def test_execute_single_action():
    """Test 7: Execute Single Action"""
    print("\nüß™ TEST 7: Execute Single Action")
    print("="*60)
    
    executor = ActionExecutor()
    await executor.initialize()
    
    action = Action(
        id="test1",
        type=ActionType.MOUSE_CLICK,
        parameters={'x': 100, 'y': 200},
        description="–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–∫"
    )
    
    success = await executor.execute_action(action)
    
    assert success
    assert action.status == ActionStatus.SUCCESS
    assert executor.successful_actions == 1
    
    print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    return True


async def test_execute_plan():
    """Test 8: Execute Full Plan"""
    print("\nüß™ TEST 8: Execute Full Plan")
    print("="*60)
    
    executor = ActionExecutor()
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    actions = [
        Action(
            id="1",
            type=ActionType.MOUSE_CLICK,
            parameters={'x': 100, 'y': 200},
            description="–ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É"
        ),
        Action(
            id="2",
            type=ActionType.KEYBOARD_TYPE,
            parameters={'text': 'Hello World'},
            description="–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç"
        ),
        Action(
            id="3",
            type=ActionType.WINDOW_FOCUS,
            parameters={'window_title': 'Chrome'},
            description="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Chrome"
        ),
    ]
    
    results = await executor.execute_plan(actions)
    
    assert results['total'] == 3
    assert results['successful'] == 3
    assert results['failed'] == 0
    
    status = executor.get_status()
    assert status['success_rate'] == 100.0
    
    print(f"‚úÖ –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω: {results['successful']}/{results['total']}")
    return True


def test_resource_checking():
    """Test 9: Resource Checking - –®–∞–≥ 16"""
    print("\nüß™ TEST 9: Resource Checking")
    print("="*60)
    
    validator = ExecutionContextValidator()
    result = validator.validate()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—É—Ä—Å–∞—Ö —Å–æ–±—Ä–∞–Ω–∞
    assert 'cpu' in result.info
    assert 'memory' in result.info
    assert 'disk' in result.info
    assert 'system' in result.info
    
    print(f"‚úÖ CPU: {result.info['cpu']['count']} cores")
    print(f"‚úÖ RAM: {result.info['memory']['available_mb']:.0f} MB available")
    print(f"‚úÖ Disk: {result.info['disk']['free_gb']:.1f} GB free")
    
    return True


async def test_error_handling():
    """Test 10: Error Handling"""
    print("\nüß™ TEST 10: Error Handling")
    print("="*60)
    
    executor = ActionExecutor()
    await executor.initialize()
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
    action = Action(
        id="error_test",
        type=ActionType.CUSTOM,
        parameters={},
        description="–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"
    )
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º (–Ω–µ –¥–æ–ª–∂–Ω–æ —É–ø–∞—Å—Ç—å)
    success = await executor.execute_action(action)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    status = executor.get_status()
    assert status['total_actions'] == 1
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    return True


def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("\n" + "="*70)
    print("üöÄ PHASE 4: ACTION EXECUTION - COMPREHENSIVE TEST SUITE")
    print("="*70)
    
    results = {}
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    tests = [
        ("Action Executor", test_action_executor),
        ("Execution Context", test_execution_context_validator),
        ("Action Queue", test_action_queue),
        ("Action Templates", test_action_templates),
        ("Action Handlers", test_action_handlers),
        ("Resource Checking", test_resource_checking),
    ]
    
    for name, test_func in tests:
        try:
            results[name] = test_func()
        except Exception as e:
            print(f"\n‚ùå TEST FAILED: {name}")
            print(f"   Error: {e}")
            import traceback
            traceback.print_exc()
            results[name] = False
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    async def run_async_tests():
        async_tests = [
            ("Executor Initialization", test_executor_initialization),
            ("Execute Single Action", test_execute_single_action),
            ("Execute Plan", test_execute_plan),
            ("Error Handling", test_error_handling),
        ]
        
        for name, test_func in async_tests:
            try:
                results[name] = await test_func()
            except Exception as e:
                print(f"\n‚ùå TEST FAILED: {name}")
                print(f"   Error: {e}")
                import traceback
                traceback.print_exc()
                results[name] = False
    
    asyncio.run(run_async_tests())
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*70)
    print("üìä TEST SUMMARY")
    print("="*70)
    
    passed = sum(1 for r in results.values() if r)
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} - {test_name}")
    
    print("="*70)
    success_rate = (passed / total * 100) if total > 0 else 0
    print(f"Results: {passed}/{total} tests passed ({success_rate:.0f}%)")
    print("="*70)
    
    if passed == total:
        print("\nüéâ ALL TESTS PASSED! Phase 4 Action Execution —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è {total - passed} test(s) failed")
        return 1


if __name__ == "__main__":
    exit(run_all_tests())
