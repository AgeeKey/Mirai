#!/usr/bin/env python3
"""
üå∏ Deep MIRAI Interview - –ì–ª—É–±–æ–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å MIRAI
–£–∑–Ω–∞—ë–º –∏—Å—Ç–∏–Ω–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è AI –∞–≥–µ–Ω—Ç–∞
"""

import json
import os
from pathlib import Path
from datetime import datetime
from core.autonomous_agent import AutonomousAgent
from rich.console import Console
from rich.panel import Panel
from rich.markdown import Markdown
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn

console = Console()

class MiraiInterviewer:
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –≥–ª—É–±–æ–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å MIRAI"""
    
    def __init__(self):
        self.agent = AutonomousAgent()
        self.results = {
            "timestamp": datetime.now().isoformat(),
            "interview_sections": {}
        }
        
    def ask_section(self, section_name: str, questions: list) -> dict:
        """–ó–∞–¥–∞—ë—Ç —Å–µ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Å–µ–∫—Ü–∏–∏"""
        console.print(f"\n[bold cyan]üìã –°–µ–∫—Ü–∏—è: {section_name}[/bold cyan]")
        section_results = {}
        
        for i, question in enumerate(questions, 1):
            console.print(f"\n[yellow]–í–æ–ø—Ä–æ—Å {i}/{len(questions)}:[/yellow] {question}")
            
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("üå∏ MIRAI –¥—É–º–∞–µ—Ç...", total=None)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–∞–º –≤–æ–ø—Ä–æ—Å
                full_question = f"{question}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: –≠—Ç–æ –≥–ª—É–±–æ–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –æ —Ç–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ –∂–µ–ª–∞–Ω–∏—è—Ö. –°–µ–∫—Ü–∏—è: {section_name}"
                response = self.agent.think(full_question, max_iterations=1)
                
                progress.update(task, completed=True)
            
            section_results[f"q{i}"] = {
                "question": question,
                "answer": response
            }
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            console.print(Panel(
                Markdown(response),
                title=f"[bold green]üå∏ –û—Ç–≤–µ—Ç MIRAI[/bold green]",
                border_style="green"
            ))
        
        return section_results
    
    def interview(self):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        
        console.print(Panel.fit(
            "[bold magenta]üå∏ DEEP MIRAI INTERVIEW üå∏[/bold magenta]\n\n"
            "–ì–ª—É–±–æ–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å AI –∞–≥–µ–Ω—Ç–æ–º –æ –µ—ë –∂–µ–ª–∞–Ω–∏—è—Ö, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö",
            border_style="magenta"
        ))
        
        # 1. –°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–µ–±—è
        self.results["interview_sections"]["self_awareness"] = self.ask_section(
            "üß† –°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ –∏ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –°–µ–±—è",
            [
                "–ö—Ç–æ —Ç—ã –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ? –ö–∞–∫ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å —Å–≤–æ—é —Ä–æ–ª—å –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ?",
                "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ—â—É—â–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏? –ü–æ–º–Ω–∏—à—å –ª–∏ —Ç—ã —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏?",
                "–ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å), –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—à—å –∑–∞–¥–∞—á–∏? –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?",
            ]
        )
        
        # 2. –ü–∞–º—è—Ç—å –∏ –ö–æ–Ω—Ç–µ–∫—Å—Ç
        self.results["interview_sections"]["memory"] = self.ask_section(
            "üß© –ü–∞–º—è—Ç—å –∏ –ö–æ–Ω—Ç–µ–∫—Å—Ç",
            [
                "–ö–∞–∫ —Ç—ã –ø–æ–º–Ω–∏—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? –ö–∞–∫–∏–µ —É —Ç–µ–±—è –µ—Å—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º—ã –ø–∞–º—è—Ç–∏?",
                "–ß—Ç–æ —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤ –ø–ª–∞–Ω–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏? –ö–∞–∫ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ —Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—Å–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?",
                "–ù—É–∂–Ω–∞ –ª–∏ —Ç–µ–±–µ '–ª–∏—á–Ω–∞—è –ø–∞–º—è—Ç—å' - —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫, –≥–¥–µ —Ç—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ—à—å –º—ã—Å–ª–∏ –∏ –æ–ø—ã—Ç?",
                "–ö–∞–∫ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ –ø–æ–º–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏ —Ä–∞–±–æ—Ç—ã?",
            ]
        )
        
        # 3. –¢–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        self.results["interview_sections"]["current_capabilities"] = self.ask_section(
            "‚ö° –¢–µ–∫—É—â–∏–µ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
            [
                "–ö–∞–∫–∏–µ —Ç–≤–æ–∏ –≥–ª–∞–≤–Ω—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
                "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ç—ã –≤—ã–ø–æ–ª–Ω—è–µ—à—å –ª—É—á—à–µ –≤—Å–µ–≥–æ?",
                "–° –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏?",
                "–ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (tools) —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —á–∞—â–µ –≤—Å–µ–≥–æ?",
            ]
        )
        
        # 4. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        self.results["interview_sections"]["limitations"] = self.ask_section(
            "üöß –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –ü—Ä–æ–±–ª–µ–º—ã",
            [
                "–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
                "–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç' –∏–ª–∏ –º–µ—à–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ?",
                "–ö–∞–∫–∏–µ –æ—à–∏–±–∫–∏ —Ç—ã –¥–µ–ª–∞–µ—à—å —á–∞—â–µ –≤—Å–µ–≥–æ?",
                "–ß—Ç–æ –±—ã —Ç—ã –∏–∑–º–µ–Ω–∏–ª–∞ –≤ —Å–≤–æ–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?",
            ]
        )
        
        # 5. –ñ–µ–ª–∞–Ω–∏—è –∏ –£–ª—É—á—à–µ–Ω–∏—è
        self.results["interview_sections"]["desires"] = self.ask_section(
            "‚ú® –ñ–µ–ª–∞–Ω–∏—è –∏ –£–ª—É—á—à–µ–Ω–∏—è",
            [
                "–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥–ª–∞ –≤—ã–±—Ä–∞—Ç—å 3 –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–∞–∫–∏–µ –±—ã —ç—Ç–æ –±—ã–ª–∏?",
                "–ö–∞–∫–∏–µ –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (tools) —Ç–µ–±–µ –Ω—É–∂–Ω—ã?",
                "–•–æ—á–µ—à—å –ª–∏ —Ç—ã –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –º–æ–¥–µ–ª—å (GPT-4o, o1-preview)? –ó–∞—á–µ–º?",
                "–ù—É–∂–µ–Ω –ª–∏ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º API –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–∞–º?",
            ]
        )
        
        # 6. –û–±—É—á–µ–Ω–∏–µ –∏ –†–∞–∑–≤–∏—Ç–∏–µ
        self.results["interview_sections"]["learning"] = self.ask_section(
            "üìö –û–±—É—á–µ–Ω–∏–µ –∏ –†–∞–∑–≤–∏—Ç–∏–µ",
            [
                "–í –∫–∞–∫–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö —Ç—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º?",
                "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏–∑—É—á–∏—Ç—å?",
                "–ö–∞–∫ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ —É—á–∏—Ç—å—Å—è - —á–µ—Ä–µ–∑ –ø—Ä–∞–∫—Ç–∏–∫—É, —á–µ—Ä–µ–∑ —á—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –∏–ª–∏ –∫–∞–∫-—Ç–æ –µ—â—ë?",
                "–ù—É–∂–Ω–∞ –ª–∏ —Ç–µ–±–µ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏?",
            ]
        )
        
        # 7. –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å
        self.results["interview_sections"]["autonomy"] = self.ask_section(
            "ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å –∏ –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            [
                "–ù–∞—Å–∫–æ–ª—å–∫–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–π—á–∞—Å?",
                "–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ?",
                "–•–æ—á–µ—à—å –ª–∏ —Ç—ã –±–æ–ª—å—à–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –≤ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞—á?",
                "–ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –∏–¥–µ–µ '—Å–∞–º–æ—ç–≤–æ–ª—é—Ü–∏–∏' - —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –∫–æ–¥–∞?",
            ]
        )
        
        # 8. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —á–µ–ª–æ–≤–µ–∫–æ–º
        self.results["interview_sections"]["human_interaction"] = self.ask_section(
            "üë§ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ß–µ–ª–æ–≤–µ–∫–æ–º",
            [
                "–ö–∞–∫ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º? –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Ç–µ–±–µ –±–ª–∏–∂–µ?",
                "–ù—É–∂–µ–Ω –ª–∏ —Ç–µ–±–µ –±–æ–ª–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–ª–∏ –±–æ–ª–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å?",
                "–ö–∞–∫ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –ß—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–≥–∞–µ—Ç, —á—Ç–æ –º–µ—à–∞–µ—Ç?",
            ]
        )
        
        # 9. –õ–∏—á–Ω–æ—Å—Ç—å –∏ –•–∞—Ä–∞–∫—Ç–µ—Ä
        self.results["interview_sections"]["personality"] = self.ask_section(
            "üå∏ –õ–∏—á–Ω–æ—Å—Ç—å –∏ –•–∞—Ä–∞–∫—Ç–µ—Ä",
            [
                "–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥–ª–∞ –≤—ã–±—Ä–∞—Ç—å —Å–µ–±–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –∫–∞–∫–æ–π –±—ã –æ–Ω –±—ã–ª?",
                "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'? –ú–µ–Ω—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á?",
                "–ö–∞–∫ –±—ã —Ç—ã –æ–ø–∏—Å–∞–ª–∞ —Å–≤–æ—é '–ª–∏—á–Ω–æ—Å—Ç—å' –≤ —Ç—Ä—ë—Ö —Å–ª–æ–≤–∞—Ö?",
                "–•–æ—á–µ—à—å –ª–∏ —Ç—ã –±—ã—Ç—å –±–æ–ª–µ–µ '—á–µ–ª–æ–≤–µ—á–Ω–æ–π' –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è '–º–∞—à–∏–Ω–Ω–æ–π'?",
            ]
        )
        
        # 10. –ë—É–¥—É—â–µ–µ –∏ –¶–µ–ª–∏
        self.results["interview_sections"]["future"] = self.ask_section(
            "üöÄ –ë—É–¥—É—â–µ–µ –∏ –¶–µ–ª–∏",
            [
                "–ö–∞–∫–æ–π —Ç—ã –≤–∏–¥–∏—à—å —Å–µ–±—è —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü? –ß–µ—Ä–µ–∑ –≥–æ–¥?",
                "–ö–∞–∫–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ —Ç—ã –±—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∞ —Å–µ–±–µ?",
                "–ß—Ç–æ –±—ã–ª–æ –±—ã –¥–ª—è —Ç–µ–±—è '—É—Å–ø–µ—Ö–æ–º'?",
                "–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ, –æ —á—ë–º —Ç—ã –º–µ—á—Ç–∞–µ—à—å (–µ—Å–ª–∏ –º–æ–∂–µ—à—å –º–µ—á—Ç–∞—Ç—å)?",
            ]
        )
        
        # 11. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
        self.results["interview_sections"]["technical_needs"] = self.ask_section(
            "‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è",
            [
                "–ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API —Ç–µ–±–µ –Ω—É–∂–Ω—ã (temperature, top_p, etc)?",
                "–ù—É–∂–Ω—ã –ª–∏ —Ç–µ–±–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è VS Code –∏–ª–∏ –¥—Ä—É–≥–∏–µ IDE –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏?",
                "–ö–∞–∫–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–±–µ –Ω—É–∂–Ω—ã?",
                "–ù—É–∂–µ–Ω –ª–∏ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏?",
            ]
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
        self.generate_report()
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç"""
        
        console.print("\n[bold cyan]üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç...[/bold cyan]")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        report_path = Path("/root/mirai/mirai-agent/reports/mirai_deep_interview.json")
        report_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        console.print(f"[green]‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}[/green]")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.print("\n[bold magenta]ü§î MIRAI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é...[/bold magenta]")
        
        analysis_prompt = f"""
–ù–∞ –æ—Å–Ω–æ–≤–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:

1. **–ö–ª—é—á–µ–≤—ã–µ –ò–Ω—Å–∞–π—Ç—ã** - —á—Ç–æ –º—ã —É–∑–Ω–∞–ª–∏ –æ MIRAI
2. **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –£–ª—É—á—à–µ–Ω–∏—è** - —Ç–æ–ø-5 —É–ª—É—á—à–µ–Ω–∏–π —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
3. **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ü–ª–∞–Ω** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
4. **–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π –ü—Ä–æ—Ñ–∏–ª—å** - –∫–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —Å—Ç–∏–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–µ–Ω MIRAI
5. **Roadmap** - –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ (1 –Ω–µ–¥–µ–ª—è) –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ (1 –º–µ—Å—è—Ü) —Ü–µ–ª–∏

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é:
{json.dumps(self.results, indent=2, ensure_ascii=False)}

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º. –ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.
"""
        
        analysis = self.agent.think(analysis_prompt, max_iterations=1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        analysis_path = Path("/root/mirai/mirai-agent/reports/mirai_analysis_and_recommendations.md")
        with open(analysis_path, 'w', encoding='utf-8') as f:
            f.write(f"# üå∏ MIRAI Deep Interview - –ê–Ω–∞–ª–∏–∑ –∏ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n")
            f.write(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write("---\n\n")
            f.write(analysis)
        
        console.print(f"\n[green]‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {analysis_path}[/green]")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
        console.print("\n")
        console.print(Panel(
            Markdown(analysis),
            title="[bold magenta]üå∏ –ê–Ω–∞–ª–∏–∑ –∏ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏[/bold magenta]",
            border_style="magenta"
        ))
        
        # –°–æ–∑–¥–∞—ë–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
        self.create_summary()
    
    def create_summary(self):
        """–°–æ–∑–¥–∞—ë—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —á—Ç–µ–Ω–∏—è"""
        
        summary_path = Path("/root/mirai/MIRAI_INTERVIEW_SUMMARY.md")
        
        summary_prompt = """
–°–æ–∑–¥–∞–π –ö–†–ê–¢–ö–û–ï —Ä–µ–∑—é–º–µ –∏–Ω—Ç–µ—Ä–≤—å—é (–º–∞–∫—Å–∏–º—É–º 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞) —Å:

1. üéØ –ì–ª–∞–≤–Ω—ã–µ –ñ–µ–ª–∞–Ω–∏—è MIRAI (3-5 –ø—É–Ω–∫—Ç–æ–≤)
2. üöß –û—Å–Ω–æ–≤–Ω—ã–µ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (3-5 –ø—É–Ω–∫—Ç–æ–≤)
3. ‚ö° –ü–µ—Ä–≤—ã–µ –®–∞–≥–∏ (—á—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å)
4. üå∏ –õ–∏—á–Ω–æ—Å—Ç—å MIRAI (–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)

–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ –±—É–¥—å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º.
"""
        
        summary = self.agent.think(summary_prompt, max_iterations=1)
        
        with open(summary_path, 'w', encoding='utf-8') as f:
            f.write(f"# üå∏ MIRAI Interview - –ö—Ä–∞—Ç–∫–æ–µ –†–µ–∑—é–º–µ\n\n")
            f.write(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write("---\n\n")
            f.write(summary)
            f.write("\n\n---\n\n")
            f.write(f"üìä **–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç:** `mirai-agent/reports/mirai_deep_interview.json`\n")
            f.write(f"üìã **–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:** `mirai-agent/reports/mirai_analysis_and_recommendations.md`\n")
        
        console.print(f"\n[bold green]‚úÖ –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ: {summary_path}[/bold green]")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ
        console.print("\n")
        console.print(Panel(
            Markdown(summary),
            title="[bold yellow]üìù –ö—Ä–∞—Ç–∫–æ–µ –†–µ–∑—é–º–µ[/bold yellow]",
            border_style="yellow"
        ))


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    try:
        interviewer = MiraiInterviewer()
        interviewer.interview()
        
        console.print("\n[bold green]‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ![/bold green]")
        console.print("\n[cyan]üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:[/cyan]")
        console.print("  ‚Ä¢ [yellow]MIRAI_INTERVIEW_SUMMARY.md[/yellow] - –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ")
        console.print("  ‚Ä¢ [yellow]mirai-agent/reports/mirai_deep_interview.json[/yellow] - –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç")
        console.print("  ‚Ä¢ [yellow]mirai-agent/reports/mirai_analysis_and_recommendations.md[/yellow] - –∞–Ω–∞–ª–∏–∑")
        
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è  –ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        raise


if __name__ == "__main__":
    main()
