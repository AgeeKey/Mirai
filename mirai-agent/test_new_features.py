#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π MIRAI
- –ú–Ω–æ–≥–æ—è–∑—ã–∫–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, '/root/mirai/mirai-agent')

from core.multi_language_executor import MultiLanguageExecutor
from core.database_manager import DatabaseManager


async def test_languages():
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö"""
    print("=" * 70)
    print("üöÄ –¢–ï–°–¢ –ú–ù–û–ì–û–Ø–ó–´–ö–û–í–û–ì–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–î–ê")
    print("=" * 70)
    
    executor = MultiLanguageExecutor()
    
    tests = [
        {
            'name': 'Python',
            'code': 'print("Hello from Python!")\nprint(2 + 2)',
            'language': 'python'
        },
        {
            'name': 'JavaScript (Node.js)',
            'code': 'console.log("Hello from JavaScript!");\nconsole.log(2 + 2);',
            'language': 'javascript'
        },
        {
            'name': 'C++',
            'code': '''#include <iostream>
using namespace std;
int main() {
    cout << "Hello from C++!" << endl;
    cout << 2 + 2 << endl;
    return 0;
}''',
            'language': 'cpp'
        },
        {
            'name': 'Bash',
            'code': '''echo "Hello from Bash!"
expr 2 + 2''',
            'language': 'bash'
        },
    ]
    
    for test in tests:
        print(f"\n{'='*70}")
        print(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test['name']}")
        print(f"{'='*70}")
        
        result = await executor.execute_code(test['code'], test['language'])
        
        if result['success']:
            print(f"‚úÖ –£—Å–ø–µ—Ö! ({result['execution_time']}s)")
            print(f"–í—ã–≤–æ–¥:\n{result['output']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞:")
            print(result['error'])
    
    print(f"\n{'='*70}")
    print(f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: {', '.join(executor.get_supported_languages())}")
    print(f"{'='*70}")


async def test_databases():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n\n" + "=" * 70)
    print("üóÑÔ∏è –¢–ï–°–¢ –†–ê–ë–û–¢–´ –° –ë–ê–ó–ê–ú–ò –î–ê–ù–ù–´–•")
    print("=" * 70)
    
    db = DatabaseManager()
    
    # –¢–µ—Å—Ç SQLite
    print("\nüì¶ SQLite:")
    result = await db.sqlite_query("SELECT datetime('now') as current_time, 'MIRAI' as agent")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    # –¢–µ—Å—Ç Redis
    print("\nüî¥ Redis:")
    await db.redis_set('mirai_test', 'Hello from MIRAI!', expire=60)
    value = await db.redis_get('mirai_test')
    print(f"   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: 'mirai_test' = 'Hello from MIRAI!'")
    print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {value}")
    
    # –¢–µ—Å—Ç PostgreSQL
    print("\nüêò PostgreSQL:")
    result = await db.postgres_query("SELECT version()")
    if 'error' not in result[0]:
        print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! –í–µ—Ä—Å–∏—è: {result[0].get('version', 'unknown')[:50]}...")
    else:
        print(f"   ‚ö†Ô∏è {result[0]['error']}")
    
    # –¢–µ—Å—Ç MongoDB
    print("\nüçÉ MongoDB:")
    result = await db.mongodb_insert('test', {'message': 'Hello from MIRAI!', 'timestamp': 'now'})
    if 'error' not in result:
        print(f"   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω: ID={result.get('inserted_id')}")
        
        # –ù–∞–π–¥–µ–º –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ
        docs = await db.mongodb_find('test', {'message': 'Hello from MIRAI!'}, limit=1)
        if docs and 'error' not in docs[0]:
            print(f"   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {docs[0]}")
        else:
            print(f"   ‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"   ‚ö†Ô∏è {result['error']}")
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"\n{'='*70}")
    print("üìä –°–¢–ê–¢–£–° –í–°–ï–• –ë–ê–ó –î–ê–ù–ù–´–•:")
    print(f"{'='*70}")
    info = await db.get_database_info()
    for db_name, status in info.items():
        status_icon = "‚úÖ" if status['status'] == 'connected' else "‚ùå"
        print(f"{status_icon} {db_name.upper()}: {status['status']} - {status['details']}")
    print(f"{'='*70}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –¢–µ—Å—Ç —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        await test_languages()
        
        # –¢–µ—Å—Ç –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        await test_databases()
        
        print("\n\n" + "=" * 70)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
        print("=" * 70)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    asyncio.run(main())
