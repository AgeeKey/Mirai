#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –ú–ò–†–ê–ô
"""

import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent))

from core.autonomous_agent import AutonomousAgent
from core.self_evolution import SelfEvolutionSystem


def test_evolution_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è"""

    print("=" * 70)
    print("üß¨ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –°–ê–ú–û–†–ê–ó–í–ò–¢–ò–Ø –ú–ò–†–ê–ô")
    print("=" * 70)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...")
    agent = AutonomousAgent()

    print("2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è...")
    evolution = SelfEvolutionSystem(agent)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    status = evolution.get_status()
    print(f"   –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –±–∞–∑–µ: {status['knowledge']['technologies']}")
    print(f"   –ù–∞–≤—ã–∫–æ–≤: {status['knowledge']['skills']}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {status['projects']['active']}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–ª–µ–π
    print("\n4Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–ª–µ–π —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è...")
    goals = evolution.goal_generator.generate_goals(count=5)
    print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ü–µ–ª–µ–π: {len(goals)}")

    for i, goal in enumerate(goals[:3], 1):
        print(f"\n   –¶–µ–ª—å #{i}:")
        print(f"     ‚Ä¢ –¢–∏–ø: {goal['type']}")
        print(f"     ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {goal['description']}")
        print(f"     ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {goal['priority']:.2f}")
        if "technology" in goal:
            print(f"     ‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è: {goal['technology']}")
            print(f"     ‚Ä¢ –û–±–ª–∞—Å—Ç—å: {goal['area']}")

    # –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è
    print("\n5Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è...")
    print("   (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥...)")

    result = evolution.evolution_cycle()

    print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¶–ò–ö–õ–ê:")
    print(f"   ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ü–µ–ª–µ–π: {result['goals_generated']}")
    print(f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±—É—á–µ–Ω–∏–π: {result['learning_completed']}")
    print(f"   ‚Ä¢ –°–¥–µ–ª–∞–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {result['improvements_made']}")
    print(f"   ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(result['projects_progress'])}")

    if result["projects_progress"]:
        print("\n   üìä –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:")
        for progress in result["projects_progress"]:
            print(f"     ‚Ä¢ {progress.get('project', 'Unknown')[:50]}")
            print(f"       –î–µ–π—Å—Ç–≤–∏–µ: {progress.get('action', 'N/A')}")
            print(f"       –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress.get('progress', 0) * 100:.0f}%")

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print("\n6Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
    final_status = evolution.get_status()

    print(f"\n   üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:")
    print(f"     ‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–π: {final_status['knowledge']['technologies']}")
    print(f"     ‚Ä¢ –ù–∞–≤—ã–∫–æ–≤: {final_status['knowledge']['skills']}")
    print(f"     ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {final_status['knowledge']['completed_tasks']}")

    print(f"\n   üéØ –ü—Ä–æ–µ–∫—Ç—ã:")
    print(f"     ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {final_status['projects']['active']}")
    print(f"     ‚Ä¢ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö: {final_status['projects']['completed']}")

    print(f"\n   üîß –°–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: {final_status['modifications']}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    print("\n7Ô∏è‚É£ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:")
    kb_path = Path("data/state/knowledge_base.json")

    if kb_path.exists():
        with open(kb_path) as f:
            kb_data = json.load(f)

        print(f"\n   –ò–∑—É—á–µ–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: {len(kb_data.get('technologies', []))}")
        for tech in kb_data.get("technologies", [])[:5]:
            print(f"     ‚Ä¢ {tech['name']} (—É—Ä–æ–≤–µ–Ω—å: {tech['proficiency']:.2f})")

        if len(kb_data.get("technologies", [])) > 5:
            print(f"     ... –∏ –µ—â—ë {len(kb_data['technologies']) - 5}")

    print("\n" + "=" * 70)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù")
    print("=" * 70)

    print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print(f"   ‚Ä¢ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {kb_path}")
    print(f"   ‚Ä¢ –û–±—É—á–∞—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã: learning/")

    print("\nüí° –ö–æ–º–∞–Ω–¥—ã Telegram –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    print("   /status –∏–ª–∏ /—Å—Ç–∞—Ç—É—Å - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    print("   /evolve –∏–ª–∏ /—Ä–∞–∑–≤–∏–≤–∞–π—Å—è - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è")
    print("   /toggle_evolution - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ")


if __name__ == "__main__":
    try:
        test_evolution_system()
    except KeyboardInterrupt:
        print("\n\n‚å®Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback

        traceback.print_exc()
