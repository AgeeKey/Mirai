const API_BASE = 'http://localhost:8000';

// Theme management
function toggleTheme() {
    const body = document.body;
    const themeIcon = document.querySelector('.theme-icon');
    
    if (body.classList.contains('dark-theme')) {
        body.classList.remove('dark-theme');
        body.classList.add('light-theme');
        themeIcon.textContent = '‚òÄÔ∏è';
        localStorage.setItem('theme', 'light');
    } else {
        body.classList.remove('light-theme');
        body.classList.add('dark-theme');
        themeIcon.textContent = 'üåô';
        localStorage.setItem('theme', 'dark');
    }
}

// Load saved theme on page load
function loadTheme() {
    const savedTheme = localStorage.getItem('theme') || 'dark';
    const body = document.body;
    const themeIcon = document.querySelector('.theme-icon');
    
    if (savedTheme === 'light') {
        body.classList.remove('dark-theme');
        body.classList.add('light-theme');
        themeIcon.textContent = '‚òÄÔ∏è';
    } else {
        body.classList.add('dark-theme');
        themeIcon.textContent = 'üåô';
    }
}

function scrollToDashboard() {
    document.getElementById('dashboard').scrollIntoView({ behavior: 'smooth' });
}

async function refreshStatus() {
    try {
        const response = await fetch(`${API_BASE}/health`);
        const data = await response.json();
        
        updateStatusCard('agent-status', 
            data.agent_running ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            data.agent_running ? 'success' : 'warning'
        );
        
        updateStatusCard('ai-engine-status',
            data.agent_running ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ö†Ô∏è –ù–µ–∞–∫—Ç–∏–≤–µ–Ω',
            data.agent_running ? 'success' : 'warning'
        );
        
        updateStatusCard('trader-status',
            data.components?.trader ? '‚úÖ –¢–æ—Ä–≥—É–µ—Ç' : '‚ö†Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ',
            data.components?.trader ? 'success' : 'warning'
        );
        
        updateStatusCard('api-status',
            data.status === 'healthy' ? '‚úÖ –û–Ω–ª–∞–π–Ω' : '‚ùå –û—Ñ—Ñ–ª–∞–π–Ω',
            data.status === 'healthy' ? 'success' : 'error'
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        updateAllCardsError();
    }
    
    await refreshStats();
}

function updateStatusCard(id, text, status) {
    const card = document.getElementById(id);
    if (!card) return;
    
    const indicator = card.querySelector('.status-indicator');
    if (indicator) {
        indicator.textContent = text;
        indicator.className = 'status-indicator status-' + status;
    }
}

function updateAllCardsError() {
    const cards = ['agent-status', 'ai-engine-status', 'trader-status', 'api-status'];
    cards.forEach(id => updateStatusCard(id, '‚ùå –û—à–∏–±–∫–∞', 'error'));
}

async function refreshStats() {
    try {
        const response = await fetch(`${API_BASE}/stats`);
        const data = await response.json();
        
        // Update tasks
        const tasksContainer = document.getElementById('tasks-container');
        const tasks = data.tasks || [];
        if (tasks.length === 0) {
            tasksContainer.innerHTML = '<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</p>';
        } else {
            tasksContainer.innerHTML = tasks.map(task => 
                `<div class="task-item">üìå ${task.name || task}</div>`
            ).join('');
        }
        
        // Update statistics
        const statsContainer = document.getElementById('stats-container');
        const agentData = data.agent || {};
        statsContainer.innerHTML = `
            <div class="stat-box">
                <h4>–í—Å–µ–≥–æ –ó–∞–¥–∞—á</h4>
                <p>${agentData.tasks_total || 0}</p>
            </div>
            <div class="stat-box">
                <h4>–ó–∞–≤–µ—Ä—à–µ–Ω–æ</h4>
                <p>${agentData.tasks_completed || 0}</p>
            </div>
            <div class="stat-box">
                <h4>–í –û–∂–∏–¥–∞–Ω–∏–∏</h4>
                <p>${agentData.tasks_pending || 0}</p>
            </div>
            <div class="stat-box">
                <h4>–ü—Ä–æ–≥—Ä–µ—Å—Å –û–±—É—á–µ–Ω–∏—è</h4>
                <p>${agentData.learning_progress || 0}%</p>
            </div>
            <div class="stat-box">
                <h4>–ë–∞–ª–∞–Ω—Å</h4>
                <p>$${agentData.balance || 10000}</p>
            </div>
            <div class="stat-box">
                <h4>–í—Ä–µ–º—è –†–∞–±–æ—Ç—ã</h4>
                <p>${agentData.uptime || 'N/A'}</p>
            </div>
        `;
        
        // Update logs
        updateLogs(data.logs || []);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

function updateLogs(logs) {
    const logsContainer = document.getElementById('logs-container');
    if (!logs || logs.length === 0) {
        logsContainer.innerHTML = '<p>–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤</p>';
        return;
    }
    
    logsContainer.innerHTML = logs.slice(-10).map(log => 
        `<div class="log-entry">${log.timestamp || ''} ${log.message || log}</div>`
    ).join('');
}

// Live log updates
setInterval(async () => {
    try {
        const response = await fetch(`${API_BASE}/stats`);
        const data = await response.json();
        if (data.logs) {
            updateLogs(data.logs);
        }
    } catch (error) {
        // Silently fail for live updates
    }
}, 3000);

function executeTask() {
    const taskName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:');
    if (taskName) {
        alert(`‚úÖ –ó–∞–¥–∞—á–∞ "${taskName}" –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å!`);
        setTimeout(refreshStatus, 2000);
    }
}

function viewLogs() {
    window.open('/logs', '_blank');
}

function openTelegram() {
    alert('üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram –±–æ—Ç–µ:\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /status –±–æ—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!\n\n–ö–æ–º–∞–Ω–¥—ã:\n/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n/tasks - –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏\n/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
}

// Initialize dashboard
document.addEventListener('DOMContentLoaded', () => {
    loadTheme();
    refreshStatus();
    setInterval(refreshStatus, 5000);
});
