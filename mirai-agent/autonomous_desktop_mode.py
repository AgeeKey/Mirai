#!/usr/bin/env python3
"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  MIRAI AUTONOMOUS DESKTOP MODE - –ü–û–õ–ù–´–ô –ö–û–ù–¢–†–û–õ–¨ –ù–ê–î –ö–û–ú–ü–¨–Æ–¢–ï–†–û–ú    ‚ïë
‚ïë  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ—â–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

MIRAI –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è:
- –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞—á–∏
- –ò–∑—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —á–µ—Ä–µ–∑ Google Chrome
- –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
- –£–ª—É—á—à–∞–µ—Ç —Å–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
- –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞

–ê–≤—Ç–æ—Ä: MIRAI Team
–î–∞—Ç–∞: 2024-10-24
"""

import asyncio
import json
import logging
import os
import random
import time
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List

from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("autonomous_desktop.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class AutonomousDesktopMirai:
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π MIRAI —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –Ω–∞–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ              MIRAI AUTONOMOUS DESKTOP AGENT                 ‚îÇ
    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
    ‚îÇ  üß† AI Brain (GPT-4o)  ‚îÇ  üñ•Ô∏è Desktop Control              ‚îÇ
    ‚îÇ  üîç Web Research       ‚îÇ  üíª Code Development             ‚îÇ
    ‚îÇ  üìä Data Analysis      ‚îÇ  üóÑÔ∏è Database Management          ‚îÇ
    ‚îÇ  üåê Browser Control    ‚îÇ  üìÅ File System Access           ‚îÇ
    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
    ‚îÇ            CONTINUOUS LEARNING & IMPROVEMENT                ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        logger.info("=" * 70)
        logger.info("üöÄ –ó–ê–ü–£–°–ö MIRAI AUTONOMOUS DESKTOP MODE")
        logger.info("=" * 70)
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á–∏
        self.api_keys = self._load_api_keys()
        self.client = OpenAI(api_key=self.api_keys.get("openai"))
        self.model = "gpt-4o"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
        self._init_modules()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        self.is_running = False
        self.tasks_completed = 0
        self.learning_data = []
        self.projects_created = []
        self.technologies_learned = []
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
        self.workspace_dir = Path("mirai_workspace")
        self.workspace_dir.mkdir(exist_ok=True)
        
        self.projects_dir = self.workspace_dir / "projects"
        self.projects_dir.mkdir(exist_ok=True)
        
        self.learning_dir = self.workspace_dir / "learning"
        self.learning_dir.mkdir(exist_ok=True)
        
        logger.info("‚úÖ MIRAI AUTONOMOUS DESKTOP MODE –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.workspace_dir.absolute()}")
    
    def _load_api_keys(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á–∏"""
        config_path = Path(__file__).parent / "configs" / "api_keys.json"
        
        if config_path.exists():
            with open(config_path, encoding='utf-8') as f:
                return json.load(f)
        
        return {"openai": os.getenv("OPENAI_API_KEY")}
    
    def _init_modules(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...")
        
        # Desktop Agent
        try:
            from core.desktop_agent_v2 import MiraiDesktopAgent
            self.desktop = MiraiDesktopAgent(
                enable_safety=False,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–≤–æ–±–æ–¥–∞
                enable_memory=True,
                user_id="autonomous_mirai"
            )
            logger.info("‚úÖ Desktop Agent: –ê–∫—Ç–∏–≤–µ–Ω (Safety: OFF)")
        except Exception as e:
            logger.error(f"‚ùå Desktop Agent: {e}")
            self.desktop = None
        
        # Code Executor
        try:
            from core.multi_language_executor import MultiLanguageExecutor
            self.code_executor = MultiLanguageExecutor()
            logger.info("‚úÖ Code Executor: –ê–∫—Ç–∏–≤–µ–Ω (8 —è–∑—ã–∫–æ–≤)")
        except Exception as e:
            logger.error(f"‚ùå Code Executor: {e}")
            self.code_executor = None
        
        # Browser Automation
        try:
            from core.browser_automation import BrowserAutomation
            self.browser = BrowserAutomation(headless=False)
            logger.info("‚úÖ Browser: –ê–∫—Ç–∏–≤–µ–Ω (Chrome —Å UI)")
        except Exception as e:
            logger.error(f"‚ùå Browser: {e}")
            self.browser = None
        
        # Web Search
        try:
            from core.web_search_integration import get_web_search
            self.web_search = get_web_search()
            logger.info("‚úÖ Web Search: –ê–∫—Ç–∏–≤–µ–Ω (OpenAI)")
        except Exception as e:
            logger.error(f"‚ùå Web Search: {e}")
            self.web_search = None
        
        # Database Manager
        try:
            from core.database_manager import DatabaseManager
            self.database = DatabaseManager()
            logger.info("‚úÖ Database: –ê–∫—Ç–∏–≤–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå Database: {e}")
            self.database = None
        
        # Memory Manager
        try:
            from core.memory_manager import get_memory_manager, Message
            self.memory = get_memory_manager()
            self.session = self.memory.create_session(user_id="autonomous_mirai")
            logger.info(f"‚úÖ Memory: –ê–∫—Ç–∏–≤–Ω–∞ (session: {self.session.id})")
        except Exception as e:
            logger.error(f"‚ùå Memory: {e}")
            self.memory = None
    
    async def run_autonomous(self):
        """
        –ì–ª–∞–≤–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ü–∏–∫–ª
        
        MIRAI –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ:
        1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
        2. –í—ã–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è
        3. –ò–∑—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
        4. –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        5. –£–ª—É—á—à–∞–µ—Ç —Å–≤–æ–π –∫–æ–¥
        6. –ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ü–∏–∫–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        """
        self.is_running = True
        logger.info("=" * 70)
        logger.info("ü§ñ MIRAI AUTONOMOUS MODE: –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
        logger.info("üí™ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –≤–∫–ª—é—á–µ–Ω")
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è...")
        logger.info("=" * 70)
        
        iteration = 0
        
        while self.is_running:
            iteration += 1
            logger.info(f"\n{'='*70}")
            logger.info(f"üîÑ –¶–ò–ö–õ #{iteration} | –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {self.tasks_completed}")
            logger.info(f"{'='*70}")
            
            try:
                # –®–ê–ì 1: –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
                logger.info("\nüìä –®–ê–ì 1: –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
                computer_data = await self._analyze_computer()
                
                # –®–ê–ì 2: –í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è
                logger.info("\nüéØ –®–ê–ì 2: –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è")
                task = await self._choose_development_task(computer_data)
                
                # –®–ê–ì 3: –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É
                logger.info(f"\nüíª –®–ê–ì 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task}")
                result = await self._execute_autonomous_task(task)
                
                # –®–ê–ì 4: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                logger.info("\nüìà –®–ê–ì 4: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ–±—É—á–µ–Ω–∏–µ")
                await self._analyze_and_learn(task, result)
                
                # –®–ê–ì 5: –£–ª—É—á—à–∏—Ç—å —Å–µ–±—è
                logger.info("\nüöÄ –®–ê–ì 5: –°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ")
                await self._self_improve()
                
                self.tasks_completed += 1
                
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                logger.info(f"\n‚úÖ –¶–∏–∫–ª #{iteration} –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(30)
                
            except KeyboardInterrupt:
                logger.info("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                self.is_running = False
                break
            
            except Exception as e:
                logger.error(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{iteration}: {e}", exc_info=True)
                logger.info("‚è≥ –ü–∞—É–∑–∞ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                await asyncio.sleep(60)
        
        logger.info("\n" + "=" * 70)
        logger.info("üõë MIRAI AUTONOMOUS MODE: –û–°–¢–ê–ù–û–í–õ–ï–ù")
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.tasks_completed} –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        logger.info("=" * 70)
    
    async def _analyze_computer(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–º–ø—å—é—Ç–µ—Ä...")
        
        data = {
            "timestamp": datetime.now().isoformat(),
            "screen_analysis": None,
            "open_windows": [],
            "browser_tabs": [],
            "file_system": [],
            "system_info": {}
        }
        
        try:
            if self.desktop:
                # –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —ç–∫—Ä–∞–Ω–∞
                learning_data = self.desktop.collect_learning_data()
                data["screen_analysis"] = learning_data.get("screen_analysis")
                data["open_windows"] = learning_data.get("open_windows", [])
                
                logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ: {len(data['open_windows'])} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            if self.workspace_dir.exists():
                data["file_system"] = [
                    str(f.relative_to(self.workspace_dir))
                    for f in self.workspace_dir.rglob("*")
                    if f.is_file()
                ][:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–º 50 —Ñ–∞–π–ª–∞–º–∏
                
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(data['file_system'])} —Ñ–∞–π–ª–æ–≤ –≤ workspace")
            
            return data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {e}")
            return data
    
    async def _choose_development_task(self, computer_data: Dict) -> str:
        """–í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è"""
        logger.info("ü§î MIRAI –≤—ã–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞—á—É...")
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á
        task_categories = [
            "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
            "–°–æ–∑–¥–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
            "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é",
            "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥",
            "–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ API",
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª—å",
            "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å",
            "–°–æ–∑–¥–∞—Ç—å CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ —Å–∏–º—É–ª—è—Ü–∏—é"
        ]
        
        prompt = f"""–¢—ã MIRAI - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π AI –∞–≥–µ–Ω—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –Ω–∞–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.

–¢–í–û–Ø –¶–ï–õ–¨: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ö–û–ú–ü–¨–Æ–¢–ï–†–ê:
- –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω: {len(computer_data.get('open_windows', []))}
- –§–∞–π–ª–æ–≤ –≤ workspace: {len(computer_data.get('file_system', []))}
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {self.tasks_completed}
- –ò–∑—É—á–µ–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: {len(self.technologies_learned)}
- –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(self.projects_created)}

–î–û–°–¢–£–ü–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ó–ê–î–ê–ß:
{chr(10).join(f'{i+1}. {cat}' for i, cat in enumerate(task_categories))}

–í–´–ë–ï–†–ò –ö–û–ù–ö–†–ï–¢–ù–£–Æ –ó–ê–î–ê–ß–£ –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è:
1. –ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π
2. –î–æ–ª–∂–Ω–∞ –ø–æ–º–æ—á—å –∏–∑—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ
3. –î–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–µ (–∫–æ–¥, –ø—Ä–æ–µ–∫—Ç, –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
4. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–∏–º–∞ –∑–∞ 10-30 –º–∏–Ω—É—Ç
5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ç–æ, —á—Ç–æ –µ—â–µ –Ω–µ –∏–∑—É—á–∞–ª

–û–ø–∏—à–∏ –ö–û–ù–ö–†–ï–¢–ù–£–Æ –∑–∞–¥–∞—á—É –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º (–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!)."""

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã MIRAI - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π AI –∞–≥–µ–Ω—Ç. –í—ã–±–∏—Ä–∞–µ—à—å –ö–û–ù–ö–†–ï–¢–ù–´–ï –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.9,  # –í—ã—Å–æ–∫–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
                max_tokens=150
            )
            
            task = response.choices[0].message.content.strip()
            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task}")
            
            return task
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏: {e}")
            # Fallback: —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–∞—á–∞
            return random.choice(task_categories)
    
    async def _execute_autonomous_task(self, task: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–Ω–æ–º–Ω–æ"""
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {task}")
        
        result = {
            "task": task,
            "success": False,
            "steps": [],
            "created_files": [],
            "learned": [],
            "errors": []
        }
        
        try:
            # –†–∞–∑–±–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —à–∞–≥–∏
            steps = await self._plan_task_execution(task)
            logger.info(f"üìã –ü–ª–∞–Ω –∏–∑ {len(steps)} —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞–Ω")
            
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∂–¥—ã–π —à–∞–≥
            for i, step in enumerate(steps, 1):
                logger.info(f"\n‚ñ∂Ô∏è –®–∞–≥ {i}/{len(steps)}: {step}")
                
                step_result = await self._execute_step(step)
                result["steps"].append({
                    "step": step,
                    "result": step_result
                })
                
                if step_result.get("success"):
                    logger.info(f"‚úÖ –®–∞–≥ {i} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning(f"‚ö†Ô∏è –®–∞–≥ {i} –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
                
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
                await asyncio.sleep(5)
            
            result["success"] = True
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            result["errors"].append(str(e))
        
        return result
    
    async def _plan_task_execution(self, task: str) -> List[str]:
        """–°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        prompt = f"""–ó–∞–¥–∞—á–∞: {task}

–†–∞–∑–¥–µ–ª–∏ —ç—Ç—É –∑–∞–¥–∞—á—É –Ω–∞ 3-7 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
–ö–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
–®–∞–≥ 1
–®–∞–≥ 2
..."""

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–µ—à—å —á–µ—Ç–∫–∏–µ –ø–ª–∞–Ω—ã –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–æ–≤."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=300
            )
            
            steps_text = response.choices[0].message.content.strip()
            steps = [s.strip() for s in steps_text.split('\n') if s.strip()]
            
            return steps[:7]  # –ú–∞–∫—Å–∏–º—É–º 7 —à–∞–≥–æ–≤
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return ["–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"]
    
    async def _execute_step(self, step: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —à–∞–≥ –∑–∞–¥–∞—á–∏"""
        result = {
            "success": False,
            "action": None,
            "output": None
        }
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            step_lower = step.lower()
            
            # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if any(word in step_lower for word in ['–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–∏–∑—É—á–∏—Ç—å', '—É–∑–Ω–∞—Ç—å', '–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å']):
                if self.web_search:
                    logger.info("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...")
                    query = step
                    search_result = self.web_search.search(query)
                    
                    result["action"] = "web_search"
                    result["output"] = search_result
                    result["success"] = True
            
            # –†–∞–±–æ—Ç–∞ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
            elif any(word in step_lower for word in ['–æ—Ç–∫—Ä–æ–π', '–±—Ä–∞—É–∑–µ—Ä', '—Å–∞–π—Ç', '—Å—Ç—Ä–∞–Ω–∏—Ü']):
                if self.browser and self.desktop:
                    logger.info("üåê –†–∞–±–æ—Ç–∞—é —Å –±—Ä–∞—É–∑–µ—Ä–æ–º...")
                    # –û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ desktop agent
                    browser_result = self.desktop.execute_task(step, max_iterations=5)
                    
                    result["action"] = "browser"
                    result["output"] = browser_result
                    result["success"] = True
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞
            elif any(word in step_lower for word in ['—Å–æ–∑–¥–∞–π', '–Ω–∞–ø–∏—à–∏', '–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º', '—Å–∫—Ä–∏–ø—Ç']):
                if self.code_executor:
                    logger.info("üíª –°–æ–∑–¥–∞—é –∫–æ–¥...")
                    
                    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫
                    language = "python"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if "javascript" in step_lower or "js" in step_lower:
                        language = "javascript"
                    elif "go" in step_lower:
                        language = "go"
                    elif "rust" in step_lower:
                        language = "rust"
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —á–µ—Ä–µ–∑ AI
                    code = await self._generate_code(step, language)
                    
                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
                    filename = f"generated_{int(time.time())}.{language}"
                    filepath = self.projects_dir / filename
                    
                    with open(filepath, 'w', encoding='utf-8') as f:
                        f.write(code)
                    
                    logger.info(f"üìÅ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
                    
                    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –µ—Å–ª–∏ —ç—Ç–æ Python
                    if language == "python":
                        exec_result = self.code_executor.execute(language, code)
                        result["output"] = exec_result
                    
                    result["action"] = "create_code"
                    result["success"] = True
            
            # –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
            elif any(word in step_lower for word in ['—Ñ–∞–π–ª', '—Å–æ—Ö—Ä–∞–Ω', '—Å–æ–∑–¥–∞–π']):
                logger.info("üìÅ –†–∞–±–æ—Ç–∞—é —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π...")
                result["action"] = "file_operation"
                result["success"] = True
            
            # –û–±—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ desktop agent
            else:
                if self.desktop:
                    logger.info("üñ•Ô∏è –í—ã–ø–æ–ª–Ω—è—é —á–µ—Ä–µ–∑ desktop agent...")
                    desktop_result = self.desktop.execute_task(step, max_iterations=5)
                    
                    result["action"] = "desktop"
                    result["output"] = desktop_result
                    result["success"] = True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞: {e}")
            result["output"] = str(e)
        
        return result
    
    async def _generate_code(self, task: str, language: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        prompt = f"""–°–æ–∑–¥–∞–π {language} –∫–æ–¥ –¥–ª—è: {task}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–±–æ—á–∏–º –∏ –ø–æ–ª–Ω—ã–º
2. –î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
3. –ò—Å–ø–æ–ª—å–∑—É–π –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
4. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é

–ù–∞–ø–∏—à–∏ –¢–û–õ–¨–ö–û –∫–æ–¥, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": f"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ {language}. –ü–∏—à–µ—à—å —á–∏—Å—Ç—ã–π, —Ä–∞–±–æ—á–∏–π –∫–æ–¥."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=1500
            )
            
            code = response.choices[0].message.content.strip()
            
            # –£–±—Ä–∞—Ç—å markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if code.startswith("```"):
                lines = code.split('\n')
                code = '\n'.join(lines[1:-1])
            
            return code
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
            return f"# Error generating code: {e}"
    
    async def _analyze_and_learn(self, task: str, result: Dict):
        """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±—É—á–∏—Ç—å—Å—è"""
        logger.info("üìö –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É—á—É—Å—å...")
        
        try:
            # –ò–∑–≤–ª–µ—á—å —É—Ä–æ–∫–∏
            lessons = []
            
            if result.get("success"):
                lessons.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª: {task}")
            else:
                lessons.append(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏: {task}")
            
            # –ß—Ç–æ —Å–æ–∑–¥–∞–Ω–æ
            if result.get("created_files"):
                lessons.append(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(result['created_files'])}")
            
            # –ß—Ç–æ –∏–∑—É—á–µ–Ω–æ
            if result.get("learned"):
                for item in result["learned"]:
                    if item not in self.technologies_learned:
                        self.technologies_learned.append(item)
                        lessons.append(f"üéì –ò–∑—É—á–µ–Ω–æ: {item}")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
            learning_entry = {
                "timestamp": datetime.now().isoformat(),
                "task": task,
                "result": result.get("success"),
                "lessons": lessons,
                "steps_completed": len(result.get("steps", []))
            }
            
            self.learning_data.append(learning_entry)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
            learning_file = self.learning_dir / "learning_log.json"
            with open(learning_file, 'w', encoding='utf-8') as f:
                json.dump(self.learning_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(lessons)} —É—Ä–æ–∫–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    async def _self_improve(self):
        """–£–ª—É—á—à–∏—Ç—å —Å–≤–æ–π –∫–æ–¥ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        logger.info("üîß –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è...")
        
        try:
            # –ö–∞–∂–¥—ã–µ 5 –∑–∞–¥–∞—á - –ø—Ä–æ–±–æ–≤–∞—Ç—å —É–ª—É—á—à–∏—Ç—å —Å–µ–±—è
            if self.tasks_completed > 0 and self.tasks_completed % 5 == 0:
                logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è...")
                
                # –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–¥
                improvement_ideas = await self._generate_improvement_ideas()
                
                if improvement_ideas:
                    logger.info(f"üí° –ù–∞–π–¥–µ–Ω–æ {len(improvement_ideas)} –∏–¥–µ–π —É–ª—É—á—à–µ–Ω–∏—è")
                    
                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ–∏
                    ideas_file = self.workspace_dir / "improvement_ideas.json"
                    with open(ideas_file, 'w', encoding='utf-8') as f:
                        json.dump(improvement_ideas, f, indent=2, ensure_ascii=False)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è: {e}")
    
    async def _generate_improvement_ideas(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"""
        prompt = f"""–¢—ã MIRAI - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π AI –∞–≥–µ–Ω—Ç.

–°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {self.tasks_completed}
- –ò–∑—É—á–µ–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: {len(self.technologies_learned)}
- –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(self.projects_created)}

–ü—Ä–µ–¥–ª–æ–∂–∏ 3-5 —Å–ø–æ—Å–æ–±–æ–≤ –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å —É–ª—É—á—à–∏—Ç—å:
1. –°–≤–æ–π –∫–æ–¥ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
2. –°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
3. –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
4. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è

–ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."""

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—é AI —Å–∏—Å—Ç–µ–º."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.8,
                max_tokens=400
            )
            
            ideas_text = response.choices[0].message.content.strip()
            ideas = [s.strip() for s in ideas_text.split('\n') if s.strip()]
            
            return ideas
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π: {e}")
            return []


async def main():
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë  MIRAI AUTONOMOUS DESKTOP MODE - –ü–û–õ–ù–´–ô –ö–û–ù–¢–†–û–õ–¨ –ù–ê–î –ö–û–ú–ü–¨–Æ–¢–ï–†–û–ú    ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print()
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: MIRAI –ø–æ–ª—É—á–∏—Ç –ü–û–õ–ù–´–ô –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤–∞—à–∏–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º")
    print("‚ö†Ô∏è  –ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ:")
    print("    ‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –º—ã—à—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π")
    print("    ‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –∏ –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    print("    ‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã")
    print("    ‚Ä¢ –í—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥")
    print("    ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω")
    print()
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print()
    
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞... ")
    print()
    
    # –°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
    mirai = AutonomousDesktopMirai()
    
    try:
        await mirai.run_autonomous()
    except KeyboardInterrupt:
        print("\n\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    print("\n‚úÖ MIRAI AUTONOMOUS DESKTOP MODE –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
