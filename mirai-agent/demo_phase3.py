#!/usr/bin/env python3
"""
üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –§–ê–ó–´ 3: TASK PLANNING
=====================================

–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent))

from core.task_planning import TaskPlanningSystem

print("=" * 70)
print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –§–ê–ó–ê 3 - TASK PLANNING")
print("=" * 70)
print()

# –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
print("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
planner = TaskPlanningSystem()
print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
print()

# –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞
print("=" * 70)
print("–ü–†–ò–ú–ï–† 1: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞")
print("=" * 70)

result = planner.plan_task(
    user_task="–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python"
)

if result.success:
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
    print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"      - –¢–∏–ø: {result.parsed_task.task_type.value}")
    print(f"      - –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result.parsed_task.complexity.name}")
    print(f"      - –ü–æ–¥–∑–∞–¥–∞—á: {len(result.subtasks)}")
    print(f"      - –í—Ä–µ–º—è: {result.execution_plan['total_duration']:.1f}—Å")
    print(f"      - Checkpoints: {len(result.execution_plan.get('checkpoints', []))}")
    print()
    print(f"   üìù –ü–æ–¥–∑–∞–¥–∞—á–∏:")
    for i, subtask in enumerate(result.subtasks[:5], 1):
        print(f"      {i}. {subtask.name}")
    print()
else:
    print("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å")
    for error in result.errors:
        print(f"   - {error}")

print()

# –ü—Ä–∏–º–µ—Ä 2: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
print("=" * 70)
print("–ü–†–ò–ú–ï–† 2: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
print("=" * 70)

result2 = planner.plan_task(
    user_task="–£–¥–∞–ª–∏ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
    optimization_goals={
        'time': 0.2,
        'resources': 0.2,
        'safety': 0.6  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    }
)

if result2.success:
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
    print(f"   üìä –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤: {result2.parsed_task.risk_level.value}")
    print(f"   üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    
    safety_checks = [
        t for t in result2.execution_plan.get('tasks', [])
        if t.get('type') == 'safety_check'
    ]
    print(f"      - Safety checks: {len(safety_checks)}")
    
    checkpoints = result2.execution_plan.get('checkpoints', [])
    print(f"      - Checkpoints: {len(checkpoints)}")
    
    print()
    print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è:")
    for check_name, check_result in result2.validation_results.items():
        status = "‚úÖ" if check_result.valid else "‚ùå"
        print(f"      {status} {check_name.capitalize()}: {check_result.score:.2f}")
    print()
else:
    print("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å")

# –ü—Ä–∏–º–µ—Ä 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print("=" * 70)
print("–ü–†–ò–ú–ï–† 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
print("=" * 70)

stats = planner.get_statistics()
print(f"üìà {stats['name']}")
print(f"   –í–µ—Ä—Å–∏—è: {stats['version']}")
print(f"   –í—Å–µ–≥–æ —à–∞–≥–æ–≤: {stats['total_steps']}")
print()
print(f"   üìÇ –†–∞–∑–¥–µ–ª—ã:")
for section, steps in stats['sections'].items():
    print(f"      - {section}: {steps}")
print()
print(f"   üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
for category, count in stats['components'].items():
    print(f"      - {category}: {count}")
print()

print("=" * 70)
print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
print("=" * 70)
print()
print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:")
print("   python test_phase3_planning.py")
print()
print("üìö –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:")
print("   cat PHASE3_TASK_PLANNING_README.md")
print()
