#!/usr/bin/env python3
"""
üîç –¢–µ—Å—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π MIRAI
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –∫–∞–∫–∏–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
"""

import json
import sys
sys.path.insert(0, "/root/mirai/mirai-agent")

from core.autonomous_agent import AutonomousAgent

def test_all_capabilities():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    
    print("=" * 70)
    print("ü§ñ MIRAI - –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
    print("=" * 70)
    
    agent = AutonomousAgent()
    
    # 1. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print("\nüìã 1. –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ MIRAI:")
    print("-" * 70)
    for i, tool in enumerate(agent.tools, 1):
        name = tool['function']['name']
        desc = tool['function']['description']
        print(f"{i:2}. {name:20} - {desc}")
    
    print(f"\n‚úÖ –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(agent.tools)}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    print("\nüöÄ 2. –ü–†–û–î–í–ò–ù–£–¢–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    print("-" * 70)
    
    capabilities = {
        "Multi-Language Executor": agent.multi_lang is not None,
        "Database Manager": agent.db_manager is not None,
        "GitHub Integration": agent.github is not None,
        "Advanced Features": agent.has_advanced_features
    }
    
    for name, status in capabilities.items():
        icon = "‚úÖ" if status else "‚ùå"
        print(f"{icon} {name:25} - {'–î–æ—Å—Ç—É–ø–Ω–æ' if status else '–ù–ï –¥–æ—Å—Ç—É–ø–Ω–æ'}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub
    print("\nüêô 3. GITHUB INTEGRATION:")
    print("-" * 70)
    
    if agent.github:
        is_auth = agent.github.is_authenticated()
        print(f"{'‚úÖ' if is_auth else '‚ùå'} –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {'OK' if is_auth else '–ù–ï–¢'}")
        
        if is_auth:
            user_info = agent.github.get_user_info()
            if 'login' in user_info:
                print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['login']}")
                print(f"üì¶ –ü—É–±–ª–∏—á–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {user_info.get('public_repos', 0)}")
    else:
        print("‚ùå GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    print("\nüíª 4. –ü–û–î–î–ï–†–ñ–ö–ê –Ø–ó–´–ö–û–í –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 70)
    
    if agent.multi_lang:
        languages = ["python", "javascript", "typescript", "c", "cpp", "go", "rust", "bash"]
        for lang in languages:
            print(f"‚úÖ {lang}")
    else:
        print("‚ùå Multi-language executor –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    print("\nüóÑÔ∏è  5. –ü–û–î–î–ï–†–ñ–ö–ê –ë–ê–ó –î–ê–ù–ù–´–•:")
    print("-" * 70)
    
    if agent.db_manager:
        databases = ["SQLite", "PostgreSQL", "MongoDB", "Redis"]
        for db in databases:
            print(f"‚úÖ {db}")
    else:
        print("‚ùå Database manager –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    # 6. –¢–ï–°–¢–´ –§–£–ù–ö–¶–ò–ô
    print("\nüß™ 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô:")
    print("-" * 70)
    
    # Test 1: Search Web
    print("\nüîç Test: search_web()")
    try:
        result = agent.search_web("Python programming")
        print(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {result[:100]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # Test 2: Execute Python
    print("\nüêç Test: execute_python()")
    try:
        result = agent.execute_python("print('Hello from MIRAI!'); import sys; print(sys.version)")
        print(f"‚úÖ Python –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   {result[:200]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # Test 3: GitHub
    if agent.github and agent.github.is_authenticated():
        print("\nüêô Test: github_action()")
        try:
            result = agent.github_action("get_user_info")
            print(f"‚úÖ GitHub —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   {result[:200]}...")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 7. –ö–†–ò–¢–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò
    print("\nüî¥ 7. –ö–†–ò–¢–ò–ß–ù–´–ï –î–õ–Ø –†–ê–ë–û–¢–´:")
    print("-" * 70)
    
    critical = [
        ("AI –º—ã—à–ª–µ–Ω–∏–µ (think)", True),
        ("–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (read_file)", True),
        ("–ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤ (write_file)", True),
        ("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (run_command)", True),
        ("–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (search_web)", True),
        ("GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", agent.github is not None),
    ]
    
    for name, available in critical:
        icon = "‚úÖ" if available else "‚ö†Ô∏è"
        print(f"{icon} {name}")
    
    # 8. –ß–¢–û –ù–£–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨
    print("\nüí° 8. –í–û–ó–ú–û–ñ–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
    print("-" * 70)
    
    improvements = [
        "‚ú® –ß—Ç–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ (get_repo_content)",
        "‚ú® –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–µ–±-–ø–æ–∏—Å–∫ (Google Custom Search API)",
        "‚ú® –°–∫—Ä–∞–ø–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü (Beautiful Soup)",
        "‚ú® API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (Twitter, Reddit, Stack Overflow)",
        "‚ú® –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Pinecone, Weaviate)",
        "‚ú® RAG (Retrieval-Augmented Generation)",
    ]
    
    for improvement in improvements:
        print(improvement)
    
    print("\n" + "=" * 70)
    print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 70)

if __name__ == "__main__":
    test_all_capabilities()
