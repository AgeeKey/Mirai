"""
üß† MIRAI AUTONOMOUS DESKTOP MODE V2 - –£–ú–ù–´–ô AI –ê–ì–ï–ù–¢

–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –° –ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ú –ò–ù–¢–ï–õ–õ–ï–ö–¢–û–ú:
==============================================

–ö–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑:
1. üì∏ Vision –∞–Ω–∞–ª–∏–∑ ‚Üí –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
2. ü§î AI –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è ‚Üí –ß—Ç–æ –¥–µ–ª–∞—Ç—å?
3. ‚ö° –£–º–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Üí –î–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
4. ‚úÖ Vision –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –ü–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏?

–û–¢–õ–ò–ß–ò–Ø –û–¢ V1:
- ‚úÖ –í–∏–¥–∏—Ç –∏ –ø–æ–Ω–∏–º–∞–µ—Ç –ö–û–ù–¢–ï–ö–°–¢ (–ø—Ä–æ—Ñ–∏–ª–∏ Chrome, —Ä–µ–∫–ª–∞–º—ã, –ø–æ–ø–∞–ø—ã)
- ‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –†–ï–ó–£–õ–¨–¢–ê–¢ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
- ‚úÖ –ü–µ—á–∞—Ç–∞–µ—Ç –≤ –ü–†–ê–í–ò–õ–¨–ù–´–ï –º–µ—Å—Ç–∞ (–Ω–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª)
- ‚úÖ –ü–æ–Ω–∏–º–∞–µ—Ç –ò–ù–¢–ï–†–§–ï–ô–°–´ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
- ‚úÖ –ü–ê–ú–Ø–¢–¨ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏
- ‚úÖ –û–ë–£–ß–ê–ï–¢–°–Ø –Ω–∞ –æ—à–∏–±–∫–∞—Ö
"""

import asyncio
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import List, Optional
import os
import pyautogui  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç

# –£–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from core.vision_tools import VisionTools
from core.context_manager import AgentContext, ActionStatus
from core.smart_desktop_agent import SmartDesktopAgent

# –î–ª—è AI —Ä–µ—à–µ–Ω–∏–π
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('autonomous_desktop_v2.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class IntelligentMiraiAgent:
    """
    üß† –£–ú–ù–´–ô –ê–í–¢–û–ù–û–ú–ù–´–ô –ê–ì–ï–ù–¢ MIRAI V2

    –ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã:
    - –ö–∞–∂–¥—ã–π —à–∞–≥ —Å Vision –∞–Ω–∞–ª–∏–∑–æ–º
    - –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ–ø—ã—Ç–µ
    """

    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
        api_key = self._load_api_key()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.vision = VisionTools(api_key)
        self.context = AgentContext(session_id=f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
        self.desktop = SmartDesktopAgent(self.vision, self.context)

        # AI –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        self.ai_client = OpenAI(api_key=api_key)
        
        # –ó–ê–©–ò–¢–ê –û–¢ –ó–ê–í–ò–°–ê–ù–ò–Ø
        self.max_actions_per_cycle = 10  # –ú–∞–∫—Å–∏–º—É–º –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ —Ü–∏–∫–ª
        self.actions_in_cycle = 0
        
        # –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ï–ñ–ò–ú
        pyautogui.FAILSAFE = True  # –ö—É—Ä—Å–æ—Ä –≤ —É–≥–æ–ª = –æ—Å—Ç–∞–Ω–æ–≤–∫–∞

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.tasks_completed = 0
        self.cycle_count = 0

        # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        self.workspace = Path("mirai_workspace_v2")
        self.workspace.mkdir(exist_ok=True)

        logger.info("=" * 70)
        logger.info("üß† MIRAI INTELLIGENT AGENT V2 INITIALIZED")
        logger.info("=" * 70)

    def _load_api_key(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å OpenAI API –∫–ª—é—á"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        config_path = Path(__file__).parent / "configs" / "api_keys.json"
        
        if config_path.exists():
            with open(config_path, encoding='utf-8') as f:
                config = json.load(f)
                api_key = config.get("OPENAI_API_KEY") or config.get("openai") or config.get("OPENAI")
                if api_key:
                    logger.info("‚úÖ API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ configs/api_keys.json")
                    return api_key

        # –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        api_key = os.getenv("OPENAI_API_KEY", "")
        if api_key:
            logger.info("‚úÖ API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return api_key
        
        raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –≤ configs/api_keys.json –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    async def intelligent_cycle(self):
        """
        üîÑ –û–î–ò–ù –£–ú–ù–´–ô –¶–ò–ö–õ –†–ê–ë–û–¢–´:

        1. üìä –ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ (Vision)
        2. üéØ –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ (AI —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
        3. üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏)
        4. üíª –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (Vision –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ)
        5. üìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —á–µ–º—É –Ω–∞—É—á–∏–ª–∏—Å—å)
        """

        self.cycle_count += 1

        logger.info("=" * 70)
        logger.info(f"üîÑ –£–ú–ù–´–ô –¶–ò–ö–õ #{self.cycle_count} | –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {self.tasks_completed}")
        logger.info("=" * 70)

        try:
            # –®–ê–ì 1: –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ô –°–ò–¢–£–ê–¶–ò–ò
            logger.info("\nüìä –®–ê–ì 1: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏")
            situation = await self.desktop.analyze_current_situation()

            logger.info(f"üëÅÔ∏è –í–∏–∂—É: {situation.scene_description}")
            logger.info(f"üéØ –î–æ—Å—Ç—É–ø–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {situation.ui_state.get('possible_actions', [])}")

            if situation.ui_state.get("problems"):
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {situation.ui_state['problems']}")

            # –®–ê–ì 2: AI –í–´–ë–ò–†–ê–ï–¢ –ó–ê–î–ê–ß–£ –° –£–ß–Å–¢–û–ú –ö–û–ù–¢–ï–ö–°–¢–ê
            logger.info("\nüéØ –®–ê–ì 2: AI –≤—ã–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞—á—É")
            task = await self._choose_intelligent_task(situation)

            if not task:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É, –ø—Ä–æ–ø—É—Å–∫–∞—é —Ü–∏–∫–ª")
                return

            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task}")

            # –®–ê–ì 3: –î–ï–¢–ê–õ–¨–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï
            logger.info("\nüìã –®–ê–ì 3: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            plan = await self._create_intelligent_plan(task, situation)

            logger.info(f"üìã –ü–ª–∞–Ω –∏–∑ {len(plan)} —à–∞–≥–æ–≤:")
            for i, step in enumerate(plan, 1):
                logger.info(f"  {i}. {step}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.context.set_goal(task, plan)

            # –®–ê–ì 4: –£–ú–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –° VISION –ö–û–ù–¢–†–û–õ–ï–ú
            logger.info("\nüíª –®–ê–ì 4: –£–º–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
            success = await self._execute_intelligent_plan(task, plan)

            # –®–ê–ì 5: –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò –û–ë–£–ß–ï–ù–ò–ï
            logger.info("\nüìà –®–ê–ì 5: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            await self._analyze_and_learn(task, success)

            if success:
                self.tasks_completed += 1
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –í—Å–µ–≥–æ: {self.tasks_completed}")
            else:
                logger.warning("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.context.save_to_file()

            # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
            self.actions_in_cycle = 0
            
            logger.info(f"\n‚úÖ –¶–∏–∫–ª #{self.cycle_count} –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–∞—É–∑–∞ 60 —Å–µ–∫—É–Ω–¥ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)...")
            await asyncio.sleep(60)  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –ø–∞—É–∑–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

        except KeyboardInterrupt:
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º Ctrl+C
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}", exc_info=True)
            logger.warning("‚è∏Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(60)  # –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _choose_intelligent_task(self, situation) -> Optional[str]:
        """
        AI –í–´–ë–ò–†–ê–ï–¢ –ó–ê–î–ê–ß–£ –° –ü–û–ù–ò–ú–ê–ù–ò–ï–ú –ö–û–ù–¢–ï–ö–°–¢–ê.

        –£—á–∏—Ç—ã–≤–∞–µ—Ç:
        - –ß—Ç–æ —Å–µ–π—á–∞—Å –æ—Ç–∫—Ä—ã—Ç–æ
        - –ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –µ—Å—Ç—å
        - –ß—Ç–æ —É–∂–µ –¥–µ–ª–∞–ª–∏
        - –ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å
        """

        context_summary = self.context.get_context_summary()

        prompt = f"""–¢—ã - —É–º–Ω—ã–π AI –∞–≥–µ–Ω—Ç MIRAI, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è.

–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
{situation.scene_description}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {situation.ui_state.get('possible_actions', [])}
–ü—Ä–æ–±–ª–µ–º—ã: {situation.ui_state.get('problems', '–Ω–µ—Ç')}

–ö–û–ù–¢–ï–ö–°–¢ –°–ï–°–°–ò–ò:
{json.dumps(context_summary, ensure_ascii=False, indent=2)}

–ó–ê–î–ê–ß–ê: –í—ã–±–µ—Ä–∏ –û–î–ù–£ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –°–ï–ô–ß–ê–°.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–ô —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏
2. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã - —Å–Ω–∞—á–∞–ª–∞ –∏—Ö —Ä–µ—à–∏—Ç—å
3. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —Ç–æ —á—Ç–æ –Ω–µ–¥–∞–≤–Ω–æ –¥–µ–ª–∞–ª
4. –ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–∏–º–∞ –∑–∞ 5-10 –º–∏–Ω—É—Ç

–ü–†–ò–ú–ï–†–´ –•–û–†–û–®–ò–• –ó–ê–î–ê–ß:
- "–°–æ–∑–¥–∞—Ç—å Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤ –≤ VS Code"
- "–ù–∞–π—Ç–∏ –≤ Google –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ REST API –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª"
- "–°–æ–∑–¥–∞—Ç—å TODO list –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ HTML/CSS/JS"

–û—Ç–≤–µ—Ç—å –û–î–ù–û–ô —Å—Ç—Ä–æ–∫–æ–π - —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""

        try:
            response = self.ai_client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=150,
                temperature=0.8
            )

            task = response.choices[0].message.content.strip()
            return task

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏: {e}")
            return None

    async def _create_intelligent_plan(self, task: str, situation) -> List[str]:
        """
        –°–û–ó–î–ê–¢–¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –° –ü–†–û–í–ï–†–ö–ê–ú–ò.

        –ö–∞–∂–¥—ã–π —à–∞–≥ = –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        """

        prompt = f"""–°–æ–∑–¥–∞–π –î–ï–¢–ê–õ–¨–ù–´–ô –ø–ª–∞–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {task}

–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
{situation.scene_description}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ü–õ–ê–ù–£:
1. –ö–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ö–û–ù–ö–†–ï–¢–ù–´–ú –∏ –í–´–ü–û–õ–ù–ò–ú–´–ú
2. –£—á–∏—Ç—ã–≤–∞–π —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é (—á—Ç–æ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ)
3. –í–∫–ª—é—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –≤–∞–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
4. –ú–∞–∫—Å–∏–º—É–º 7 —à–∞–≥–æ–≤
5. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: –±—Ä–∞—É–∑–µ—Ä, —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã, —Ç–µ—Ä–º–∏–Ω–∞–ª

–§–û–†–ú–ê–¢:
–û—Ç–≤–µ—Ç—å —Å–ø–∏—Å–∫–æ–º JSON:
["–®–∞–≥ 1: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", "–®–∞–≥ 2: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", ...]

–ü—Ä–∏–º–µ—Ä:
["–û—Ç–∫—Ä—ã—Ç—å VS Code", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª script.py", "–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å"]

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ JSON –º–∞—Å—Å–∏–≤–æ–º, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""

        try:
            response = self.ai_client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=400,
                temperature=0.5
            )

            result = response.choices[0].message.content.strip()

            # –ü–∞—Ä—Å–∏–º JSON
            if "```json" in result:
                result = result.split("```json")[1].split("```")[0].strip()
            elif "```" in result:
                result = result.split("```")[1].split("```")[0].strip()

            plan = json.loads(result)
            return plan[:7]  # –ú–∞–∫—Å–∏–º—É–º 7 —à–∞–≥–æ–≤

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
            return ["–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"]

    async def _execute_intelligent_plan(self, task: str, plan: List[str]) -> bool:
        """
        –£–ú–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–õ–ê–ù–ê.

        –ö–∞–∂–¥—ã–π —à–∞–≥:
        1. Vision –∞–Ω–∞–ª–∏–∑ ‚Üí –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Üí —É–º–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        3. Vision –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏?
        """

        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é —É–º–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {task}")

        for i, step in enumerate(plan, 1):
            logger.info(f"\n‚ñ∂Ô∏è –®–∞–≥ {i}/{len(plan)}: {step}")

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π desktop agent
                result = await self.desktop.smart_execute_task(step)

                if result.get("success"):
                    logger.info(f"‚úÖ –®–∞–≥ {i} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    self.context.complete_step(step)
                else:
                    logger.warning(f"‚ö†Ô∏è –®–∞–≥ {i} –≤—ã–ø–æ–ª–Ω–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ")

                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {i}: {e}")
                continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        completed = len(self.context.completed_steps)
        total = len(plan)

        success = completed >= total * 0.7  # 70% —É—Å–ø–µ—Ö–∞

        logger.info(f"\nüìä –ò—Ç–æ–≥: {completed}/{total} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

        return success

    async def _analyze_and_learn(self, task: str, success: bool):
        """
        –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò –û–ë–£–ß–ï–ù–ò–ï.
        –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —á—Ç–æ –Ω–µ—Ç, —á–µ–º—É –Ω–∞—É—á–∏–ª–∏—Å—å.
        """

        recent_actions = self.context.get_recent_actions(10)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ
        logger.info("üìö –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø—ã—Ç...")

        lessons = []

        for action in recent_actions:
            if action.status == ActionStatus.FAILED:
                lesson = f"–ù–ï –†–ê–ë–û–¢–ê–ï–¢: {action.description} - {action.problems}"
                lessons.append(lesson)
            elif action.status == ActionStatus.SUCCESS:
                lesson = f"–†–ê–ë–û–¢–ê–ï–¢: {action.description}"
                lessons.append(lesson)

        if lessons:
            logger.info(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(lessons)} —É—Ä–æ–∫–æ–≤:")
            for lesson in lessons[:3]:
                logger.info(f"  - {lesson}")

        # –ú–µ—Ç—Ä–∏–∫–∏
        logger.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:")
        logger.info(f"  –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {self.context.total_actions}")
        logger.info(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {self.context.successful_actions}")
        logger.info(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {self.context.get_context_summary()['success_rate']}")

    async def run_forever(self):
        """üöÄ –ó–ê–ü–£–°–ö –ë–ï–°–ö–û–ù–ï–ß–ù–û–ì–û –£–ú–ù–û–ì–û –†–ï–ñ–ò–ú–ê"""

        print("\n" + "=" * 70)
        print("üß† MIRAI INTELLIGENT AUTONOMOUS MODE V2")
        print("=" * 70)
        print("\nüéØ –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
        print("  ‚úÖ Vision –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞")
        print("  ‚úÖ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø—Ä–æ—Ñ–∏–ª–∏, —Ä–µ–∫–ª–∞–º–∞, –ø–æ–ø–∞–ø—ã)")
        print("  ‚úÖ –£–º–Ω–∞—è –ø–µ—á–∞—Ç—å (–Ω–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª)")
        print("  ‚úÖ –ü–∞–º—è—Ç—å —Å–µ—Å—Å–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ")
        print("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...\n")

        try:
            while True:
                await self.intelligent_cycle()

        except KeyboardInterrupt:
            logger.info("\n\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞...")
            self.context.save_to_file()
            logger.info("üíæ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
            logger.info(f"üìä –ò—Ç–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {self.tasks_completed}")
            logger.info("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    agent = IntelligentMiraiAgent()
    asyncio.run(agent.run_forever())


if __name__ == "__main__":
    main()
