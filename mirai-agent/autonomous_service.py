#!/usr/bin/env python3
"""
ü§ñ KAIZEN √ó üå∏ MIRAI - Autonomous Background Service
–†–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –≤ —Ñ–æ–Ω–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ª–æ–≥–∏ + web dashboard
"""

import json
import logging
import os
import signal
import sys
import time
from datetime import datetime
from pathlib import Path

sys.path.insert(0, "/root/mirai/mirai-agent")

from core.autonomous_agent import AutonomousAgent
from core.cicd_monitor import CICDMonitor
from core.nasa_level.orchestrator import NASALearningOrchestrator

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.FileHandler("/tmp/kaizen_mirai.log"), logging.StreamHandler()],
)

logger = logging.getLogger("KAIZEN_MIRAI")


class AutonomousService:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å KAIZEN + MIRAI"""

    def __init__(self):
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KAIZEN...")
        self.kaizen = AutonomousAgent()

        logger.info("üå∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MIRAI...")
        self.mirai = AutonomousAgent()

        # Load GitHub config
        config_path = Path(__file__).parent / "configs" / "api_keys.json"
        with open(config_path) as f:
            config = json.load(f)

        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CI/CD Monitor...")
        self.monitor = CICDMonitor(
            github_token=config["GITHUB_TOKEN"],
            repo_owner="AgeeKey",
            repo_name="mirai-showcase",
        )

        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NASA-Level Learning System...")
        self.nasa_learning = NASALearningOrchestrator()
        logger.info("‚úÖ NASA-Level Learning System –≥–æ—Ç–æ–≤–∞!")

        logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Long-Term Memory...")
        from core.long_term_memory import LongTermMemory

        self.memory = LongTermMemory()
        logger.info("‚úÖ Long-Term Memory –≥–æ—Ç–æ–≤–∞!")

        logger.info("ü™û –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Self-Awareness...")
        from core.self_awareness import SelfAwareness

        self.awareness = SelfAwareness()
        logger.info("‚úÖ Self-Awareness –≥–æ—Ç–æ–≤–∞!")

        logger.info("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Auto-Planner...")
        from core.auto_planner import AutoPlanner

        self.planner = AutoPlanner()
        logger.info("‚úÖ Auto-Planner –≥–æ—Ç–æ–≤!")

        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Self-Modification...")
        from core.self_modification import SelfModification

        self.self_mod = SelfModification()
        logger.info("‚úÖ Self-Modification –≥–æ—Ç–æ–≤–∞!")
        logger.info("‚ö†Ô∏è –ü–û–õ–ù–´–ï –ü–†–ê–í–ê –ù–ê –ú–û–î–ò–§–ò–ö–ê–¶–ò–Æ –ü–û–õ–£–ß–ï–ù–´!")

        logger.info("üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Personality System...")
        from core.personality_system import PersonalitySystem

        self.personality = PersonalitySystem()
        logger.info("‚úÖ Personality System –≥–æ—Ç–æ–≤–∞!")
        logger.info("üé≠ MIRAI —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ –ª–∏—á–Ω–æ—Å—Ç—å!")

        self.running = True
        self.cycle_count = 0

        # Handle signals
        signal.signal(signal.SIGINT, self.shutdown)
        signal.signal(signal.SIGTERM, self.shutdown)

    def shutdown(self, signum, frame):
        """Graceful shutdown"""
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        self.running = False

    def _init_initial_goals(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
        from datetime import timedelta

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
        active_goals = self.memory.get_active_goals()
        if len(active_goals) > 0:
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(active_goals)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π")
            return

        logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π...")

        # –¶–µ–ª—å 1: –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å
        self.memory.set_goal(
            title="–î–æ—Å—Ç–∏—á—å –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏",
            description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å PR, –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥, –æ–±—É—á–∞—Ç—å—Å—è –Ω–æ–≤—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º",
            priority=10,
            deadline=(datetime.now() + timedelta(days=30)).isoformat(),
        )

        # –¶–µ–ª—å 2: –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
        self.memory.set_goal(
            title="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å CI/CD success rate > 90%",
            description="–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å GitHub Actions, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –ø–∞–¥–∞—é—â–∏–µ —Ç–µ—Å—Ç—ã",
            priority=9,
        )

        # –¶–µ–ª—å 3: –û–±—É—á–µ–Ω–∏–µ
        self.memory.set_goal(
            title="–ò–∑—É—á–∏—Ç—å 10+ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            description="–ß–µ—Ä–µ–∑ NASA-Level Learning System –∏–∑—É—á–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            priority=7,
            deadline=(datetime.now() + timedelta(days=60)).isoformat(),
        )

        # –¶–µ–ª—å 4: –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
        self.memory.set_goal(
            title="–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π",
            description="–ö–∞—Ç–∞–ª–æ–≥–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏, —Ä–µ—à–µ–Ω–∏—è, –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
            priority=6,
        )

        logger.info("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

    def log_separator(self):
        """–ö—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –ª–æ–≥–∞—Ö"""
        logger.info("=" * 70)

    def consult_mirai(self, question: str) -> str:
        """KAIZEN –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç—Å—è —Å MIRAI"""
        logger.info("ü§ñ –ö–ê–ô–î–ó–ï–ù —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ú–ò–†–ê–ô...")
        response = self.mirai.think(question, max_iterations=1)
        logger.info(f"üå∏ –ú–ò–†–ê–ô –æ—Ç–≤–µ—á–∞–µ—Ç: {response[:100]}...")
        return response

    def autonomous_learning(self):
        """–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ NASA-Level —Å–∏—Å—Ç–µ–º—É"""
        logger.info("üéì –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç MIRAI –æ —Ç–æ–º, —á—Ç–æ –∏–∑—É—á–∏—Ç—å
        question = """
        –¢—ã –ú–ò–†–ê–ô. –í—ã–±–µ—Ä–∏ 1-2 Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å —Å–µ–π—á–∞—Å.
        –í—ã–±–∏—Ä–∞–π –ø–æ–ª–µ–∑–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–ª–∏ AI.
        
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
        –ù–∞–ø—Ä–∏–º–µ—Ä: prometheus-client, aiohttp
        """

        mirai_recommendation = self.consult_mirai(question)
        logger.info(f"üìö –ú–ò–†–ê–ô —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –∏–∑—É—á–∏—Ç—å: {mirai_recommendation}")

        # –ü–∞—Ä—Å–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        technologies = [t.strip() for t in mirai_recommendation.split(",")[:2]]

        # KAIZEN –∏–∑—É—á–∞–µ—Ç –∫–∞–∂–¥—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é
        for tech in technologies:
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            tech = tech.strip().strip("'\"").strip()
            if not tech or len(tech) > 50:
                continue

            logger.info(f"üöÄ –ö–ê–ô–î–ó–ï–ù –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–∑—É—á–µ–Ω–∏–µ: {tech}")

            try:
                result = self.nasa_learning.learn_technology(tech, depth="basic")

                if result.success:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑—É—á–∏–ª {tech}!")
                    logger.info(f"   üìä –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {result.proficiency:.1f}%")
                    logger.info(f"   üéØ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: {result.quality_grade}")
                    logger.info(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {result.execution_time:.1f}s")
                else:
                    error_msg = result.errors[0] if result.errors else "Unknown error"
                    logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑—É—á–∏—Ç—å {tech}: {error_msg}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ {tech}: {e}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è
        status = self.nasa_learning.get_status()
        kb_stats = status.get("knowledge", {})
        metrics_summary = status.get("metrics", {})

        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:")
        logger.info(
            f"   ‚Ä¢ –í—Å–µ–≥–æ –∏–∑—É—á–µ–Ω–æ: {kb_stats.get('total_entries', 0)} —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
        )
        logger.info(f"   ‚Ä¢ Success rate: {metrics_summary.get('success_rate', 0):.1f}%")
        logger.info(
            f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {kb_stats.get('average_proficiency', 0):.1f}%"
        )

    def autonomous_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
        self.cycle_count += 1

        self.log_separator()
        logger.info(f"üîÑ –ê–í–¢–û–ù–û–ú–ù–´–ô –¶–ò–ö–õ #{self.cycle_count}")
        logger.info(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log_separator()

        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ CI/CD
            logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è—é –∑–¥–æ—Ä–æ–≤—å–µ CI/CD...")
            health = self.monitor.check_health()

            logger.info(f"üè• –°—Ç–∞—Ç—É—Å: {health['status']} | –û—Ü–µ–Ω–∫–∞: {health['grade']}")
            logger.info(f"‚úÖ Success Rate: {health['metrics']['success_rate']}%")

            # 2. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã - —Å–æ–≤–µ—Ç—É–µ–º—Å—è —Å MIRAI
            if not health["is_healthy"]:
                logger.warning("‚ö†Ô∏è  CI/CD –ù–ï –ó–î–û–†–û–í! –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –ú–ò–†–ê–ô...")

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–∞–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
                failures = self.monitor.get_failing_workflows()
                failures_text = "\n".join(
                    f"   ‚Ä¢ {f['name']} #{f['run_number']}" for f in failures[:5]
                )

                question = f"""
üö® –°–†–û–ß–ù–û –ú–ò–†–ê–ô! CI/CD –ø—Ä–æ–±–ª–µ–º—ã —É–∂–µ {self.cycle_count} —Ü–∏–∫–ª–æ–≤!

üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:
‚Ä¢ –°—Ç–∞—Ç—É—Å: {health['status']}
‚Ä¢ –û—Ü–µ–Ω–∫–∞: {health['grade']}
‚Ä¢ Success Rate: {health['metrics']['success_rate']}%
‚Ä¢ –ü—Ä–æ–≤–∞–ª–æ–≤: {health['metrics']['failed']}

‚ùå –£–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã:
{failures_text}

üí° –¢—ã —É–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã–±–∏—Ä–∞–ª–∞ "2. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏", –Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –ù–ï –†–ï–®–ï–ù–ê!
–ü–æ—Ä–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –ö–û–ù–ö–†–ï–¢–ù–´–ú –î–ï–ô–°–¢–í–ò–Ø–ú!

üéØ –ù–û–í–´–ï –í–ê–†–ò–ê–ù–¢–´ (–í–´–ë–ï–†–ò –û–î–ù–û):
1. –ò–°–ü–†–ê–í–ò–¢–¨ –¢–ï–°–¢–´ - —è —Å–æ–∑–¥–∞–º PR —Å —Ñ–∏–∫—Å–∞–º–∏
2. –û–¢–ö–õ–Æ–ß–ò–¢–¨ –ü–†–û–ë–õ–ï–ú–ù–´–ï –¢–ï–°–¢–´ - –≤—Ä–µ–º–µ–Ω–Ω–æ skip
3. –û–ë–ù–û–í–ò–¢–¨ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò - –≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞–∫–µ—Ç—ã
4. –£–ü–†–û–°–¢–ò–¢–¨ CI/CD - —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
5. –°–û–ó–î–ê–¢–¨ GITHUB ISSUE - –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É
6. –ü–ï–†–ï–ó–ê–ü–£–°–¢–ò–¢–¨ –¢–ï–°–¢–´ - –º–æ–∂–µ—Ç –≥–ª—é–∫

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: "–í—ã–±–∏—Ä–∞—é [–Ω–æ–º–µ—Ä]. [–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–π—á–∞—Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ]"
"""

                mirai_decision = self.consult_mirai(question)
                logger.info(f"üí° –†–µ—à–µ–Ω–∏–µ –ú–ò–†–ê–ô: {mirai_decision}")

                # KAIZEN –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ MIRAI - –†–ï–ê–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø!
                from core.real_tasks import RealTaskExecutor

                executor = RealTaskExecutor()

                if "1" in mirai_decision or "–∏—Å–ø—Ä–∞–≤–∏—Ç—å" in mirai_decision.lower():
                    logger.info("üîß –ö–ê–ô–î–ó–ï–ù: –°–æ–∑–¥–∞—é issue –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
                    result = executor.task2_monitor_cicd_and_create_issue(health)
                    logger.info(
                        f"   ‚úÖ {result['status']}: {result.get('action', 'N/A')}"
                    )

                elif "5" in mirai_decision or "issue" in mirai_decision.lower():
                    logger.info("üìã –ö–ê–ô–î–ó–ï–ù: –°–æ–∑–¥–∞—é GitHub Issue...")
                    result = executor.task2_monitor_cicd_and_create_issue(health)
                    logger.info(
                        f"   ‚úÖ {result['status']}: {result.get('issue_file', 'monitoring')}"
                    )

                else:
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
                    logger.info("üîç –ö–ê–ô–î–ó–ï–ù: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–æ–≥–∏ –∏ –æ–±–Ω–æ–≤–ª—è—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...")
                    result1 = executor.task3_build_knowledge_base()
                    logger.info(
                        f"   ‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {result1['summary']['unique_patterns']} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"
                    )

                    for fail in failures[:3]:
                        logger.warning(f"   ‚ùå {fail['name']} #{fail['run_number']}")
            else:
                logger.info("‚ú® –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! CI/CD –∑–¥–æ—Ä–æ–≤.")

            # 3. –ö–∞–∂–¥—ã–µ 3 —Ü–∏–∫–ª–∞ - –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ NASA-Level
            if self.cycle_count % 3 == 0:
                logger.info("üéì –í—Ä–µ–º—è –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
                self.autonomous_learning()

            # 4. –ö–∞–∂–¥—ã–µ 5 —Ü–∏–∫–ª–æ–≤ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º MIRAI —á—Ç–æ —É–ª—É—á—à–∏—Ç—å
            if self.cycle_count % 5 == 0:
                logger.info("üí≠ –í—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π...")

                question = """
                –¢—ã –ú–ò–†–ê–ô. –ü—Ä–æ—à–ª–æ 5 —Ü–∏–∫–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
                
                –ß—Ç–æ —É–ª—É—á—à–∏—Ç—å –¥–∞–ª—å—à–µ?
                1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ dashboard
                2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
                3. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞
                4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
                
                –í—ã–±–µ—Ä–∏ –û–î–ù–û –∏ —Å–∫–∞–∂–∏ –ø–æ—á–µ–º—É –∫—Ä–∞—Ç–∫–æ.
                """

                improvement = self.consult_mirai(question)
                logger.info(f"üéØ –ü–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏–π –æ—Ç –ú–ò–†–ê–ô: {improvement}")

            # 5. –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–π —Ü–∏–∫–ª
            from core.real_tasks import RealTaskExecutor

            executor = RealTaskExecutor()

            # –ö–∞–∂–¥—ã–π —Ü–∏–∫–ª - –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ dashboard
            logger.info("üìä –û–±–Ω–æ–≤–ª—è—é –º–µ—Ç—Ä–∏–∫–∏ –∏ dashboard...")
            metrics_result = executor.task4_update_metrics_dashboard()

            # –ö–∞–∂–¥—ã–µ 12 —Ü–∏–∫–ª–æ–≤ (~1 —á–∞—Å) - —Å–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç –ø–æ –ª–æ–≥–∞–º
            if self.cycle_count % 12 == 0:
                logger.info("üìù –°–æ–∑–¥–∞—é –µ–∂–µ—á–∞—Å–Ω—ã–π –æ—Ç—á—ë—Ç...")
                report_result = executor.task1_analyze_logs_and_report()
                logger.info(f"   ‚úÖ –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {report_result['report_file']}")

            # –ö–∞–∂–¥—ã–µ 6 —Ü–∏–∫–ª–æ–≤ (~30 –º–∏–Ω—É—Ç) - –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
            if self.cycle_count % 6 == 0:
                logger.info("ü§ñ –ü—Ä–æ–≤–µ—Ä—è—é –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥...")
                autofix_result = executor.task5_auto_fix_code()
                if autofix_result["status"] == "‚úÖ SUCCESS":
                    logger.info(
                        f"   ‚úÖ PR —Å–æ–∑–¥–∞–Ω: {autofix_result['pr_url']} (#{autofix_result['pr_number']})"
                    )
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
                    self.memory.record_achievement(
                        description=f"Auto-fix PR #{autofix_result['pr_number']}",
                        result=f"Fixed: {autofix_result.get('file_fixed', 'unknown file')}",
                    )
                elif autofix_result["status"] == "‚úÖ SKIP":
                    logger.info(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {autofix_result['reason']}")
                else:
                    logger.warning(
                        f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å: {autofix_result.get('error', 'Unknown')}"
                    )

            # –ö–∞–∂–¥—ã–µ 24 —Ü–∏–∫–ª–∞ (~2 —á–∞—Å–∞) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–∞–º—è—Ç–∏
            if self.cycle_count % 24 == 0:
                logger.info("üß† –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å:")
                summary = self.memory.get_summary()
                for line in summary.split("\n"):
                    logger.info(f"   {line}")

            # –ö–∞–∂–¥—ã–µ 48 —Ü–∏–∫–ª–æ–≤ (~4 —á–∞—Å–∞) - —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è
            if self.cycle_count % 48 == 0:
                logger.info("ü™û –ü—Ä–æ–≤–æ–∂—É —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—é...")

                # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
                awareness_summary = self.awareness.get_summary()
                for line in awareness_summary.split("\n"):
                    logger.info(f"   {line}")

                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
                improvements = self.awareness.propose_improvements()
                if improvements:
                    logger.info("   üí° –¢–æ–ø-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
                    for i, imp in enumerate(improvements[:3], 1):
                        logger.info(
                            f"      {i}. [{imp['priority']}] {imp['area']}: {imp['suggestion']}"
                        )

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–∏
                if improvements and improvements[0]["priority"] in [
                    "–∫—Ä–∏—Ç–∏—á–Ω—ã–π",
                    "–≤—ã—Å–æ–∫–∏–π",
                ]:
                    decision_id = self.memory.record_decision(
                        context=f"–°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –≤—ã—è–≤–∏–ª–∞: {improvements[0]['issue']}",
                        decision=f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å: {improvements[0]['suggestion']}",
                        reasoning=f"–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {improvements[0]['priority']}",
                    )
                    logger.info(
                        f"   üìù –†–µ—à–µ–Ω–∏–µ –æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∞–Ω–æ (ID: {decision_id})"
                    )

            # –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ (–ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª –¥–Ω—è) - —Å–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
            current_hour = datetime.now().hour
            if current_hour >= 6 and current_hour < 7:  # –ú–µ–∂–¥—É 6 –∏ 7 —É—Ç—Ä–∞
                if self.cycle_count % 12 == 0:  # –†–∞–∑ –≤ —á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ–º
                    logger.info("üìã –°–æ–∑–¥–∞—é –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å...")
                    daily_plan = self.planner.create_daily_plan()
                    logger.info(f"   –§–æ–∫—É—Å –¥–Ω—è: {daily_plan['focus_area']}")
                    logger.info(f"   –ó–∞–¥–∞—á: {daily_plan['total_tasks']}")
                    logger.info(f"   –ß–∞—Å–æ–≤: {daily_plan['estimated_hours']:.1f}")

            # –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - —Å–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é
            if datetime.now().weekday() == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                if self.cycle_count % 24 == 0:  # –†–∞–∑ –≤ 2 —á–∞—Å–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                    logger.info("üìÜ –°–æ–∑–¥–∞—é –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é...")
                    weekly_plan = self.planner.create_weekly_plan()
                    logger.info(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {weekly_plan['strategy']}")
                    logger.info(f"   –¶–µ–ª–µ–π: {weekly_plan['total_goals']}")

            # –ö–∞–∂–¥—ã–π –≤–µ—á–µ—Ä (–æ–∫–æ–ª–æ 22:00) - —Ä–µ–≤—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
            if current_hour >= 22 and current_hour < 23:
                if self.cycle_count % 12 == 0:
                    logger.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞...")
                    review = self.planner.review_plan_execution()
                    if review.get("status") != "no_plan":
                        logger.info(
                            f"   Completion Rate: {review['completion_rate']:.1f}%"
                        )
                        logger.info(f"   –°—Ç–∞—Ç—É—Å: {review['status']}")
                        logger.info(
                            f"   –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {review['achievements_today']}"
                        )

                        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                        adaptation = self.planner.adapt_plan()
                        logger.info(f"   üí° –ê–¥–∞–ø—Ç–∞—Ü–∏—è: {adaptation['message']}")

                # 7. üîß –°–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è (—Ä–∞–∑ –≤ 7 –¥–Ω–µ–π = –∫–∞–∂–¥—ã–µ 2016 —Ü–∏–∫–ª–æ–≤ –ø–æ 5 –º–∏–Ω—É—Ç)
                # –ò–õ–ò —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤–µ—á–µ—Ä–æ–º
                if datetime.now().weekday() == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    if current_hour >= 23 and current_hour < 24:  # 23:00-24:00
                        if self.cycle_count % 12 == 0:  # –†–∞–∑ –≤ —á–∞—Å –≤ —ç—Ç–æ –≤—Ä–µ–º—è
                            logger.info(
                                "üîß –ó–ê–ü–£–°–ö –°–ê–ú–û–ú–û–î–ò–§–ò–ö–ê–¶–ò–ò (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤–µ—á–µ—Ä–æ–º)"
                            )
                            try:
                                summary = self.self_mod.run_self_improvement_cycle()
                                logger.info(
                                    f"   ‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {summary['duration_seconds']:.1f}—Å"
                                )
                                logger.info(
                                    f"   üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {summary['analysis']['files_analyzed']} —Ñ–∞–π–ª–æ–≤"
                                )
                                logger.info(
                                    f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º: {summary['analysis']['total_issues']} ({summary['analysis']['high_priority_issues']} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö)"
                                )
                                logger.info(
                                    f"   üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ: {summary['improvements_proposed']} —É–ª—É—á—à–µ–Ω–∏–π"
                                )
                                logger.info(
                                    f"   üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: {summary['improvements_applied']} —É–ª—É—á—à–µ–Ω–∏–π"
                                )

                                if summary["improvements_applied"] > 0:
                                    for mod in summary["applied"]:
                                        logger.info(
                                            f"   ‚úÖ PR #{mod['pr_number']}: {mod['improvement']['solution'][:50]}..."
                                        )
                            except Exception as e:
                                logger.error(
                                    f"‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}", exc_info=True
                                )

                # 8. üé≠ –†–∞–∑–≤–∏—Ç–∏–µ –õ–∏—á–Ω–æ—Å—Ç–∏ (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ = –∫–∞–∂–¥—ã–µ 72 —Ü–∏–∫–ª–∞)
                if self.cycle_count % 72 == 0:
                    logger.info("üé≠ –†–ê–ó–í–ò–¢–ò–ï –õ–ò–ß–ù–û–°–¢–ò (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)")
                    try:
                        changes = self.personality.auto_develop_personality()

                        if changes["stats_gained_xp"]:
                            logger.info(
                                f"   üìä –ü—Ä–æ–∫–∞—á–∞–Ω–æ {len(changes['stats_gained_xp'])} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"
                            )
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º level ups
                            for xp_result in changes["stats_gained_xp"]:
                                if xp_result.get("leveled_up"):
                                    logger.info(
                                        f"   üéâ {xp_result['stat']} LEVEL UP! {xp_result['old_level']} ‚Üí {xp_result['new_level']}"
                                    )

                        if changes["titles_earned"]:
                            logger.info(
                                f"   üèÜ –ü–æ–ª—É—á–µ–Ω–æ —Ç–∏—Ç—É–ª–æ–≤: {len(changes['titles_earned'])}"
                            )
                            for title in changes["titles_earned"]:
                                logger.info(f"   üèÜ {title}")

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ä–∞–∑ –≤ –¥–µ–Ω—å
                        if self.cycle_count % 288 == 0:  # –†–∞–∑ –≤ —Å—É—Ç–∫–∏
                            sheet = self.personality.get_character_sheet()
                            logger.info(
                                f"   ü§ñ MIRAI Level {sheet['mirai_level']} | XP: {sheet['total_xp']:.0f}"
                            )
                            logger.info(
                                f"   üé≠ –õ–∏—á–Ω–æ—Å—Ç—å: {sheet['personality_formed']:.0f}% | –°–æ–∑–Ω–∞–Ω–∏–µ: {sheet['consciousness_level']:.0f}%"
                            )
                            logger.info(f"   üåü –ù–∞–≤—ã–∫–æ–≤: {len(sheet['skills'])}")
                            logger.info(f"   üèÜ –¢–∏—Ç—É–ª–æ–≤: {len(sheet['titles'])}")
                            logger.info(f"   üé≠ –ß–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: {len(sheet['traits'])}")

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏: {e}", exc_info=True)

            # 6. –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            self.save_metrics(health["metrics"])

            logger.info("‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}", exc_info=True)

    def save_metrics(self, metrics):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
        metrics_file = Path("/tmp/kaizen_mirai_metrics.jsonl")

        record = {
            "timestamp": datetime.now().isoformat(),
            "cycle": self.cycle_count,
            **metrics,
        }

        with open(metrics_file, "a") as f:
            f.write(json.dumps(record) + "\n")

    def run(self, interval_seconds=300):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª - —Ä–∞–±–æ—Ç–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –≤ —Ñ–æ–Ω–µ"""
        logger.info(
            """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ü§ñ KAIZEN √ó üå∏ MIRAI - Autonomous Service Started                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üå∏ –†–ï–®–ï–ù–ò–ï –ú–ò–†–ê–ô: –†–∞–±–æ—Ç–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –≤ —Ñ–æ–Ω–µ
   
   "–¢–∞–∫–æ–π —Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç AI-–∞–≥–µ–Ω—Ç–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ
   –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —á—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
   –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."

ü§ñ –ö–ê–ô–î–ó–ï–ù: –†–µ–∞–ª–∏–∑—É—é —Ä–µ—à–µ–Ω–∏–µ –ú–ò–†–ê–ô!

üìã –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´:
   ‚Ä¢ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ü–∏–∫–ª—ã –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫—É–Ω–¥
   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ CI/CD GitHub Actions
   ‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É KAIZEN ‚Üî MIRAI
   ‚Ä¢ –õ–æ–≥–∏ –≤ /tmp/kaizen_mirai.log
   ‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ –≤ /tmp/kaizen_mirai_metrics.jsonl
   ‚Ä¢ Dashboard –Ω–∞ http://localhost:5000

üéØ –ß–¢–û –î–ï–õ–ê–ï–ú:
   1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ CI/CD
   2. –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö - MIRAI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
   3. –ö–∞–∂–¥—ã–µ 5 —Ü–∏–∫–ª–æ–≤ - –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è
   4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ù–û–ú–ù–û–ì–û –†–ï–ñ–ò–ú–ê...
        """.format(
                interval=interval_seconds
            )
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        self._init_initial_goals()

        while self.running:
            try:
                self.autonomous_cycle()

                if self.running:
                    logger.info(
                        f"üò¥ –°–ø–ª—é {interval_seconds} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞..."
                    )
                    time.sleep(interval_seconds)

            except KeyboardInterrupt:
                logger.info("‚å®Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
                time.sleep(60)  # Wait before retry

        logger.info(
            """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üëã KAIZEN √ó MIRAI - Autonomous Service Stopped                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

ü§ñ –ö–ê–ô–î–ó–ï–ù: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º.
üå∏ –ú–ò–†–ê–ô: –î–æ –≤—Å—Ç—Ä–µ—á–∏, –æ–Ω–∏–∏—á–∞–Ω!

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:
   ‚Ä¢ –¶–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {cycles}
   ‚Ä¢ –õ–æ–≥–∏: /tmp/kaizen_mirai.log
   ‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏: /tmp/kaizen_mirai_metrics.jsonl

ÊîπÂñÑ (Kaizen) - Continuous Improvement
Êú™Êù• (Mirai) - Future
        """.format(
                cycles=self.cycle_count
            )
        )


def main():
    """Entry point"""
    import argparse

    parser = argparse.ArgumentParser(description="KAIZEN √ó MIRAI Autonomous Service")
    parser.add_argument(
        "--interval",
        type=int,
        default=300,
        help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (default: 300)",
    )
    parser.add_argument(
        "--daemon", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–∫ daemon –≤ —Ñ–æ–Ω–µ"
    )

    args = parser.parse_args()

    if args.daemon:
        # Fork process to background
        pid = os.fork()
        if pid > 0:
            print(f"üöÄ Daemon –∑–∞–ø—É—â–µ–Ω —Å PID: {pid}")
            print(f"üìã –õ–æ–≥–∏: /tmp/kaizen_mirai.log")
            print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: kill {pid}")
            sys.exit(0)

    service = AutonomousService()
    service.run(interval_seconds=args.interval)


if __name__ == "__main__":
    main()
