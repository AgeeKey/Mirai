#!/usr/bin/env python3
"""
ü§ñ KAIZEN √ó üå∏ MIRAI - Autonomous Background Service
–†–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –≤ —Ñ–æ–Ω–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ª–æ–≥–∏ + web dashboard
"""

import sys
import time
import json
import logging
from pathlib import Path
from datetime import datetime
import signal
import os

sys.path.insert(0, "/root/mirai/mirai-agent")

from core.autonomous_agent import AutonomousAgent
from core.cicd_monitor import CICDMonitor

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.FileHandler("/tmp/kaizen_mirai.log"), logging.StreamHandler()],
)

logger = logging.getLogger("KAIZEN_MIRAI")


class AutonomousService:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å KAIZEN + MIRAI"""

    def __init__(self):
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KAIZEN...")
        self.kaizen = AutonomousAgent()

        logger.info("üå∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MIRAI...")
        self.mirai = AutonomousAgent()

        # Load GitHub config
        config_path = Path(__file__).parent / "configs" / "api_keys.json"
        with open(config_path) as f:
            config = json.load(f)

        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CI/CD Monitor...")
        self.monitor = CICDMonitor(
            github_token=config["GITHUB_TOKEN"],
            repo_owner="AgeeKey",
            repo_name="mirai-showcase",
        )

        self.running = True
        self.cycle_count = 0

        # Handle signals
        signal.signal(signal.SIGINT, self.shutdown)
        signal.signal(signal.SIGTERM, self.shutdown)

    def shutdown(self, signum, frame):
        """Graceful shutdown"""
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        self.running = False

    def log_separator(self):
        """–ö—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –ª–æ–≥–∞—Ö"""
        logger.info("=" * 70)

    def consult_mirai(self, question: str) -> str:
        """KAIZEN –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç—Å—è —Å MIRAI"""
        logger.info("ü§ñ –ö–ê–ô–î–ó–ï–ù —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ú–ò–†–ê–ô...")
        response = self.mirai.think(question, max_iterations=1)
        logger.info(f"üå∏ –ú–ò–†–ê–ô –æ—Ç–≤–µ—á–∞–µ—Ç: {response[:100]}...")
        return response

    def autonomous_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
        self.cycle_count += 1

        self.log_separator()
        logger.info(f"üîÑ –ê–í–¢–û–ù–û–ú–ù–´–ô –¶–ò–ö–õ #{self.cycle_count}")
        logger.info(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log_separator()

        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ CI/CD
            logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è—é –∑–¥–æ—Ä–æ–≤—å–µ CI/CD...")
            health = self.monitor.check_health()

            logger.info(f"üè• –°—Ç–∞—Ç—É—Å: {health['status']} | –û—Ü–µ–Ω–∫–∞: {health['grade']}")
            logger.info(f"‚úÖ Success Rate: {health['metrics']['success_rate']}%")

            # 2. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã - —Å–æ–≤–µ—Ç—É–µ–º—Å—è —Å MIRAI
            if not health["is_healthy"]:
                logger.warning("‚ö†Ô∏è  CI/CD –ù–ï –ó–î–û–†–û–í! –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –ú–ò–†–ê–ô...")

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–∞–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
                failures = self.monitor.get_failing_workflows()
                failures_text = "\n".join(
                    f"   ‚Ä¢ {f['name']} #{f['run_number']}" for f in failures[:5]
                )

                question = f"""
üö® –°–†–û–ß–ù–û –ú–ò–†–ê–ô! CI/CD –ø—Ä–æ–±–ª–µ–º—ã —É–∂–µ {self.cycle_count} —Ü–∏–∫–ª–æ–≤!

üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:
‚Ä¢ –°—Ç–∞—Ç—É—Å: {health['status']}
‚Ä¢ –û—Ü–µ–Ω–∫–∞: {health['grade']}
‚Ä¢ Success Rate: {health['metrics']['success_rate']}%
‚Ä¢ –ü—Ä–æ–≤–∞–ª–æ–≤: {health['metrics']['failed']}

‚ùå –£–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã:
{failures_text}

üí° –¢—ã —É–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã–±–∏—Ä–∞–ª–∞ "2. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏", –Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –ù–ï –†–ï–®–ï–ù–ê!
–ü–æ—Ä–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –ö–û–ù–ö–†–ï–¢–ù–´–ú –î–ï–ô–°–¢–í–ò–Ø–ú!

üéØ –ù–û–í–´–ï –í–ê–†–ò–ê–ù–¢–´ (–í–´–ë–ï–†–ò –û–î–ù–û):
1. –ò–°–ü–†–ê–í–ò–¢–¨ –¢–ï–°–¢–´ - —è —Å–æ–∑–¥–∞–º PR —Å —Ñ–∏–∫—Å–∞–º–∏
2. –û–¢–ö–õ–Æ–ß–ò–¢–¨ –ü–†–û–ë–õ–ï–ú–ù–´–ï –¢–ï–°–¢–´ - –≤—Ä–µ–º–µ–Ω–Ω–æ skip
3. –û–ë–ù–û–í–ò–¢–¨ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò - –≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞–∫–µ—Ç—ã
4. –£–ü–†–û–°–¢–ò–¢–¨ CI/CD - —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
5. –°–û–ó–î–ê–¢–¨ GITHUB ISSUE - –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É
6. –ü–ï–†–ï–ó–ê–ü–£–°–¢–ò–¢–¨ –¢–ï–°–¢–´ - –º–æ–∂–µ—Ç –≥–ª—é–∫

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: "–í—ã–±–∏—Ä–∞—é [–Ω–æ–º–µ—Ä]. [–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–π—á–∞—Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ]"
"""

                mirai_decision = self.consult_mirai(question)
                logger.info(f"üí° –†–µ—à–µ–Ω–∏–µ –ú–ò–†–ê–ô: {mirai_decision}")

                # KAIZEN –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ MIRAI
                if "1" in mirai_decision or "–∏—Å–ø—Ä–∞–≤–∏—Ç—å" in mirai_decision.lower():
                    logger.info("üîß –ö–ê–ô–î–ó–ï–ù: –°–æ–∑–¥–∞—é PR —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏...")
                    logger.info("   TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ PR")
                elif "2" in mirai_decision or "–æ—Ç–∫–ª—é—á–∏—Ç—å" in mirai_decision.lower():
                    logger.info("‚è≠Ô∏è  –ö–ê–ô–î–ó–ï–ù: –û—Ç–∫–ª—é—á–∞—é –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã...")
                    logger.info("   TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å skip —Ç–µ—Å—Ç–æ–≤")
                elif "3" in mirai_decision or "–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç" in mirai_decision.lower():
                    logger.info("üì¶ –ö–ê–ô–î–ó–ï–ù: –û–±–Ω–æ–≤–ª—è—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
                    logger.info("   TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ dependencies")
                elif "4" in mirai_decision or "—É–ø—Ä–æ—Å—Ç–∏—Ç—å" in mirai_decision.lower():
                    logger.info("‚úÇÔ∏è  –ö–ê–ô–î–ó–ï–ù: –£–ø—Ä–æ—â–∞—é CI/CD pipeline...")
                    logger.info("   TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–∏–µ workflow")
                elif "5" in mirai_decision or "issue" in mirai_decision.lower():
                    logger.info("ÔøΩ –ö–ê–ô–î–ó–ï–ù: –°–æ–∑–¥–∞—é GitHub Issue...")
                    logger.info("   TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ issue")
                elif "6" in mirai_decision or "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å" in mirai_decision.lower():
                    logger.info("ÔøΩ –ö–ê–ô–î–ó–ï–ù: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã...")
                    logger.info("   TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å rerun workflow")
                else:
                    logger.info("üîç –ö–ê–ô–î–ó–ï–ù: –ü—Ä–æ–¥–æ–ª–∂–∞—é –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤...")
                    for fail in failures[:3]:
                        logger.warning(f"   ‚ùå {fail['name']} #{fail['run_number']}")
            else:
                logger.info("‚ú® –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! CI/CD –∑–¥–æ—Ä–æ–≤.")

            # 3. –ö–∞–∂–¥—ã–µ 5 —Ü–∏–∫–ª–æ–≤ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º MIRAI —á—Ç–æ —É–ª—É—á—à–∏—Ç—å
            if self.cycle_count % 5 == 0:
                logger.info("üí≠ –í—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π...")

                question = """
                –¢—ã –ú–ò–†–ê–ô. –ü—Ä–æ—à–ª–æ 5 —Ü–∏–∫–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
                
                –ß—Ç–æ —É–ª—É—á—à–∏—Ç—å –¥–∞–ª—å—à–µ?
                1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ dashboard
                2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
                3. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞
                4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
                
                –í—ã–±–µ—Ä–∏ –û–î–ù–û –∏ —Å–∫–∞–∂–∏ –ø–æ—á–µ–º—É –∫—Ä–∞—Ç–∫–æ.
                """

                improvement = self.consult_mirai(question)
                logger.info(f"üéØ –ü–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏–π –æ—Ç –ú–ò–†–ê–ô: {improvement}")

            # 4. –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            self.save_metrics(health["metrics"])

            logger.info("‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}", exc_info=True)

    def save_metrics(self, metrics):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
        metrics_file = Path("/tmp/kaizen_mirai_metrics.jsonl")

        record = {
            "timestamp": datetime.now().isoformat(),
            "cycle": self.cycle_count,
            **metrics,
        }

        with open(metrics_file, "a") as f:
            f.write(json.dumps(record) + "\n")

    def run(self, interval_seconds=300):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª - —Ä–∞–±–æ—Ç–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –≤ —Ñ–æ–Ω–µ"""
        logger.info(
            """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ü§ñ KAIZEN √ó üå∏ MIRAI - Autonomous Service Started                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üå∏ –†–ï–®–ï–ù–ò–ï –ú–ò–†–ê–ô: –†–∞–±–æ—Ç–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –≤ —Ñ–æ–Ω–µ
   
   "–¢–∞–∫–æ–π —Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç AI-–∞–≥–µ–Ω—Ç–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ
   –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —á—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
   –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."

ü§ñ –ö–ê–ô–î–ó–ï–ù: –†–µ–∞–ª–∏–∑—É—é —Ä–µ—à–µ–Ω–∏–µ –ú–ò–†–ê–ô!

üìã –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´:
   ‚Ä¢ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ü–∏–∫–ª—ã –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫—É–Ω–¥
   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ CI/CD GitHub Actions
   ‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É KAIZEN ‚Üî MIRAI
   ‚Ä¢ –õ–æ–≥–∏ –≤ /tmp/kaizen_mirai.log
   ‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ –≤ /tmp/kaizen_mirai_metrics.jsonl
   ‚Ä¢ Dashboard –Ω–∞ http://localhost:5000

üéØ –ß–¢–û –î–ï–õ–ê–ï–ú:
   1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ CI/CD
   2. –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö - MIRAI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
   3. –ö–∞–∂–¥—ã–µ 5 —Ü–∏–∫–ª–æ–≤ - –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è
   4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ù–û–ú–ù–û–ì–û –†–ï–ñ–ò–ú–ê...
        """.format(
                interval=interval_seconds
            )
        )

        while self.running:
            try:
                self.autonomous_cycle()

                if self.running:
                    logger.info(
                        f"üò¥ –°–ø–ª—é {interval_seconds} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞..."
                    )
                    time.sleep(interval_seconds)

            except KeyboardInterrupt:
                logger.info("‚å®Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
                time.sleep(60)  # Wait before retry

        logger.info(
            """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üëã KAIZEN √ó MIRAI - Autonomous Service Stopped                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

ü§ñ –ö–ê–ô–î–ó–ï–ù: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º.
üå∏ –ú–ò–†–ê–ô: –î–æ –≤—Å—Ç—Ä–µ—á–∏, –æ–Ω–∏–∏—á–∞–Ω!

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:
   ‚Ä¢ –¶–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {cycles}
   ‚Ä¢ –õ–æ–≥–∏: /tmp/kaizen_mirai.log
   ‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏: /tmp/kaizen_mirai_metrics.jsonl

ÊîπÂñÑ (Kaizen) - Continuous Improvement
Êú™Êù• (Mirai) - Future
        """.format(
                cycles=self.cycle_count
            )
        )


def main():
    """Entry point"""
    import argparse

    parser = argparse.ArgumentParser(description="KAIZEN √ó MIRAI Autonomous Service")
    parser.add_argument(
        "--interval",
        type=int,
        default=300,
        help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (default: 300)",
    )
    parser.add_argument(
        "--daemon", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–∫ daemon –≤ —Ñ–æ–Ω–µ"
    )

    args = parser.parse_args()

    if args.daemon:
        # Fork process to background
        pid = os.fork()
        if pid > 0:
            print(f"üöÄ Daemon –∑–∞–ø—É—â–µ–Ω —Å PID: {pid}")
            print(f"üìã –õ–æ–≥–∏: /tmp/kaizen_mirai.log")
            print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: kill {pid}")
            sys.exit(0)

    service = AutonomousService()
    service.run(interval_seconds=args.interval)


if __name__ == "__main__":
    main()
