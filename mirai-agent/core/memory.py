"""
MIRAI Memory System - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞

–§—É–Ω–∫—Ü–∏–∏:
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
- –•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
"""

import sqlite3
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
import logging


class MiraiMemory:
    """–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è MIRAI"""

    def __init__(self, db_path: str = "data/mirai_memory.db"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏

        Args:
            db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
        """
        self.db_path = Path(db_path)
        self.db_path.parent.mkdir(parents=True, exist_ok=True)

        self.conn = sqlite3.connect(str(self.db_path), check_same_thread=False)
        self.conn.row_factory = sqlite3.Row  # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ª–æ–≤–∞—Ä–∏ –≤–º–µ—Å—Ç–æ –∫–æ—Ä—Ç–µ–∂–µ–π

        self._create_tables()

        logging.info(f"‚úÖ –ü–∞–º—è—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.db_path}")

    def _create_tables(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –ë–î –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        cursor = self.conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                task_name TEXT NOT NULL,
                description TEXT,
                status TEXT DEFAULT 'pending',
                priority TEXT DEFAULT 'medium',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                started_at TIMESTAMP,
                completed_at TIMESTAMP,
                result TEXT,
                error TEXT
            )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS action_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                task_id INTEGER,
                action_type TEXT NOT NULL,
                action_data TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                success BOOLEAN DEFAULT 1,
                FOREIGN KEY (task_id) REFERENCES tasks (id)
            )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                task_id INTEGER,
                result_type TEXT,
                content TEXT,
                file_path TEXT,
                metadata TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (task_id) REFERENCES tasks (id)
            )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS metrics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                metric_name TEXT NOT NULL,
                metric_value REAL,
                metric_unit TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                metadata TEXT
            )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –æ–±—É—á–µ–Ω–∏—è (—á—Ç–æ —É–∑–Ω–∞–ª –∞–≥–µ–Ω—Ç)
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS learnings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                topic TEXT NOT NULL,
                content TEXT NOT NULL,
                source TEXT,
                confidence REAL DEFAULT 0.5,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_used TIMESTAMP
            )
        """
        )

        self.conn.commit()
        logging.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")

    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ê–ú–ò ===

    def create_task(
        self, task_name: str, description: str = "", priority: str = "medium"
    ) -> int:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        cursor = self.conn.cursor()
        cursor.execute(
            """
            INSERT INTO tasks (task_name, description, priority)
            VALUES (?, ?, ?)
        """,
            (task_name, description, priority),
        )
        self.conn.commit()
        task_id = cursor.lastrowid

        logging.info(f"üìù –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_name} (ID: {task_id})")
        return task_id

    def start_task(self, task_id: int):
        """–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        cursor = self.conn.cursor()
        cursor.execute(
            """
            UPDATE tasks 
            SET status = 'in_progress', started_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """,
            (task_id,),
        )
        self.conn.commit()
        logging.info(f"‚ñ∂Ô∏è –ó–∞–¥–∞—á–∞ –Ω–∞—á–∞—Ç–∞: {task_id}")

    def complete_task(self, task_id: int, result: str = "", error: str = ""):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"""
        status = "completed" if not error else "failed"
        cursor = self.conn.cursor()
        cursor.execute(
            """
            UPDATE tasks 
            SET status = ?, completed_at = CURRENT_TIMESTAMP, 
                result = ?, error = ?
            WHERE id = ?
        """,
            (status, result, error, task_id),
        )
        self.conn.commit()

        emoji = "‚úÖ" if not error else "‚ùå"
        logging.info(f"{emoji} –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task_id} ({status})")

    def get_task(self, task_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID"""
        cursor = self.conn.cursor()
        cursor.execute("SELECT * FROM tasks WHERE id = ?", (task_id,))
        row = cursor.fetchone()
        return dict(row) if row else None

    def get_recent_tasks(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        cursor = self.conn.cursor()
        cursor.execute(
            """
            SELECT * FROM tasks 
            ORDER BY created_at DESC 
            LIMIT ?
        """,
            (limit,),
        )
        return [dict(row) for row in cursor.fetchall()]

    # === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô ===

    def log_action(
        self,
        action_type: str,
        action_data: Any = None,
        task_id: int = None,
        success: bool = True,
    ):
        """–ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"""
        cursor = self.conn.cursor()
        data_json = json.dumps(action_data) if action_data else None

        cursor.execute(
            """
            INSERT INTO action_logs (task_id, action_type, action_data, success)
            VALUES (?, ?, ?, ?)
        """,
            (task_id, action_type, data_json, success),
        )
        self.conn.commit()

    def get_action_history(self, task_id: int = None, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π"""
        cursor = self.conn.cursor()

        if task_id:
            cursor.execute(
                """
                SELECT * FROM action_logs 
                WHERE task_id = ?
                ORDER BY timestamp DESC 
                LIMIT ?
            """,
                (task_id, limit),
            )
        else:
            cursor.execute(
                """
                SELECT * FROM action_logs 
                ORDER BY timestamp DESC 
                LIMIT ?
            """,
                (limit,),
            )

        return [dict(row) for row in cursor.fetchall()]

    # === –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===

    def save_result(
        self,
        task_id: int,
        result_type: str,
        content: str = "",
        file_path: str = "",
        metadata: Dict = None,
    ) -> int:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã"""
        cursor = self.conn.cursor()
        metadata_json = json.dumps(metadata) if metadata else None

        cursor.execute(
            """
            INSERT INTO results (task_id, result_type, content, file_path, metadata)
            VALUES (?, ?, ?, ?, ?)
        """,
            (task_id, result_type, content, file_path, metadata_json),
        )
        self.conn.commit()

        result_id = cursor.lastrowid
        logging.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result_type} (ID: {result_id})")
        return result_id

    def get_results(self, task_id: int = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        cursor = self.conn.cursor()

        if task_id:
            cursor.execute(
                """
                SELECT * FROM results WHERE task_id = ?
                ORDER BY created_at DESC
            """,
                (task_id,),
            )
        else:
            cursor.execute(
                """
                SELECT * FROM results 
                ORDER BY created_at DESC 
                LIMIT 50
            """
            )

        return [dict(row) for row in cursor.fetchall()]

    # === –ú–ï–¢–†–ò–ö–ò –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

    def save_metric(
        self, metric_name: str, value: float, unit: str = "", metadata: Dict = None
    ):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫—É"""
        cursor = self.conn.cursor()
        metadata_json = json.dumps(metadata) if metadata else None

        cursor.execute(
            """
            INSERT INTO metrics (metric_name, metric_value, metric_unit, metadata)
            VALUES (?, ?, ?, ?)
        """,
            (metric_name, value, unit, metadata_json),
        )
        self.conn.commit()

    def get_metrics(self, metric_name: str = None, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏"""
        cursor = self.conn.cursor()

        if metric_name:
            cursor.execute(
                """
                SELECT * FROM metrics 
                WHERE metric_name = ?
                ORDER BY timestamp DESC 
                LIMIT ?
            """,
                (metric_name, limit),
            )
        else:
            cursor.execute(
                """
                SELECT * FROM metrics 
                ORDER BY timestamp DESC 
                LIMIT ?
            """,
                (limit,),
            )

        return [dict(row) for row in cursor.fetchall()]

    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        cursor = self.conn.cursor()

        stats = {}

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        cursor.execute(
            """
            SELECT status, COUNT(*) as count 
            FROM tasks 
            GROUP BY status
        """
        )
        stats["tasks_by_status"] = {
            row["status"]: row["count"] for row in cursor.fetchall()
        }

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
        cursor.execute("SELECT COUNT(*) as count FROM action_logs")
        stats["total_actions"] = cursor.fetchone()["count"]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        cursor.execute("SELECT COUNT(*) as count FROM results")
        stats["total_results"] = cursor.fetchone()["count"]

        # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        cursor.execute(
            """
            SELECT 
                SUM(CASE WHEN success = 1 THEN 1 ELSE 0 END) as successful,
                COUNT(*) as total
            FROM action_logs
        """
        )
        row = cursor.fetchone()
        if row["total"] > 0:
            stats["success_rate"] = row["successful"] / row["total"] * 100
        else:
            stats["success_rate"] = 0

        return stats

    # === –û–ë–£–ß–ï–ù–ò–ï (–ó–ù–ê–ù–ò–Ø) ===

    def save_learning(
        self, topic: str, content: str, source: str = "", confidence: float = 0.5
    ) -> int:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ"""
        cursor = self.conn.cursor()
        cursor.execute(
            """
            INSERT INTO learnings (topic, content, source, confidence)
            VALUES (?, ?, ?, ?)
        """,
            (topic, content, source, confidence),
        )
        self.conn.commit()

        learning_id = cursor.lastrowid
        logging.info(f"üß† –ó–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {topic} (ID: {learning_id})")
        return learning_id

    def get_learnings(self, topic: str = None, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è"""
        cursor = self.conn.cursor()

        if topic:
            cursor.execute(
                """
                SELECT * FROM learnings 
                WHERE topic LIKE ?
                ORDER BY confidence DESC, created_at DESC
                LIMIT ?
            """,
                (f"%{topic}%", limit),
            )
        else:
            cursor.execute(
                """
                SELECT * FROM learnings 
                ORDER BY created_at DESC 
                LIMIT ?
            """,
                (limit,),
            )

        return [dict(row) for row in cursor.fetchall()]

    def update_learning_usage(self, learning_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏—è"""
        cursor = self.conn.cursor()
        cursor.execute(
            """
            UPDATE learnings 
            SET last_used = CURRENT_TIMESTAMP 
            WHERE id = ?
        """,
            (learning_id,),
        )
        self.conn.commit()

    # === –£–¢–ò–õ–ò–¢–´ ===

    def clear_old_data(self, days: int = 30):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ X –¥–Ω–µ–π)"""
        cursor = self.conn.cursor()

        # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
        cursor.execute(
            """
            DELETE FROM action_logs 
            WHERE timestamp < datetime('now', '-' || ? || ' days')
        """,
            (days,),
        )

        deleted_logs = cursor.rowcount
        self.conn.commit()

        logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_logs} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤")
        return deleted_logs

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
        self.conn.close()
        logging.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if hasattr(self, "conn"):
            self.conn.close()


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ MIRAI...\n")

    # –°–æ–∑–¥–∞—Ç—å –ø–∞–º—è—Ç—å
    memory = MiraiMemory()

    # –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
    task_id = memory.create_task(
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", priority="high"
    )

    # –ù–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É
    memory.start_task(task_id)

    # –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
    memory.log_action("test_action", {"data": "test"}, task_id=task_id)
    memory.log_action("another_action", {"value": 123}, task_id=task_id)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    memory.save_result(
        task_id, "test_result", content="–¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!", metadata={"test": True}
    )

    # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
    memory.complete_task(task_id, result="–í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
    memory.save_metric("test_metric", 42.5, "units")

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏–µ
    memory.save_learning(
        "SQLite",
        "SQLite - —ç—Ç–æ –ª–µ–≥–∫–æ–≤–µ—Å–Ω–∞—è –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è –ë–î",
        source="–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
        confidence=0.9,
    )

    # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = memory.get_statistics()

    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"–ó–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º: {stats['tasks_by_status']}")
    print(f"–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_actions']}")
    print(f"–í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {stats['total_results']}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%")

    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏
    recent_tasks = memory.get_recent_tasks(limit=5)
    print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏: {len(recent_tasks)}")
    for task in recent_tasks:
        print(f"  - {task['task_name']} ({task['status']})")

    print("\n‚úÖ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
