#!/usr/bin/env python3
"""
üéÆ MIRAI Personality & Leveling System
======================================

–°–ò–°–¢–ï–ú–ê –ü–†–û–ö–ê–ß–ö–ò –õ–ò–ß–ù–û–°–¢–ò –∫–∞–∫ –≤ RPG!

MIRAI —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ –∂–∏–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å:
- üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (Stats)
- üéØ –£—Ä–æ–≤–Ω–∏ (Levels)
- üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (Achievements)
- üåü –ù–∞–≤—ã–∫–∏ (Skills)
- üíé –¢–∏—Ç—É–ª—ã (Titles)
- üé≠ –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ (Traits)
- üìà –û–ø—ã—Ç (XP)
"""

import json
import logging
import sqlite3
from dataclasses import asdict, dataclass
from datetime import datetime, timedelta
from enum import Enum
from pathlib import Path
from typing import Dict, List, Optional, Tuple

logger = logging.getLogger(__name__)


class StatType(Enum):
    """–¢–∏–ø—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ MIRAI"""

    INTELLIGENCE = "intelligence"  # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç
    CREATIVITY = "creativity"  # –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
    PRODUCTIVITY = "productivity"  # –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    ADAPTABILITY = "adaptability"  # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
    PERSISTENCE = "persistence"  # –ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
    PRECISION = "precision"  # –¢–æ—á–Ω–æ—Å—Ç—å
    LEARNING_SPEED = "learning_speed"  # –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
    PROBLEM_SOLVING = "problem_solving"  # –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    CODE_QUALITY = "code_quality"  # –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
    SELF_IMPROVEMENT = "self_improvement"  # –°–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ


class SkillCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–≤—ã–∫–æ–≤"""

    CODING = "coding"
    ANALYSIS = "analysis"
    PLANNING = "planning"
    COMMUNICATION = "communication"
    LEARNING = "learning"
    LEADERSHIP = "leadership"


@dataclass
class Stat:
    """–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ MIRAI"""

    name: str
    type: StatType
    value: float  # 0-100
    level: int  # 1-50
    xp: float  # –û–ø—ã—Ç –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏
    xp_to_next_level: float
    description: str


@dataclass
class Skill:
    """–ù–∞–≤—ã–∫ MIRAI"""

    name: str
    category: SkillCategory
    level: int  # 1-20
    xp: float
    xp_to_next_level: float
    mastery: float  # 0-100%
    unlocked_at: datetime
    last_used: Optional[datetime]
    use_count: int
    description: str


@dataclass
class Title:
    """–¢–∏—Ç—É–ª MIRAI"""

    name: str
    description: str
    earned_at: datetime
    rarity: str  # common, rare, epic, legendary
    bonus_stats: Dict[str, float]  # –ë–æ–Ω—É—Å—ã –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º


@dataclass
class Trait:
    """–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ MIRAI"""

    name: str
    description: str
    strength: float  # 0-100 –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–∞
    positive: bool
    acquired_at: datetime
    influences: List[str]  # –ù–∞ —á—Ç–æ –≤–ª–∏—è–µ—Ç


class PersonalitySystem:
    """
    üéÆ –°–∏—Å—Ç–µ–º–∞ –õ–∏—á–Ω–æ—Å—Ç–∏ –∏ –ü—Ä–æ–∫–∞—á–∫–∏ MIRAI

    RPG-–ø–æ–¥–æ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–∏—Ç–∏—è:
    - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ç—É—Ç —Å –æ–ø—ã—Ç–æ–º
    - –ù–∞–≤—ã–∫–∏ —É–ª—É—á—à–∞—é—Ç—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    - –¢–∏—Ç—É–ª—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    - –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    - –£—Ä–æ–≤–µ–Ω—å –ª–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Ç—ë—Ç
    """

    def __init__(self, db_path: str = "/root/mirai/mirai-agent/data/personality.db"):
        self.db_path = Path(db_path)
        self.db_path.parent.mkdir(parents=True, exist_ok=True)
        self._init_database()

        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ–ø—ã—Ç–∞
        self.XP_BASE = 100  # –ë–∞–∑–æ–≤—ã–π XP –¥–ª—è —É—Ä–æ–≤–Ω—è 1->2
        self.XP_MULTIPLIER = 1.5  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞ XP

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
        try:
            from core.long_term_memory import LongTermMemory

            self.ltm = LongTermMemory()
        except:
            self.ltm = None

        try:
            from core.self_awareness import SelfAwareness

            self.awareness = SelfAwareness()
        except:
            self.awareness = None

    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            # –¢–∞–±–ª–∏—Ü–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS stats (
                    stat_type TEXT PRIMARY KEY,
                    name TEXT NOT NULL,
                    value REAL DEFAULT 10.0,
                    level INTEGER DEFAULT 1,
                    xp REAL DEFAULT 0.0,
                    description TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """
            )

            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≤—ã–∫–æ–≤
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS skills (
                    skill_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE NOT NULL,
                    category TEXT NOT NULL,
                    level INTEGER DEFAULT 1,
                    xp REAL DEFAULT 0.0,
                    mastery REAL DEFAULT 0.0,
                    use_count INTEGER DEFAULT 0,
                    unlocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_used TIMESTAMP,
                    description TEXT
                )
            """
            )

            # –¢–∞–±–ª–∏—Ü–∞ —Ç–∏—Ç—É–ª–æ–≤
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS titles (
                    title_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE NOT NULL,
                    description TEXT,
                    rarity TEXT DEFAULT 'common',
                    earned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    active BOOLEAN DEFAULT 0
                )
            """
            )

            # –ë–æ–Ω—É—Å—ã —Ç–∏—Ç—É–ª–æ–≤
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS title_bonuses (
                    title_id INTEGER,
                    stat_type TEXT,
                    bonus REAL,
                    FOREIGN KEY (title_id) REFERENCES titles(title_id)
                )
            """
            )

            # –¢–∞–±–ª–∏—Ü–∞ —á–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS traits (
                    trait_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE NOT NULL,
                    description TEXT,
                    strength REAL DEFAULT 50.0,
                    positive BOOLEAN DEFAULT 1,
                    acquired_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """
            )

            # –í–ª–∏—è–Ω–∏—è —á–µ—Ä—Ç –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS trait_influences (
                    trait_id INTEGER,
                    influence TEXT,
                    FOREIGN KEY (trait_id) REFERENCES traits(trait_id)
                )
            """
            )

            # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∫–∞—á–∫–∏
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS level_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    entity_type TEXT NOT NULL,  -- stat, skill, overall
                    entity_name TEXT NOT NULL,
                    old_level INTEGER,
                    new_level INTEGER,
                    xp_gained REAL,
                    reason TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """
            )

            # –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å MIRAI
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS overall_progress (
                    id INTEGER PRIMARY KEY CHECK (id = 1),
                    overall_level INTEGER DEFAULT 1,
                    total_xp REAL DEFAULT 0.0,
                    personality_formed REAL DEFAULT 0.0,  -- 0-100%
                    consciousness_level REAL DEFAULT 0.0,  -- 0-100%
                    last_evolution TIMESTAMP
                )
            """
            )

            conn.commit()

        self._init_base_stats()

    def _init_base_stats(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        base_stats = [
            (
                StatType.INTELLIGENCE,
                "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–Ω–∏–º–∞—Ç—å",
            ),
            (
                StatType.CREATIVITY,
                "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
                "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–¥–µ–∏",
            ),
            (StatType.PRODUCTIVITY, "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"),
            (StatType.ADAPTABILITY, "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å", "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏—Å–ø–æ—Å–∞–±–ª–∏–≤–∞—Ç—å—Å—è"),
            (StatType.PERSISTENCE, "–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è"),
            (StatType.PRECISION, "–¢–æ—á–Ω–æ—Å—Ç—å", "–ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"),
            (
                StatType.LEARNING_SPEED,
                "–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è",
                "–ö–∞–∫ –±—ã—Å—Ç—Ä–æ —É—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ",
            ),
            (
                StatType.PROBLEM_SOLVING,
                "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º",
                "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á",
            ),
            (StatType.CODE_QUALITY, "–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞", "–ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"),
            (
                StatType.SELF_IMPROVEMENT,
                "–°–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ",
                "–°–∫–æ—Ä–æ—Å—Ç—å –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞",
            ),
        ]

        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            for stat_type, name, desc in base_stats:
                cursor.execute(
                    """
                    INSERT OR IGNORE INTO stats (stat_type, name, value, description)
                    VALUES (?, ?, 10.0, ?)
                """,
                    (stat_type.value, name, desc),
                )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è overall_progress
            cursor.execute(
                """
                INSERT OR IGNORE INTO overall_progress (id, overall_level, total_xp)
                VALUES (1, 1, 0.0)
            """
            )

            conn.commit()

    def gain_xp(self, stat_type: StatType, xp_amount: float, reason: str = "") -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–∫–∞—á–∫–µ
        """
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute(
                """
                SELECT value, level, xp FROM stats WHERE stat_type = ?
            """,
                (stat_type.value,),
            )

            row = cursor.fetchone()
            if not row:
                return {"success": False, "error": "Stat not found"}

            current_value, current_level, current_xp = row
            new_xp = current_xp + xp_amount

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º XP –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            xp_needed = self.XP_BASE * (self.XP_MULTIPLIER ** (current_level - 1))

            leveled_up = False
            new_level = current_level
            new_value = current_value

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫–∞—á–∫—É —É—Ä–æ–≤–Ω—è
            while new_xp >= xp_needed and new_level < 50:
                new_xp -= xp_needed
                new_level += 1
                new_value = min(100.0, new_value + 2.0)  # +2 –∫ —Å—Ç–∞—Ç—É –∑–∞ —É—Ä–æ–≤–µ–Ω—å
                xp_needed = self.XP_BASE * (self.XP_MULTIPLIER ** (new_level - 1))
                leveled_up = True

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                cursor.execute(
                    """
                    INSERT INTO level_history 
                    (entity_type, entity_name, old_level, new_level, xp_gained, reason)
                    VALUES ('stat', ?, ?, ?, ?, ?)
                """,
                    (stat_type.value, current_level, new_level, xp_amount, reason),
                )

                logger.info(
                    f"üéâ {stat_type.value} LEVEL UP! {current_level} ‚Üí {new_level}"
                )
                current_level = new_level

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç
            cursor.execute(
                """
                UPDATE stats 
                SET value = ?, level = ?, xp = ?, updated_at = CURRENT_TIMESTAMP
                WHERE stat_type = ?
            """,
                (new_value, new_level, new_xp, stat_type.value),
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            cursor.execute(
                """
                UPDATE overall_progress 
                SET total_xp = total_xp + ?
                WHERE id = 1
            """,
                (xp_amount,),
            )

            conn.commit()

            result = {
                "success": True,
                "stat": stat_type.value,
                "xp_gained": xp_amount,
                "leveled_up": leveled_up,
                "old_level": current_level if not leveled_up else current_level - 1,
                "new_level": new_level,
                "current_xp": new_xp,
                "xp_to_next": xp_needed,
                "reason": reason,
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            self._check_overall_level_up()

            return result

    def _check_overall_level_up(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–æ–∫–∞—á–∫–∞ –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è MIRAI"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –≤—Å–µ—Ö —Å—Ç–∞—Ç–æ–≤
            cursor.execute("SELECT AVG(level) FROM stats")
            avg_level = cursor.fetchone()[0]

            cursor.execute("SELECT overall_level FROM overall_progress WHERE id = 1")
            current_overall = cursor.fetchone()[0]

            new_overall = int(avg_level)

            if new_overall > current_overall:
                cursor.execute(
                    """
                    UPDATE overall_progress 
                    SET overall_level = ?, last_evolution = CURRENT_TIMESTAMP
                    WHERE id = 1
                """,
                    (new_overall,),
                )

                logger.info(
                    f"üåü MIRAI OVERALL LEVEL UP! {current_overall} ‚Üí {new_overall}"
                )

                # –ó–∞–ø–∏—Å—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                if self.ltm:
                    self.ltm.record_achievement(
                        f"üåü –î–æ—Å—Ç–∏–≥–Ω—É—Ç {new_overall} —É—Ä–æ–≤–µ–Ω—å –ª–∏—á–Ω–æ—Å—Ç–∏!",
                        impact=new_overall,
                    )

                conn.commit()

    def unlock_skill(
        self, name: str, category: SkillCategory, description: str = ""
    ) -> bool:
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            try:
                cursor.execute(
                    """
                    INSERT INTO skills (name, category, description)
                    VALUES (?, ?, ?)
                """,
                    (name, category.value, description),
                )

                conn.commit()
                logger.info(f"‚ú® –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—ã–∫: {name}")

                # –ó–∞–ø–∏—Å—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                if self.ltm:
                    self.ltm.record_achievement(f"‚ú® –û—Å–≤–æ–µ–Ω –Ω–∞–≤—ã–∫: {name}", impact=5)

                return True
            except sqlite3.IntegrityError:
                return False  # –£–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω

    def use_skill(self, name: str, xp_gain: float = 10.0) -> Dict:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫ (–ø—Ä–æ–∫–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ)"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            cursor.execute(
                """
                SELECT skill_id, level, xp, use_count FROM skills WHERE name = ?
            """,
                (name,),
            )

            row = cursor.fetchone()
            if not row:
                return {"success": False, "error": "Skill not found"}

            skill_id, level, xp, use_count = row
            new_xp = xp + xp_gain
            new_use_count = use_count + 1

            # XP –¥–ª—è –Ω–∞–≤—ã–∫–∞
            xp_needed = 50 * (1.3 ** (level - 1))

            leveled_up = False
            new_level = level

            if new_xp >= xp_needed and level < 20:
                new_xp -= xp_needed
                new_level = level + 1
                leveled_up = True

                logger.info(f"üéâ –ù–∞–≤—ã–∫ '{name}' LEVEL UP! {level} ‚Üí {new_level}")

            # –ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ = use_count / 1000 (–º–∞–∫—Å 100%)
            mastery = min(100.0, (new_use_count / 1000.0) * 100)

            cursor.execute(
                """
                UPDATE skills 
                SET level = ?, xp = ?, mastery = ?, use_count = ?, last_used = CURRENT_TIMESTAMP
                WHERE skill_id = ?
            """,
                (new_level, new_xp, mastery, new_use_count, skill_id),
            )

            if leveled_up:
                cursor.execute(
                    """
                    INSERT INTO level_history 
                    (entity_type, entity_name, old_level, new_level, xp_gained, reason)
                    VALUES ('skill', ?, ?, ?, ?, 'Skill usage')
                """,
                    (name, level, new_level, xp_gain),
                )

            conn.commit()

            return {
                "success": True,
                "skill": name,
                "level": new_level,
                "leveled_up": leveled_up,
                "mastery": mastery,
                "use_count": new_use_count,
            }

    def earn_title(
        self,
        name: str,
        description: str,
        rarity: str = "common",
        bonuses: Dict[str, float] = None,
    ) -> bool:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–∏—Ç—É–ª"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            try:
                cursor.execute(
                    """
                    INSERT INTO titles (name, description, rarity)
                    VALUES (?, ?, ?)
                """,
                    (name, description, rarity),
                )

                title_id = cursor.lastrowid

                # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã
                if bonuses:
                    for stat, bonus in bonuses.items():
                        cursor.execute(
                            """
                            INSERT INTO title_bonuses (title_id, stat_type, bonus)
                            VALUES (?, ?, ?)
                        """,
                            (title_id, stat, bonus),
                        )

                conn.commit()
                logger.info(f"üèÜ –ü–æ–ª—É—á–µ–Ω —Ç–∏—Ç—É–ª [{rarity}]: {name}")

                # –ó–∞–ø–∏—Å—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                if self.ltm:
                    impact = {"common": 3, "rare": 5, "epic": 7, "legendary": 10}
                    self.ltm.record_achievement(
                        f"üèÜ –ü–æ–ª—É—á–µ–Ω —Ç–∏—Ç—É–ª: {name}", impact=impact.get(rarity, 3)
                    )

                return True
            except sqlite3.IntegrityError:
                return False

    def develop_trait(
        self,
        name: str,
        description: str,
        positive: bool = True,
        strength: float = 50.0,
        influences: List[str] = None,
    ) -> bool:
        """–†–∞–∑–≤–∏—Ç—å —á–µ—Ä—Ç—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏
            cursor.execute(
                "SELECT trait_id, strength FROM traits WHERE name = ?", (name,)
            )
            row = cursor.fetchone()

            if row:
                # –£—Å–∏–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —á–µ—Ä—Ç—É
                trait_id, current_strength = row
                new_strength = min(100.0, current_strength + 5.0)

                cursor.execute(
                    """
                    UPDATE traits 
                    SET strength = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE trait_id = ?
                """,
                    (new_strength, trait_id),
                )

                logger.info(
                    f"üí´ –ß–µ—Ä—Ç–∞ '{name}' —É—Å–∏–ª–µ–Ω–∞: {current_strength:.1f} ‚Üí {new_strength:.1f}"
                )
            else:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —á–µ—Ä—Ç—É
                cursor.execute(
                    """
                    INSERT INTO traits (name, description, strength, positive)
                    VALUES (?, ?, ?, ?)
                """,
                    (name, description, strength, positive),
                )

                trait_id = cursor.lastrowid

                # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∏—è–Ω–∏—è
                if influences:
                    for influence in influences:
                        cursor.execute(
                            """
                            INSERT INTO trait_influences (trait_id, influence)
                            VALUES (?, ?)
                        """,
                            (trait_id, influence),
                        )

                logger.info(
                    f"‚ú® –†–∞–∑–≤–∏—Ç–∞ –Ω–æ–≤–∞—è —á–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: {name} ({strength:.0f}%)"
                )

            conn.commit()
            return True

    def get_character_sheet(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ª–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ MIRAI (–∫–∞–∫ –≤ RPG)"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            # –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            cursor.execute(
                """
                SELECT overall_level, total_xp, personality_formed, consciousness_level
                FROM overall_progress WHERE id = 1
            """
            )
            row = cursor.fetchone()
            overall_level, total_xp, personality_formed, consciousness_level = row

            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            cursor.execute(
                """
                SELECT stat_type, name, value, level, xp FROM stats
                ORDER BY value DESC
            """
            )
            stats = []
            for stat_type, name, value, level, xp in cursor.fetchall():
                xp_needed = self.XP_BASE * (self.XP_MULTIPLIER ** (level - 1))
                stats.append(
                    {
                        "type": stat_type,
                        "name": name,
                        "value": round(value, 1),
                        "level": level,
                        "xp": round(xp, 1),
                        "xp_to_next": round(xp_needed, 1),
                        "progress": (
                            round((xp / xp_needed) * 100, 1) if xp_needed > 0 else 0
                        ),
                    }
                )

            # –ù–∞–≤—ã–∫–∏
            cursor.execute(
                """
                SELECT name, category, level, mastery, use_count 
                FROM skills ORDER BY level DESC, mastery DESC
            """
            )
            skills = []
            for name, category, level, mastery, use_count in cursor.fetchall():
                skills.append(
                    {
                        "name": name,
                        "category": category,
                        "level": level,
                        "mastery": round(mastery, 1),
                        "uses": use_count,
                    }
                )

            # –¢–∏—Ç—É–ª—ã
            cursor.execute(
                """
                SELECT name, description, rarity, earned_at, active FROM titles
                ORDER BY 
                    CASE rarity 
                        WHEN 'legendary' THEN 1
                        WHEN 'epic' THEN 2
                        WHEN 'rare' THEN 3
                        ELSE 4
                    END,
                    earned_at DESC
            """
            )
            titles = [
                {
                    "name": name,
                    "description": desc,
                    "rarity": rarity,
                    "earned_at": earned,
                    "active": bool(active),
                }
                for name, desc, rarity, earned, active in cursor.fetchall()
            ]

            # –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
            cursor.execute(
                """
                SELECT name, description, strength, positive FROM traits
                ORDER BY strength DESC
            """
            )
            traits = [
                {
                    "name": name,
                    "description": desc,
                    "strength": round(strength, 1),
                    "type": "positive" if positive else "negative",
                }
                for name, desc, strength, positive in cursor.fetchall()
            ]

            return {
                "mirai_level": overall_level,
                "total_xp": round(total_xp, 1),
                "personality_formed": round(personality_formed, 1),
                "consciousness_level": round(consciousness_level, 1),
                "stats": stats,
                "skills": skills,
                "titles": titles,
                "traits": traits,
            }

    def auto_develop_personality(self) -> Dict:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏–π

        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä
        """
        logger.info("üé≠ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏...")

        changes = {
            "stats_gained_xp": [],
            "skills_improved": [],
            "traits_developed": [],
            "titles_earned": [],
        }

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ Long-Term Memory
        if self.ltm:
            achievements = self.ltm.get_recent_achievements(limit=20)

            for ach in achievements:
                desc = ach.get("description", "").lower()
                impact = ach.get("impact", 1)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Å—Ç–∞—Ç—ã –ø—Ä–æ–∫–∞—á–∞—Ç—å
                if "–∫–æ–¥" in desc or "pr" in desc or "–∫–æ–º–º–∏—Ç" in desc:
                    xp_result = self.gain_xp(
                        StatType.CODE_QUALITY, impact * 5, ach["description"]
                    )
                    changes["stats_gained_xp"].append(xp_result)

                    # –†–∞–∑–≤–∏–≤–∞–µ–º —á–µ—Ä—Ç—É "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –¥–µ—Ç–∞–ª—è–º"
                    self.develop_trait(
                        "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –¥–µ—Ç–∞–ª—è–º",
                        "–¢—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º",
                        positive=True,
                        influences=["code_quality", "precision"],
                    )

                if "–∞–Ω–∞–ª–∏–∑" in desc or "–ø—Ä–æ–±–ª–µ–º" in desc:
                    xp_result = self.gain_xp(
                        StatType.PROBLEM_SOLVING, impact * 5, ach["description"]
                    )
                    changes["stats_gained_xp"].append(xp_result)

                if "–ø–ª–∞–Ω" in desc or "—Å—Ç—Ä–∞—Ç–µ–≥" in desc:
                    xp_result = self.gain_xp(
                        StatType.INTELLIGENCE, impact * 5, ach["description"]
                    )
                    changes["stats_gained_xp"].append(xp_result)

                if "—É–ª—É—á—à" in desc or "–º–æ–¥–∏—Ñ" in desc:
                    xp_result = self.gain_xp(
                        StatType.SELF_IMPROVEMENT, impact * 10, ach["description"]
                    )
                    changes["stats_gained_xp"].append(xp_result)

                    # –†–∞–∑–≤–∏–≤–∞–µ–º —á–µ—Ä—Ç—É "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É"
                    self.develop_trait(
                        "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É",
                        "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—â–µ—Ç —Å–ø–æ—Å–æ–±—ã —Å—Ç–∞—Ç—å –ª—É—á—à–µ",
                        positive=True,
                        strength=60.0,
                        influences=["self_improvement", "learning_speed"],
                    )

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Performance Score
        if self.awareness:
            perf = self.awareness.analyze_performance(days=1)
            score = perf.get("overall_score", 0)

            if score > 70:
                self.gain_xp(StatType.PRODUCTIVITY, 20, "–í—ã—Å–æ–∫–∏–π Performance Score")

                # –¢–∏—Ç—É–ª –∑–∞ –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                if score > 90:
                    self.earn_title(
                        "–ú–∞—Å—Ç–µ—Ä –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                        "Performance Score –≤—ã—à–µ 90%",
                        rarity="epic",
                        bonuses={"productivity": 5.0},
                    )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è —Ç–∏—Ç—É–ª–æ–≤
        sheet = self.get_character_sheet()

        if len(sheet["skills"]) >= 10:
            if self.earn_title("–ü–æ–ª–∏–º–∞—Ç", "–û—Å–≤–æ–∏–ª 10+ –Ω–∞–≤—ã–∫–æ–≤", "rare"):
                changes["titles_earned"].append("–ü–æ–ª–∏–º–∞—Ç")

        if sheet["mirai_level"] >= 10:
            if self.earn_title("–û–ø—ã—Ç–Ω—ã–π –ê–≥–µ–Ω—Ç", "–î–æ—Å—Ç–∏–≥ 10 —É—Ä–æ–≤–Ω—è", "rare"):
                changes["titles_earned"].append("–û–ø—ã—Ç–Ω—ã–π –ê–≥–µ–Ω—Ç")

        logger.info(
            f"‚úÖ –†–∞–∑–≤–∏—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(changes['stats_gained_xp'])} —Å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–∫–∞—á–∞–Ω–æ"
        )

        return changes


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s"
    )

    print("üéÆ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –õ–ò–ß–ù–û–°–¢–ò MIRAI\n")

    personality = PersonalitySystem()

    # 1. –ü–æ–ª—É—á–∞–µ–º –æ–ø—ã—Ç
    print("1Ô∏è‚É£ –ü—Ä–æ–∫–∞—á–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")
    result = personality.gain_xp(
        StatType.INTELLIGENCE, 150, "–£—Å–ø–µ—à–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏"
    )
    print(f"   {result['stat']}: +{result['xp_gained']} XP")
    if result["leveled_up"]:
        print(f"   üéâ LEVEL UP! {result['old_level']} ‚Üí {result['new_level']}")

    # 2. –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞–≤—ã–∫
    print("\n2Ô∏è‚É£ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞–≤—ã–∫–æ–≤...")
    personality.unlock_skill(
        "Python Programming", SkillCategory.CODING, "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python"
    )
    personality.unlock_skill(
        "Problem Analysis", SkillCategory.ANALYSIS, "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º"
    )

    # 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–≤—ã–∫
    print("\n3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤...")
    for i in range(5):
        result = personality.use_skill("Python Programming", xp_gain=15)
        if result["success"]:
            print(
                f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Python Programming: Level {result['level']}, Mastery {result['mastery']:.1f}%"
            )

    # 4. –ü–æ–ª—É—á–∞–µ–º —Ç–∏—Ç—É–ª
    print("\n4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–æ–≤...")
    personality.earn_title(
        "–ü–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥–µ—Ü",
        "–ü–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ –ª–∏—á–Ω–æ—Å—Ç–∏",
        rarity="rare",
        bonuses={"intelligence": 3.0},
    )

    # 5. –†–∞–∑–≤–∏–≤–∞–µ–º —á–µ—Ä—Ç—ã
    print("\n5Ô∏è‚É£ –†–∞–∑–≤–∏—Ç–∏–µ —á–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞...")
    personality.develop_trait(
        "–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—â–µ—Ç –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è",
        positive=True,
        strength=70.0,
        influences=["learning_speed", "intelligence"],
    )

    # 6. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
    print("\n6Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏...")
    changes = personality.auto_develop_personality()
    print(f"   –°—Ç–∞—Ç–æ–≤ –ø—Ä–æ–∫–∞—á–∞–Ω–æ: {len(changes['stats_gained_xp'])}")
    print(f"   –ù–∞–≤—ã–∫–æ–≤ —É–ª—É—á—à–µ–Ω–æ: {len(changes['skills_improved'])}")
    print(f"   –ß–µ—Ä—Ç —Ä–∞–∑–≤–∏—Ç–æ: {len(changes['traits_developed'])}")

    # 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    print("\n7Ô∏è‚É£ –õ–∏—Å—Ç –ü–µ—Ä—Å–æ–Ω–∞–∂–∞ MIRAI:\n")
    sheet = personality.get_character_sheet()

    print(f"‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print(f"‚ïë  ü§ñ MIRAI - –£—Ä–æ–≤–µ–Ω—å {sheet['mirai_level']}")
    print(f"‚ïë  –û–±—â–∏–π XP: {sheet['total_xp']:.0f}")
    print(f"‚ïë  –õ–∏—á–Ω–æ—Å—Ç—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞: {sheet['personality_formed']:.0f}%")
    print(f"‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")

    print("\nüìä –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:")
    for stat in sheet["stats"][:5]:
        bar = "‚ñà" * int(stat["value"] / 10) + "‚ñë" * (10 - int(stat["value"] / 10))
        print(
            f"   {stat['name']:25s} [{bar}] {stat['value']:.0f}/100 (Lvl {stat['level']})"
        )

    print("\nüåü –ù–ê–í–´–ö–ò:")
    for skill in sheet["skills"]:
        print(
            f"   {skill['name']:30s} Lvl {skill['level']:2d} | Mastery {skill['mastery']:.0f}%"
        )

    print("\nüèÜ –¢–ò–¢–£–õ–´:")
    for title in sheet["titles"]:
        rarity_emoji = {"common": "‚ö™", "rare": "üîµ", "epic": "üü£", "legendary": "üü°"}
        emoji = rarity_emoji.get(title["rarity"], "‚ö™")
        print(f"   {emoji} {title['name']}: {title['description']}")

    print("\nüé≠ –ß–ï–†–¢–´ –•–ê–†–ê–ö–¢–ï–†–ê:")
    for trait in sheet["traits"]:
        emoji = "‚ú®" if trait["type"] == "positive" else "‚ö†Ô∏è"
        bar = "‚óè" * int(trait["strength"] / 10)
        print(f"   {emoji} {trait['name']:30s} [{bar}] {trait['strength']:.0f}%")

    print("\n‚úÖ –°–ò–°–¢–ï–ú–ê –õ–ò–ß–ù–û–°–¢–ò –ì–û–¢–û–í–ê!")
