"""
AI TOOLS - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è AI –∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import subprocess
import os
from typing import Optional, List, Dict
import requests
from bs4 import BeautifulSoup


class AITools:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π AI"""
    
    def __init__(self):
        self.web_dir = "/root/mirai/mirai-agent/web"
        
    async def search_internet(self, query: str, max_results: int = 5) -> str:
        """
        –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç DuckDuckGo HTML (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∞)
        """
        try:
            loop = asyncio.get_running_loop()
            return await loop.run_in_executor(None, self._search_sync, query, max_results)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}"
    
    def _search_sync(self, query: str, max_results: int) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ executor)"""
        try:
            # DuckDuckGo HTML –ø–æ–∏—Å–∫ (–ø—Ä–æ—Å—Ç–æ–π, –±–µ–∑ API)
            url = f"https://html.duckduckgo.com/html/?q={query}"
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            }
            
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            results = []
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in soup.find_all('div', class_='result', limit=max_results):
                title_elem = result.find('a', class_='result__a')
                snippet_elem = result.find('a', class_='result__snippet')
                
                if title_elem:
                    title = title_elem.get_text(strip=True)
                    link = title_elem.get('href', '')
                    snippet = snippet_elem.get_text(strip=True) if snippet_elem else ''
                    
                    results.append(f"üìå {title}\n   {snippet}\n   üîó {link}")
            
            if results:
                return f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n" + "\n\n".join(results)
            else:
                return f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}"
    
    async def create_python_file(self, filename: str, code: str, description: str = "") -> str:
        """–°–æ–∑–¥–∞—Ç—å Python —Ñ–∞–π–ª"""
        try:
            filepath = os.path.join("/root/mirai/mirai-agent", filename)
            
            # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs(os.path.dirname(filepath), exist_ok=True)
            
            # –ü–∏—à–µ–º –∫–æ–¥
            with open(filepath, 'w', encoding='utf-8') as f:
                if description:
                    f.write(f'"""\n{description}\n"""\n\n')
                f.write(code)
            
            return f"‚úÖ Python —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filepath}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Python —Ñ–∞–π–ª–∞: {e}"
    
    async def create_web_file(self, filename: str, content: str, file_type: str = "html") -> str:
        """
        –°–æ–∑–¥–∞—Ç—å –≤–µ–± —Ñ–∞–π–ª (HTML/CSS/JS)
        
        Args:
            filename: –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "dashboard.html")
            content: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            file_type: —Ç–∏–ø —Ñ–∞–π–ª–∞ (html, css, js)
        """
        try:
            filepath = os.path.join(self.web_dir, filename)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            return f"‚úÖ –í–µ–± —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filepath}\nüåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ: http://localhost:8000/static/{filename}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–± —Ñ–∞–π–ª–∞: {e}"
    
    async def run_python_code(self, code: str, timeout: int = 30) -> str:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å Python –∫–æ–¥ (–±–µ–∑–æ–ø–∞—Å–Ω–æ, —Å —Ç–∞–π–º–∞—É—Ç–æ–º)
        
        Args:
            code: Python –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            timeout: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
        """
        try:
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = "/tmp/mirai_temp_code.py"
            with open(temp_file, 'w', encoding='utf-8') as f:
                f.write(code)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ subprocess —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            process = await asyncio.create_subprocess_exec(
                'python3', temp_file,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            try:
                stdout, stderr = await asyncio.wait_for(
                    process.communicate(),
                    timeout=timeout
                )
                
                output = stdout.decode('utf-8')
                errors = stderr.decode('utf-8')
                
                result = ""
                if output:
                    result += f"üì§ –í—ã–≤–æ–¥:\n{output}\n"
                if errors:
                    result += f"‚ö†Ô∏è –û—à–∏–±–∫–∏:\n{errors}"
                
                return result or "‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –≤—ã–≤–æ–¥–∞"
                
            except asyncio.TimeoutError:
                process.kill()
                return f"‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç ({timeout}—Å)"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞: {e}"
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_file):
                os.remove(temp_file)
    
    async def install_python_package(self, package: str) -> str:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Python –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ pip"""
        try:
            venv_pip = "/root/mirai/mirai-agent/venv/bin/pip"
            
            process = await asyncio.create_subprocess_exec(
                venv_pip, 'install', package,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                return f"‚úÖ –ü–∞–∫–µ—Ç {package} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}:\n{stderr.decode('utf-8')}"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞: {e}"
    
    async def read_file(self, filepath: str) -> str:
        """–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª"""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            return f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ {filepath}:\n\n{content}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"
    
    async def list_files(self, directory: str = ".") -> str:
        """–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            files = os.listdir(directory)
            return f"üìÅ –§–∞–π–ª—ã –≤ {directory}:\n" + "\n".join(f"  ‚Ä¢ {f}" for f in files)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
ai_tools = AITools()
