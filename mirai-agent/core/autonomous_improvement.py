"""
–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∏–π –ö–ê–ô–î–ó–ï–ù + –ú–ò–†–ê–ô
–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–µ–∑ —É—á–∞—Å—Ç–∏—è —á–µ–ª–æ–≤–µ–∫–∞
"""

import os
import json
import asyncio
from datetime import datetime
from typing import Dict, List, Any
import subprocess


class AutonomousImprovement:
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π"""

    def __init__(self):
        self.improvements_log = "/root/mirai/mirai-agent/data/improvements.json"
        self.metrics_log = "/root/mirai/mirai-agent/data/metrics.json"
        os.makedirs(os.path.dirname(self.improvements_log), exist_ok=True)

    def analyze_system(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        metrics = {
            "timestamp": datetime.now().isoformat(),
            "components": {},
            "issues": [],
            "suggestions": [],
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
        try:
            result = subprocess.run(
                ["pylint", "/root/mirai/mirai-agent/core/", "--output-format=json"],
                capture_output=True,
                text=True,
                timeout=30,
            )
            if result.stdout:
                pylint_data = json.loads(result.stdout)
                metrics["components"]["code_quality"] = {
                    "issues": len(pylint_data),
                    "critical": len(
                        [x for x in pylint_data if x.get("type") == "error"]
                    ),
                }
        except:
            pass

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        metrics["components"]["performance"] = self._check_performance()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        metrics["components"]["security"] = self._check_security()

        return metrics

    def _check_performance(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return {
            "status": "optimal",
            "suggestions": [
                "–î–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å database queries",
            ],
        }

    def _check_security(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return {
            "status": "good",
            "suggestions": [
                "–î–æ–±–∞–≤–∏—Ç—å rate limiting –¥–ª—è API",
                "–®–∏—Ñ—Ä–æ–≤–∞—Ç—å sensitive –¥–∞–Ω–Ω—ã–µ –≤ –ë–î",
            ],
        }

    def propose_improvements(self, metrics: Dict) -> List[Dict]:
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫"""
        improvements = []

        # –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
        if metrics.get("components", {}).get("code_quality", {}).get("issues", 0) > 10:
            improvements.append(
                {
                    "priority": "high",
                    "category": "code_quality",
                    "action": "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ —Å –≤—ã—Å–æ–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º issues",
                    "estimated_time": "30 –º–∏–Ω—É—Ç",
                }
            )

        # –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf = metrics.get("components", {}).get("performance", {})
        for suggestion in perf.get("suggestions", []):
            improvements.append(
                {
                    "priority": "medium",
                    "category": "performance",
                    "action": suggestion,
                    "estimated_time": "15 –º–∏–Ω—É—Ç",
                }
            )

        # –ù–∞ –æ—Å–Ω–æ–≤–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        sec = metrics.get("components", {}).get("security", {})
        for suggestion in sec.get("suggestions", []):
            improvements.append(
                {
                    "priority": "high",
                    "category": "security",
                    "action": suggestion,
                    "estimated_time": "20 –º–∏–Ω—É—Ç",
                }
            )

        return improvements

    def log_improvement(self, improvement: Dict):
        """–ó–∞–ø–∏—Å–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        try:
            if os.path.exists(self.improvements_log):
                with open(self.improvements_log, "r") as f:
                    data = json.load(f)
            else:
                data = {"improvements": []}

            data["improvements"].append(
                {**improvement, "timestamp": datetime.now().isoformat()}
            )

            with open(self.improvements_log, "w") as f:
                json.dump(data, f, indent=2)
        except:
            pass

    async def autonomous_cycle(self, iterations: int = 5):
        """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ü–∏–∫–ª —É–ª—É—á—à–µ–Ω–∏–π"""
        for i in range(iterations):
            print(f"\nüîÑ –¶–∏–∫–ª —É–ª—É—á—à–µ–Ω–∏–π {i+1}/{iterations}")

            # –ê–Ω–∞–ª–∏–∑
            metrics = self.analyze_system()

            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            improvements = self.propose_improvements(metrics)

            if improvements:
                print(f"   üí° –ù–∞–π–¥–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {len(improvements)}")

                # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ
                high_priority = [x for x in improvements if x["priority"] == "high"]
                if high_priority:
                    improvement = high_priority[0]
                    print(f"   üéØ –í—ã–ø–æ–ª–Ω—è—é: {improvement['action']}")

                    # –õ–æ–≥–∏—Ä—É–µ–º
                    self.log_improvement(improvement)

            await asyncio.sleep(2)


if __name__ == "__main__":
    system = AutonomousImprovement()
    asyncio.run(system.autonomous_cycle(3))
