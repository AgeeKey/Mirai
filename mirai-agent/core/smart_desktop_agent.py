"""
Smart Desktop Agent - –£–º–Ω—ã–π –∞–≥–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º
–ö–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å Vision –∞–Ω–∞–ª–∏–∑–æ–º: –ü–û–ù–ò–ú–ê–ï–¢ –∫—É–¥–∞ –∫–ª–∏–∫–∞—Ç—å, –≥–¥–µ –ø–µ—á–∞—Ç–∞—Ç—å
"""

import time
import pyautogui
import subprocess
import logging
from typing import Optional, Dict, List
from pathlib import Path

from .vision_tools import VisionTools, VisionContext
from .context_manager import AgentContext, ActionStatus
from .smart_browser_agent import SmartBrowserAgent

logger = logging.getLogger(__name__)


class SmartDesktopAgent:
    """
    –£–ú–ù–´–ô –î–ï–°–ö–¢–û–ü–ù–´–ô –ê–ì–ï–ù–¢ –° –ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ú –ò–ù–¢–ï–õ–õ–ï–ö–¢–û–ú.

    –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
    –ö–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ = Vision ‚Üí –ü–æ–Ω–∏–º–∞–Ω–∏–µ ‚Üí –†–µ—à–µ–Ω–∏–µ ‚Üí –î–µ–π—Å—Ç–≤–∏–µ ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞

    –ù–µ –ø—Ä–æ—Å—Ç–æ "–æ—Ç–∫—Ä—ã—Ç—å Notepad", –∞:
    1. –°–∫—Ä–∏–Ω—à–æ—Ç ‚Üí Vision –∞–Ω–∞–ª–∏–∑: "–ì–¥–µ —è?"
    2. –†–µ—à–µ–Ω–∏–µ: "–ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å Notepad –æ—Ç—Å—é–¥–∞?"
    3. –î–µ–π—Å—Ç–≤–∏–µ: –æ—Ç–∫—Ä—ã—Ç–∏–µ
    4. –°–∫—Ä–∏–Ω—à–æ—Ç ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞: "–û—Ç–∫—Ä—ã–ª—Å—è –ª–∏ Notepad?"
    """

    def __init__(self, vision: VisionTools, context: AgentContext):
        self.vision = vision
        self.context = context
        self.browser = SmartBrowserAgent(vision, context)

        pyautogui.FAILSAFE = False  # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        pyautogui.PAUSE = 0.5

    async def smart_open_application(self, app_name: str) -> bool:
        """
        –£–ú–ù–û–ï –û–¢–ö–†–´–¢–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –ö–ê–ö –ß–ï–õ–û–í–ï–ö:
        1. Vision: "–£–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ?"
        2. –ï—Å–ª–∏ –Ω–µ—Ç - –æ—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é –ü—É—Å–∫
        3. Vision: "–û—Ç–∫—Ä—ã–ª–æ—Å—å –ª–∏?"
        """

        logger.info(f"üöÄ –£–º–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ: {app_name}")

        # –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        screenshot_before = self.vision.capture_screen()
        vision_before = await self.vision.analyze_screen_context(
            screenshot_before,
            question=f"–û—Ç–∫—Ä—ã—Ç–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name}? –ß—Ç–æ –≤–∏–¥–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ?",
            app_name=app_name
        )

        logger.info(f"üëÅÔ∏è Vision –î–û: {vision_before.scene_description[:100]}")

        # –ï—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
        if app_name.lower() in vision_before.scene_description.lower():
            logger.info(f"‚úÖ {app_name} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, –∞–∫—Ç–∏–≤–∏—Ä—É—é...")
            await self._activate_window_smart(app_name)
            return True

        # –®–ê–ì 2: –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Win Search
        logger.info("üîç –û—Ç–∫—Ä—ã–≤–∞—é —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ Windows...")

        # Win+S –∏–ª–∏ Win (–ø–æ–∏—Å–∫)
        pyautogui.press("win")
        time.sleep(1.5)

        # –ü–µ—á–∞—Ç–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info(f"‚å®Ô∏è –í–≤–æ–∂—É: {app_name}")
        pyautogui.write(app_name, interval=0.05)
        time.sleep(1)

        # Enter
        pyautogui.press("enter")
        logger.info("‚è≥ –ñ–¥—É –∑–∞–ø—É—Å–∫–∞...")
        time.sleep(3)

        # –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–∫—Ä—ã–ª–æ—Å—å
        screenshot_after = self.vision.capture_screen()
        vision_after = await self.vision.analyze_screen_context(
            screenshot_after,
            question=f"–û—Ç–∫—Ä—ã–ª–æ—Å—å –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name}? –Ø –≤–∏–∂—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å {app_name}?",
            app_name=app_name
        )

        logger.info(f"üëÅÔ∏è Vision –ü–û–°–õ–ï: {vision_after.scene_description[:100]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        success = app_name.lower() in vision_after.scene_description.lower()

        if success:
            logger.info(f"‚úÖ {app_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!")
            self.context.update_application_state(
                app_name=app_name,
                window_title=vision_after.window_title or app_name,
                is_active=True,
                state_description=vision_after.scene_description,
                detected_elements=vision_after.detected_elements
            )
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å {app_name}")

        self.context.record_action(
            "open_application",
            f"–û—Ç–∫—Ä—ã—Ç—å {app_name}",
            ActionStatus.SUCCESS if success else ActionStatus.FAILED,
            result=vision_after.scene_description,
            screenshot_before=screenshot_before,
            screenshot_after=screenshot_after
        )

        return success

    async def smart_type_text(self, text: str, target_app: Optional[str] = None) -> bool:
        """
        –£–ú–ù–ê–Ø –ü–ï–ß–ê–¢–¨ –¢–ï–ö–°–¢–ê:
        1. Vision: "–ì–¥–µ —è? –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ?"
        2. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        3. –ö–ª–∏–∫–Ω—É—Ç—å –≤ –ø–æ–ª–µ
        4. –ü–µ—á–∞—Ç–∞—Ç—å
        5. Vision: "–¢–µ–∫—Å—Ç –Ω–∞–ø–µ—á–∞—Ç–∞–ª—Å—è?"
        """

        logger.info(f"‚å®Ô∏è –£–º–Ω–∞—è –ø–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–∞ ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")

        # –®–ê–ì 1: –ü–æ–Ω–∏–º–∞–µ–º –≥–¥–µ –º—ã
        screenshot = self.vision.capture_screen()
        vision_ctx = await self.vision.analyze_screen_context(
            screenshot,
            question="–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞? –ú–æ–≥—É –ª–∏ —è —Å–µ–π—á–∞—Å –ø–µ—á–∞—Ç–∞—Ç—å?",
            app_name=target_app
        )

        logger.info(f"üëÅÔ∏è Vision: {vision_ctx.scene_description[:150]}")

        # –®–ê–ì 2: –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        text_field = await self.vision.find_element_on_screen(
            screenshot,
            "—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–ª–∏ –æ–±–ª–∞—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞",
            app_name=target_app
        )

        if text_field and text_field.get("found"):
            # –ö–ª–∏–∫–∞–µ–º –≤ –ø–æ–ª–µ
            logger.info(f"üñ±Ô∏è –ö–ª–∏–∫–∞—é –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: {text_field.get('location')}")
            await self._click_element_smart(text_field)
            time.sleep(0.5)
        else:
            # –ö–ª–∏–∫–∞–µ–º –≤ —Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞ (–æ–±—ã—á–Ω–æ —Ç–∞–º –ø–æ–ª–µ –≤–≤–æ–¥–∞)
            logger.warning("‚ö†Ô∏è –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∫–ª–∏–∫–∞—é –≤ —Ü–µ–Ω—Ç—Ä")
            screen_width, screen_height = pyautogui.size()
            pyautogui.click(screen_width // 2, screen_height // 2)
            time.sleep(0.5)

        # –®–ê–ì 3: –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—Å—Ç
        logger.info(f"‚å®Ô∏è –ü–µ—á–∞—Ç–∞—é —Ç–µ–∫—Å—Ç: {text[:50]}...")
        screenshot_before_type = self.vision.capture_screen()

        pyautogui.write(text, interval=0.03)  # –ë—ã—Å—Ç—Ä–∞—è –ø–µ—á–∞—Ç—å
        time.sleep(0.5)

        # –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        screenshot_after = self.vision.capture_screen()
        verification = await self.vision.verify_action_result(
            screenshot_before_type,
            screenshot_after,
            f"–Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç: {text[:50]}..."
        )

        success = verification.get("success", False)

        if success:
            logger.info("‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–ø–µ—á–∞—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–µ—á–∞—Ç–∏: {verification.get('problems')}")

        self.context.record_action(
            "type_text",
            f"–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)",
            ActionStatus.SUCCESS if success else ActionStatus.PARTIAL,
            result=f"–ù–∞–ø–µ—á–∞—Ç–∞–Ω–æ: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤",
            problems=verification.get("problems", []),
            screenshot_before=screenshot_before_type,
            screenshot_after=screenshot_after
        )

        return success

    async def smart_click(self, element_description: str) -> bool:
        """
        –£–ú–ù–´–ô –ö–õ–ò–ö –ü–û –≠–õ–ï–ú–ï–ù–¢–£:
        1. Vision: –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç
        2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–¥–µ –æ–Ω
        3. –ö–ª–∏–∫–Ω—É—Ç—å
        4. Vision: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """

        logger.info(f"üñ±Ô∏è –£–º–Ω—ã–π –∫–ª–∏–∫: {element_description}")

        # –®–ê–ì 1: –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç
        screenshot = self.vision.capture_screen()
        element = await self.vision.find_element_on_screen(
            screenshot,
            element_description
        )

        if not element or not element.get("found"):
            logger.error(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {element_description}")
            return False

        # –®–ê–ì 2: –ö–ª–∏–∫–∞–µ–º
        await self._click_element_smart(element)
        time.sleep(1)

        # –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º
        screenshot_after = self.vision.capture_screen()
        verification = await self.vision.verify_action_result(
            screenshot,
            screenshot_after,
            f"–∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ {element_description}"
        )

        success = verification.get("success", False)
        logger.info(f"‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: {verification.get('changes_detected')}")

        return success

    async def _click_element_smart(self, element: Dict):
        """–ö–ª–∏–∫–Ω—É—Ç—å –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–∏"""
        location = element.get("location", "").lower()
        screen_width, screen_height = pyautogui.size()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        if "—Å–ª–µ–≤–∞" in location and "—Å–≤–µ—Ä—Ö—É" in location:
            x, y = screen_width // 4, screen_height // 4
        elif "—Å–ø—Ä–∞–≤–∞" in location and "—Å–≤–µ—Ä—Ö—É" in location:
            x, y = 3 * screen_width // 4, screen_height // 4
        elif "—Å–ª–µ–≤–∞" in location and "—Å–Ω–∏–∑—É" in location:
            x, y = screen_width // 4, 3 * screen_height // 4
        elif "—Å–ø—Ä–∞–≤–∞" in location and "—Å–Ω–∏–∑—É" in location:
            x, y = 3 * screen_width // 4, 3 * screen_height // 4
        elif "—Ü–µ–Ω—Ç—Ä" in location or "middle" in location:
            x, y = screen_width // 2, screen_height // 2
        elif "—Å–ª–µ–≤–∞" in location:
            x, y = screen_width // 4, screen_height // 2
        elif "—Å–ø—Ä–∞–≤–∞" in location:
            x, y = 3 * screen_width // 4, screen_height // 2
        elif "—Å–≤–µ—Ä—Ö—É" in location:
            x, y = screen_width // 2, screen_height // 4
        elif "—Å–Ω–∏–∑—É" in location:
            x, y = screen_width // 2, 3 * screen_height // 4
        else:
            x, y = screen_width // 2, screen_height // 2

        logger.info(f"üñ±Ô∏è –ö–ª–∏–∫–∞—é –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ({x}, {y})")
        pyautogui.click(x, y)

    async def _activate_window_smart(self, app_name: str):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # Alt+Tab –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        pyautogui.hotkey("alt", "tab")
        time.sleep(0.5)

    async def smart_execute_task(self, task_description: str) -> Dict:
        """
        –£–ú–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –õ–Æ–ë–û–ô –ó–ê–î–ê–ß–ò:
        AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—ç—Ç–∞–ø–Ω–æ —Å Vision –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.
        """

        logger.info(f"üéØ –£–º–Ω–∞—è –∑–∞–¥–∞—á–∞: {task_description}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        screenshot = self.vision.capture_screen()
        vision_ctx = await self.vision.analyze_screen_context(
            screenshot,
            question=f"–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task_description}? –ö–∞–∫–∏–µ —à–∞–≥–∏?"
        )

        logger.info(f"üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Vision: {vision_ctx.recommendations}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        results = []
        for i, action in enumerate(vision_ctx.recommendations[:3], 1):  # –ú–∞–∫—Å 3 —à–∞–≥–∞
            logger.info(f"‚ñ∂Ô∏è –®–∞–≥ {i}: {action}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
            if "–æ—Ç–∫—Ä—ã—Ç—å" in action.lower():
                app = action.split("–æ—Ç–∫—Ä—ã—Ç—å")[-1].strip().split()[0]
                success = await self.smart_open_application(app)
            elif "–≤–≤–µ—Å—Ç–∏" in action.lower() or "–Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å" in action.lower():
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
                success = await self.smart_type_text("test text")
            elif "–∫–ª–∏–∫–Ω—É—Ç—å" in action.lower() or "–Ω–∞–∂–∞—Ç—å" in action.lower():
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
                element = action.split("–Ω–∞")[-1].strip() if "–Ω–∞" in action else "–∫–Ω–æ–ø–∫–∞"
                success = await self.smart_click(element)
            else:
                success = False

            results.append({"step": action, "success": success})
            time.sleep(1)

        overall_success = all(r["success"] for r in results)

        self.context.record_action(
            "execute_task",
            task_description,
            ActionStatus.SUCCESS if overall_success else ActionStatus.PARTIAL,
            result=f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {len(results)} —à–∞–≥–æ–≤",
            screenshot_before=screenshot
        )

        return {
            "success": overall_success,
            "steps": results,
            "recommendations": vision_ctx.recommendations
        }

    async def analyze_current_situation(self) -> VisionContext:
        """
        –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ô –°–ò–¢–£–ê–¶–ò–ò:
        –ß—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ, —á—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å, –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.
        """

        logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é...")

        screenshot = self.vision.capture_screen()
        vision_ctx = await self.vision.analyze_screen_context(
            screenshot,
            question="""–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
            1. –ö–∞–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã?
            2. –ß—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ —Å–µ–π—á–∞—Å?
            3. –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã?
            4. –ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã (–æ—à–∏–±–∫–∏, –ø–æ–ø–∞–ø—ã, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)?
            5. –ß—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –°–ï–ô–ß–ê–°?"""
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if vision_ctx.ui_state.get("app"):
            self.context.update_application_state(
                app_name=vision_ctx.ui_state["app"],
                window_title=vision_ctx.window_title or "Unknown",
                is_active=True,
                state_description=vision_ctx.scene_description,
                detected_elements=vision_ctx.detected_elements
            )

        logger.info(f"üìä –°–∏—Ç—É–∞—Ü–∏—è: {vision_ctx.scene_description[:150]}")
        logger.info(f"üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {vision_ctx.ui_state.get('possible_actions', [])}")

        if vision_ctx.ui_state.get("problems"):
            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: {vision_ctx.ui_state['problems']}")

        return vision_ctx
