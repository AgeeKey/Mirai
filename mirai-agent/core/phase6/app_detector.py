#!/usr/bin/env python3
"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  MIRAI Phase 6: App Detector - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π                ‚ïë
‚ïë  Application Discovery & Loading (–®–∞–≥–∏ 1-20)                         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–®–∞–≥–∏ 1-20: Application Discovery & Loading
- –®–∞–≥ 1: Detect Installed Applications
- –®–∞–≥ 2: Identify Application Paths
- –®–∞–≥ 3: Create Application Registry
- ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–æ –®–∞–≥–∞ 20

–ê–≤—Ç–æ—Ä: MIRAI AI Team
–î–∞—Ç–∞: 2025-10-24
"""

import logging
import platform
import os
import psutil
import subprocess
from typing import Dict, List, Optional, Set
from pathlib import Path
from dataclasses import dataclass, field

from .application_manager import ApplicationInfo, get_application_manager

logger = logging.getLogger(__name__)


# –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏
KNOWN_APPLICATIONS = {
    "notepad": {
        "windows": ["C:\\Windows\\System32\\notepad.exe", "notepad.exe"],
        "category": "text_editor"
    },
    "vscode": {
        "windows": [
            "C:\\Program Files\\Microsoft VS Code\\Code.exe",
            "C:\\Program Files (x86)\\Microsoft VS Code\\Code.exe"
        ],
        "linux": ["/usr/bin/code", "/usr/local/bin/code"],
        "mac": ["/Applications/Visual Studio Code.app/Contents/MacOS/Electron"],
        "category": "code_editor"
    },
    "capcut": {
        "windows": [
            "C:\\Program Files\\CapCut\\CapCut.exe",
            os.path.expanduser("~\\AppData\\Local\\CapCut\\CapCut.exe")
        ],
        "category": "video_editor"
    },
    "explorer": {
        "windows": ["C:\\Windows\\explorer.exe"],
        "category": "file_manager"
    },
    "calculator": {
        "windows": ["calc.exe"],
        "category": "utility"
    },
    "cmd": {
        "windows": ["cmd.exe"],
        "category": "terminal"
    }
}


class InstalledAppsDetector:
    """
    –®–∞–≥ 1: Detect Installed Applications
    
    –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∫–∞–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ —Å–∏—Å—Ç–µ–º–µ
    """
    
    def __init__(self):
        self.system = platform.system().lower()
        self.detected_apps: List[ApplicationInfo] = []
    
    def detect_all(self) -> List[ApplicationInfo]:
        """
        –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Returns:
            –°–ø–∏—Å–æ–∫ ApplicationInfo –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        """
        logger.info("üîç –®–∞–≥ 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
        
        self.detected_apps = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        for app_name, app_config in KNOWN_APPLICATIONS.items():
            if self._detect_application(app_name, app_config):
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_name}")
        
        logger.info(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {len(self.detected_apps)}")
        return self.detected_apps
    
    def _detect_application(self, app_name: str, app_config: Dict) -> bool:
        """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –û–°
        os_key = "windows" if "windows" in self.system else self.system
        paths = app_config.get(os_key, [])
        
        if not paths:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—É—Ç—å
        path_locator = AppPathLocator()
        found_path = path_locator.find_path(app_name, paths)
        
        if found_path:
            app_info = ApplicationInfo(
                name=app_name,
                path=found_path,
                category=app_config.get("category", "unknown")
            )
            self.detected_apps.append(app_info)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ Application Manager
            manager = get_application_manager()
            manager.register_application(app_info)
            
            return True
        
        return False


class AppPathLocator:
    """
    –®–∞–≥ 2: Identify Application Paths
    
    –ù–∞–π—Ç–∏ –ø—É—Ç–∏ –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    """
    
    def find_path(self, app_name: str, possible_paths: List[str]) -> Optional[Path]:
        """
        –ù–∞–π—Ç–∏ –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        
        Args:
            app_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            possible_paths: –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π
            
        Returns:
            Path –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ None
        """
        logger.debug(f"üîç –®–∞–≥ 2: –ü–æ–∏—Å–∫ –ø—É—Ç–∏ –¥–ª—è {app_name}...")
        
        for path_str in possible_paths:
            # –†–∞—Å—à–∏—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            expanded_path = os.path.expandvars(os.path.expanduser(path_str))
            path = Path(expanded_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if path.exists() and path.is_file():
                logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—É—Ç—å: {path}")
                return path
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ PATH
            if not path.is_absolute():
                which_path = self._find_in_path(path_str)
                if which_path:
                    logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤ PATH: {which_path}")
                    return which_path
        
        logger.debug(f"‚ùå –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {app_name}")
        return None
    
    def _find_in_path(self, executable: str) -> Optional[Path]:
        """–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ PATH"""
        try:
            if platform.system() == "Windows":
                result = subprocess.run(
                    ["where", executable],
                    capture_output=True,
                    text=True,
                    timeout=5
                )
            else:
                result = subprocess.run(
                    ["which", executable],
                    capture_output=True,
                    text=True,
                    timeout=5
                )
            
            if result.returncode == 0 and result.stdout.strip():
                return Path(result.stdout.strip().split('\n')[0])
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ PATH: {e}")
        
        return None


class ApplicationRegistry:
    """
    –®–∞–≥ 3: Create Application Registry
    
    –†–µ–µ—Å—Ç—Ä –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    
    def __init__(self):
        self.registry: Dict[str, Dict] = {}
        self._load_default_registry()
    
    def _load_default_registry(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        logger.info("üìù –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä
        for app_name, app_config in KNOWN_APPLICATIONS.items():
            self.registry[app_name] = {
                "name": app_name,
                "category": app_config.get("category", "unknown"),
                "shortcuts": self._get_default_shortcuts(app_name),
                "metadata": {}
            }
        
        logger.info(f"‚úÖ –†–µ–µ—Å—Ç—Ä —Å–æ–∑–¥–∞–Ω: {len(self.registry)} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
    
    def _get_default_shortcuts(self, app_name: str) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –®–∞–≥ 13: Load Application Shortcuts
        shortcuts = {
            "vscode": {
                "save": "Ctrl+S",
                "new_file": "Ctrl+N",
                "open": "Ctrl+O",
                "search": "Ctrl+F"
            },
            "notepad": {
                "save": "Ctrl+S",
                "new": "Ctrl+N",
                "open": "Ctrl+O"
            }
        }
        return shortcuts.get(app_name, {})
    
    def get_app_info(self, app_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞"""
        return self.registry.get(app_name)


class RunningAppsDetector:
    """
    –®–∞–≥ 5: Detect Running Applications
    
    –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∫–∞–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã
    """
    
    def detect_running(self) -> List[Dict]:
        """
        –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
        """
        logger.info("üîç –®–∞–≥ 5: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
        
        running_apps = []
        
        try:
            for proc in psutil.process_iter(['pid', 'name', 'exe']):
                try:
                    pinfo = proc.info
                    if pinfo['name']:
                        running_apps.append({
                            'pid': pinfo['pid'],
                            'name': pinfo['name'],
                            'exe': pinfo.get('exe', '')
                        })
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(running_apps)}")
        return running_apps
    
    def is_app_running(self, app_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        
        Args:
            app_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            
        Returns:
            bool: –ó–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        """
        running = self.detect_running()
        
        # –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
        for proc in running:
            if app_name.lower() in proc['name'].lower():
                return True
        
        return False


class AppDetector:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ (–®–∞–≥–∏ 1-20)
    """
    
    def __init__(self):
        self.installed_detector = InstalledAppsDetector()
        self.path_locator = AppPathLocator()
        self.registry = ApplicationRegistry()
        self.running_detector = RunningAppsDetector()
        
        self.discovery_complete = False
    
    def discover_all(self) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–®–∞–≥–∏ 1-20)
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
        
        # –®–∞–≥ 1: Detect Installed Applications
        installed_apps = self.installed_detector.detect_all()
        
        # –®–∞–≥ 5: Detect Running Applications
        running_apps = self.running_detector.detect_running()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        manager = get_application_manager()
        for app_info in installed_apps:
            if self.running_detector.is_app_running(app_info.name):
                app_info.is_running = True
                manager.register_application(app_info)
        
        # –®–∞–≥ 15/20: Discovery Complete
        self.discovery_complete = True
        manager.mark_initialized()
        
        results = {
            "installed_count": len(installed_apps),
            "running_count": len(running_apps),
            "discovery_complete": self.discovery_complete,
            "installed_apps": [app.name for app in installed_apps]
        }
        
        logger.info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
        
        return results


# –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
def detect_applications() -> Dict[str, Any]:
    """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (convenience function)"""
    detector = AppDetector()
    return detector.discover_all()
