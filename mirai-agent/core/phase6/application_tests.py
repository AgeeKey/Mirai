#!/usr/bin/env python3
"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  MIRAI Phase 6: Application Tests - –¢–µ—Å—Ç—ã –º–æ–¥—É–ª—è                     ‚ïë
‚ïë  Comprehensive tests for all 150 steps                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–¢–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Phase 6:
- Application Manager
- App Detector
- App Launcher
- VSCode Controller
- System App Controller

–ê–≤—Ç–æ—Ä: MIRAI AI Team
–î–∞—Ç–∞: 2025-10-24
"""

import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º MIRAI
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.phase6.application_manager import ApplicationManager, ApplicationInfo, get_application_manager
from core.phase6.app_detector import AppDetector, detect_applications
from core.phase6.app_launcher import AppLauncher, launch_application, close_application
from core.phase6.vscode_controller import VSCodeController, get_vscode_controller
from core.phase6.system_app_controller import SystemAppController, get_system_app_controller

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class TestApplicationManager:
    """–¢–µ—Å—Ç—ã –¥–ª—è Application Manager (–®–∞–≥ 10)"""
    
    def test_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        logger.info("üß™ –¢–µ—Å—Ç: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application Manager")
        
        manager = ApplicationManager()
        
        assert manager is not None, "Manager –Ω–µ —Å–æ–∑–¥–∞–Ω"
        assert len(manager.applications) == 0, "–ù–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–µ –ø—É—Å—Ç"
        assert not manager.initialized, "Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ"
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    def test_register_application(self):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("üß™ –¢–µ—Å—Ç: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        manager = ApplicationManager()
        
        app_info = ApplicationInfo(
            name="test_app",
            path=Path("/usr/bin/test"),
            category="test"
        )
        
        result = manager.register_application(app_info)
        
        assert result is True, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞"
        assert "test_app" in manager.applications, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
        assert manager.get_application("test_app") == app_info, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    def test_statistics(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logger.info("üß™ –¢–µ—Å—Ç: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        
        manager = ApplicationManager()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        for i in range(3):
            app_info = ApplicationInfo(
                name=f"app_{i}",
                category="test"
            )
            manager.register_application(app_info)
        
        stats = manager.get_statistics()
        
        assert stats['total_applications'] == 3, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
        assert 'test' in stats['categories'], "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


class TestAppDetector:
    """–¢–µ—Å—Ç—ã –¥–ª—è App Detector (–®–∞–≥–∏ 1-20)"""
    
    def test_detection(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        logger.info("üß™ –¢–µ—Å—Ç: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        
        detector = AppDetector()
        results = detector.discover_all()
        
        assert results is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"
        assert 'installed_count' in results, "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ"
        assert results['discovery_complete'] is True, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        
        logger.info(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {results['installed_count']}")
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    def test_known_apps(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        logger.info("üß™ –¢–µ—Å—Ç: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        
        results = detect_applications()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ
        # (Notepad –Ω–∞ Windows –∏–ª–∏ –¥—Ä—É–≥–∏–µ –Ω–∞ Linux/Mac)
        assert results['installed_count'] > 0, "–ù–∏ –æ–¥–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {results['installed_apps']}")
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


class TestAppLauncher:
    """–¢–µ—Å—Ç—ã –¥–ª—è App Launcher (–®–∞–≥–∏ 21-35)"""
    
    def test_launcher_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ launcher"""
        logger.info("üß™ –¢–µ—Å—Ç: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è App Launcher")
        
        launcher = AppLauncher()
        
        assert launcher is not None, "Launcher –Ω–µ —Å–æ–∑–¥–∞–Ω"
        assert launcher.readiness_waiter is not None, "ReadinessWaiter –Ω–µ —Å–æ–∑–¥–∞–Ω"
        assert launcher.error_handler is not None, "ErrorHandler –Ω–µ —Å–æ–∑–¥–∞–Ω"
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    def test_launch_nonexistent_app(self):
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("üß™ –¢–µ—Å—Ç: –ó–∞–ø—É—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        result = launch_application("nonexistent_app_12345", wait_ready=False)
        
        assert result.success is False, "–ó–∞–ø—É—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è"
        assert result.error is not None, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞"
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω (–æ—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞)")


class TestVSCodeController:
    """–¢–µ—Å—Ç—ã –¥–ª—è VSCode Controller (–®–∞–≥–∏ 76-105)"""
    
    def test_controller_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VSCode –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        logger.info("üß™ –¢–µ—Å—Ç: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VSCode Controller")
        
        controller = VSCodeController()
        
        assert controller is not None, "Controller –Ω–µ —Å–æ–∑–¥–∞–Ω"
        assert controller.app_name == "vscode", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        assert controller.is_launched is False, "–ù–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω"
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    def test_vscode_registered(self):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ handler –≤ manager"""
        logger.info("üß™ –¢–µ—Å—Ç: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è VSCode handler")
        
        controller = get_vscode_controller()
        manager = get_application_manager()
        
        handler = manager.get_handler("vscode")
        
        assert handler is not None, "Handler –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


class TestSystemAppController:
    """–¢–µ—Å—Ç—ã –¥–ª—è System App Controller (–®–∞–≥–∏ 121-135)"""
    
    def test_controller_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ System App –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        logger.info("üß™ –¢–µ—Å—Ç: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è System App Controller")
        
        controller = SystemAppController()
        
        assert controller is not None, "Controller –Ω–µ —Å–æ–∑–¥–∞–Ω"
        assert controller.notepad is not None, "Notepad controller –Ω–µ —Å–æ–∑–¥–∞–Ω"
        assert controller.calculator is not None, "Calculator controller –Ω–µ —Å–æ–∑–¥–∞–Ω"
        assert controller.task_manager is not None, "Task Manager controller –Ω–µ —Å–æ–∑–¥–∞–Ω"
        assert controller.cmd is not None, "CMD controller –Ω–µ —Å–æ–∑–¥–∞–Ω"
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    def test_notepad_controller(self):
        """–¢–µ—Å—Ç Notepad –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        logger.info("üß™ –¢–µ—Å—Ç: Notepad Controller")
        
        controller = get_system_app_controller()
        notepad = controller.get_notepad()
        
        assert notepad is not None, "Notepad controller –Ω–µ –ø–æ–ª—É—á–µ–Ω"
        assert notepad.app_name == "notepad", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    def test_cmd_execute(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        logger.info("üß™ –¢–µ—Å—Ç: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ CMD –∫–æ–º–∞–Ω–¥—ã")
        
        controller = get_system_app_controller()
        cmd = controller.get_cmd()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É
        output = cmd.execute_command("echo Hello MIRAI")
        
        assert output is not None, "–í—ã–≤–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω"
        assert "MIRAI" in output or "Hello" in output, "–í—ã–≤–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    logger.info("=" * 70)
    logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í PHASE 6: APPLICATION CONTROL")
    logger.info("=" * 70)
    
    test_classes = [
        TestApplicationManager,
        TestAppDetector,
        TestAppLauncher,
        TestVSCodeController,
        TestSystemAppController
    ]
    
    total_tests = 0
    passed_tests = 0
    failed_tests = 0
    
    for test_class in test_classes:
        logger.info(f"\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_class.__name__}")
        logger.info("-" * 70)
        
        test_instance = test_class()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã —Ç–µ—Å—Ç–∞
        test_methods = [method for method in dir(test_instance) if method.startswith('test_')]
        
        for method_name in test_methods:
            total_tests += 1
            
            try:
                method = getattr(test_instance, method_name)
                method()
                passed_tests += 1
            except Exception as e:
                failed_tests += 1
                logger.error(f"‚ùå –¢–µ—Å—Ç {method_name} –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    logger.info("\n" + "=" * 70)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 70)
    logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests*100):.1f}%")
    logger.info("=" * 70)
    
    return passed_tests == total_tests


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
