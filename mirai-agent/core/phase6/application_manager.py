#!/usr/bin/env python3
"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  MIRAI Phase 6: Application Manager - –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è      ‚ïë
‚ïë  Orchestrates all application control operations                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–®–∞–≥ 10: Initialize Application Manager
- Create –≥–ª–∞–≤–Ω—ã–π Application Manager
- Orchestrate all app operations

–ê–≤—Ç–æ—Ä: MIRAI AI Team
–î–∞—Ç–∞: 2025-10-24
"""

import logging
import time
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field
from pathlib import Path

logger = logging.getLogger(__name__)


@dataclass
class ApplicationInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    name: str
    path: Optional[Path] = None
    version: Optional[str] = None
    category: str = "unknown"
    is_running: bool = False
    pid: Optional[int] = None
    windows: List[str] = field(default_factory=list)


class ApplicationManager:
    """
    –ì–õ–ê–í–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ü–†–ò–õ–û–ñ–ï–ù–ò–ô (–®–∞–≥ 10)
    
    Orchestrates all application control operations:
    - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    - –ó–∞–ø—É—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application Manager"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application Manager...")
        
        # –†–µ–µ—Å—Ç—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        self.applications: Dict[str, ApplicationInfo] = {}
        
        # –ê–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.active_app: Optional[str] = None
        
        # Handlers –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
        self.handlers: Dict[str, Any] = {}
        
        # –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.initialized = False
        
        logger.info("‚úÖ Application Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def register_application(self, app_info: ApplicationInfo) -> bool:
        """
        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ
        
        Args:
            app_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ
        """
        try:
            self.applications[app_info.name] = app_info
            logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_info.name}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è {app_info.name}: {e}")
            return False
    
    def get_application(self, name: str) -> Optional[ApplicationInfo]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            
        Returns:
            ApplicationInfo –∏–ª–∏ None
        """
        return self.applications.get(name)
    
    def list_applications(self, category: Optional[str] = None) -> List[ApplicationInfo]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        
        Args:
            category: –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (optional)
            
        Returns:
            –°–ø–∏—Å–æ–∫ ApplicationInfo
        """
        apps = list(self.applications.values())
        
        if category:
            apps = [app for app in apps if app.category == category]
        
        return apps
    
    def set_active_application(self, name: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        """
        if name in self.applications:
            self.active_app = name
            logger.info(f"üéØ –ê–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {name}")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
    
    def get_active_application(self) -> Optional[ApplicationInfo]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        if self.active_app:
            return self.applications.get(self.active_app)
        return None
    
    def register_handler(self, app_type: str, handler: Any) -> None:
        """
        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å handler –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Args:
            app_type: –¢–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (capcut, vscode, explorer, etc.)
            handler: Handler –æ–±—ä–µ–∫—Ç
        """
        self.handlers[app_type] = handler
        logger.info(f"üîß –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω handler –¥–ª—è: {app_type}")
    
    def get_handler(self, app_type: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å handler –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        return self.handlers.get(app_type)
    
    def mark_initialized(self) -> None:
        """–û—Ç–º–µ—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é"""
        self.initialized = True
        logger.info("‚úÖ Application Manager –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def is_initialized(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã"""
        return self.initialized
    
    def get_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        total_apps = len(self.applications)
        running_apps = sum(1 for app in self.applications.values() if app.is_running)
        
        categories = {}
        for app in self.applications.values():
            categories[app.category] = categories.get(app.category, 0) + 1
        
        return {
            "total_applications": total_apps,
            "running_applications": running_apps,
            "categories": categories,
            "active_application": self.active_app,
            "initialized": self.initialized,
            "handlers_registered": len(self.handlers)
        }


# Convenience —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
_manager_instance: Optional[ApplicationManager] = None


def get_application_manager() -> ApplicationManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Application Manager (singleton)"""
    global _manager_instance
    if _manager_instance is None:
        _manager_instance = ApplicationManager()
    return _manager_instance
