#!/usr/bin/env python3
"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  MIRAI Phase 6: App Error Handler - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π      ‚ïë
‚ïë  Error Handling & Recovery (–®–∞–≥–∏ 136-140)                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–®–∞–≥–∏ 136-140: Error Handling
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–±–æ–µ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–∏—Å–∞–Ω–∏–π
- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤

–ê–≤—Ç–æ—Ä: MIRAI AI Team
–î–∞—Ç–∞: 2025-10-24
"""

import logging
import time
import psutil
from typing import Optional, Dict, Any, List
from dataclasses import dataclass, field
from datetime import datetime

from .application_manager import get_application_manager

logger = logging.getLogger(__name__)


@dataclass
class CrashReport:
    """–û—Ç—á–µ—Ç –æ —Å–±–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app_name: str
    timestamp: datetime
    error_type: str
    error_message: str
    pid: Optional[int] = None
    recovery_attempted: bool = False
    recovery_successful: bool = False


class CrashDetector:
    """
    –®–∞–≥ 136: Detect Application Crash
    
    –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–±–æ–µ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    """
    
    def __init__(self):
        self.crash_reports: List[CrashReport] = []
    
    def detect_crash(self, app_name: str) -> Optional[CrashReport]:
        """
        –û–±–Ω–∞—Ä—É–∂–∏—Ç—å —Å–±–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Args:
            app_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            
        Returns:
            CrashReport –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–±–æ–π, –∏–Ω–∞—á–µ None
        """
        logger.info(f"üîç –®–∞–≥ 136: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—è –¥–ª—è {app_name}...")
        
        manager = get_application_manager()
        app_info = manager.get_application(app_name)
        
        if not app_info:
            logger.warning(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–µ—Å—Ç—Ä–µ")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ
        if not app_info.is_running or not app_info.pid:
            logger.debug(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return None
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            process = psutil.Process(app_info.pid)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
            status = process.status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ zombie –ø—Ä–æ—Ü–µ—Å—Å
            if status == psutil.STATUS_ZOMBIE:
                error_msg = f"–ü—Ä–æ—Ü–µ—Å—Å {app_name} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ zombie"
                logger.error(f"üíÄ {error_msg}")
                
                crash_report = CrashReport(
                    app_name=app_name,
                    timestamp=datetime.now(),
                    error_type="zombie_process",
                    error_message=error_msg,
                    pid=app_info.pid
                )
                
                self.crash_reports.append(crash_report)
                return crash_report
            
            logger.debug(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ (—Å—Ç–∞—Ç—É—Å: {status})")
            return None
            
        except psutil.NoSuchProcess:
            # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
            error_msg = f"–ü—Ä–æ—Ü–µ—Å—Å {app_name} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è"
            logger.error(f"‚ùå {error_msg}")
            
            crash_report = CrashReport(
                app_name=app_name,
                timestamp=datetime.now(),
                error_type="process_terminated",
                error_message=error_msg,
                pid=app_info.pid
            )
            
            self.crash_reports.append(crash_report)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ manager
            app_info.is_running = False
            app_info.pid = None
            manager.register_application(app_info)
            
            return crash_report
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {app_name}: {e}"
            logger.error(f"‚ùå {error_msg}")
            
            crash_report = CrashReport(
                app_name=app_name,
                timestamp=datetime.now(),
                error_type="check_error",
                error_message=error_msg,
                pid=app_info.pid
            )
            
            self.crash_reports.append(crash_report)
            return crash_report


class CrashHandler:
    """
    –®–∞–≥ 137: Handle Application Crash
    
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ–µ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    """
    
    def __init__(self):
        self.detector = CrashDetector()
    
    def handle_crash(self, crash_report: CrashReport, auto_restart: bool = False) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–±–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Args:
            crash_report: –û—Ç—á–µ—Ç –æ —Å–±–æ–µ
            auto_restart: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–±–æ–π
        """
        logger.error(f"üö® –®–∞–≥ 137: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—è {crash_report.app_name}")
        logger.error(f"   –¢–∏–ø: {crash_report.error_type}")
        logger.error(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {crash_report.error_message}")
        
        crash_report.recovery_attempted = True
        
        try:
            # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –æ–Ω zombie
            if crash_report.error_type == "zombie_process" and crash_report.pid:
                self._cleanup_zombie(crash_report.pid)
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if auto_restart:
                logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {crash_report.app_name}...")
                
                from .app_launcher import launch_application
                result = launch_application(crash_report.app_name, wait_ready=True)
                
                crash_report.recovery_successful = result.success
                
                if result.success:
                    logger.info(f"‚úÖ {crash_report.app_name} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å {crash_report.app_name}")
            
            return crash_report.recovery_successful
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±–æ—è: {e}")
            crash_report.recovery_successful = False
            return False
    
    def _cleanup_zombie(self, pid: int) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å zombie –ø—Ä–æ—Ü–µ—Å—Å"""
        try:
            process = psutil.Process(pid)
            process.kill()
            logger.info(f"‚úÖ Zombie –ø—Ä–æ—Ü–µ—Å—Å {pid} –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ zombie: {e}")


class HangDetector:
    """
    –®–∞–≥ 138: Application Hang Detection
    
    –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∞–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    """
    
    def detect_hang(self, app_name: str, timeout: int = 5) -> bool:
        """
        –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Args:
            app_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            timeout: –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
            
        Returns:
            bool: –ó–∞–≤–∏—Å–ª–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        """
        logger.info(f"üîç –®–∞–≥ 138: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∞–Ω–∏—è {app_name}...")
        
        manager = get_application_manager()
        app_info = manager.get_application(app_name)
        
        if not app_info or not app_info.pid:
            logger.warning(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return False
        
        try:
            process = psutil.Process(app_info.pid)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CPU usage
            cpu_percent = process.cpu_percent(interval=timeout)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = process.status()
            
            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–ª–æ –µ—Å–ª–∏:
            # 1. –°—Ç–∞—Ç—É—Å stopped –∏–ª–∏ disk-sleep
            # 2. CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 0% –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–¥–ª—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ)
            is_hung = (
                status in [psutil.STATUS_STOPPED, psutil.STATUS_DISK_SLEEP] or
                (status == psutil.STATUS_SLEEPING and cpu_percent == 0)
            )
            
            if is_hung:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≤–∏—Å–ª–æ (—Å—Ç–∞—Ç—É—Å: {status}, CPU: {cpu_percent}%)")
            else:
                logger.debug(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å: {status}, CPU: {cpu_percent}%)")
            
            return is_hung
            
        except psutil.NoSuchProcess:
            logger.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å {app_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∞–Ω–∏—è: {e}")
            return False


class ForceCloser:
    """
    –®–∞–≥ 139: Force Close Application
    
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    
    def force_close(self, app_name: str) -> bool:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        
        Args:
            app_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã—Ç–æ
        """
        logger.warning(f"‚ö° –®–∞–≥ 139: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ {app_name}...")
        
        manager = get_application_manager()
        app_info = manager.get_application(app_name)
        
        if not app_info or not app_info.pid:
            logger.warning(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return False
        
        try:
            process = psutil.Process(app_info.pid)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è terminate
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ terminate...")
            process.terminate()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                process.wait(timeout=3)
                logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ terminate")
            except psutil.TimeoutExpired:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - kill
                logger.warning("Terminate –Ω–µ –ø–æ–º–æ–≥, –∏—Å–ø–æ–ª—å–∑—É—é kill...")
                process.kill()
                logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–±–∏—Ç–æ —á–µ—Ä–µ–∑ kill")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            app_info.is_running = False
            app_info.pid = None
            manager.register_application(app_info)
            
            return True
            
        except psutil.NoSuchProcess:
            logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {app_name} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
            return False


class AppRecovery:
    """
    –®–∞–≥ 140: Application Recovery
    
    –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤
    """
    
    def __init__(self):
        self.crash_handler = CrashHandler()
        self.hang_detector = HangDetector()
        self.force_closer = ForceCloser()
    
    def recover_application(self, app_name: str, restart: bool = True) -> bool:
        """
        –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è
        
        Args:
            app_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            restart: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        """
        logger.info(f"üîß –®–∞–≥ 140: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {app_name}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–±–æ–π
        crash_report = self.crash_handler.detector.detect_crash(app_name)
        
        if crash_report:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–±–æ–π
            return self.crash_handler.handle_crash(crash_report, auto_restart=restart)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≤–∏—Å–∞–Ω–∏–µ
        if self.hang_detector.detect_hang(app_name):
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
            self.force_closer.force_close(app_name)
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if restart:
                from .app_launcher import launch_application
                result = launch_application(app_name, wait_ready=True)
                return result.success
            
            return True
        
        logger.info(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return True


# Convenience —Ñ—É–Ω–∫—Ü–∏–∏
def detect_crash(app_name: str) -> Optional[CrashReport]:
    """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å —Å–±–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    detector = CrashDetector()
    return detector.detect_crash(app_name)


def recover_application(app_name: str, restart: bool = True) -> bool:
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    recovery = AppRecovery()
    return recovery.recover_application(app_name, restart)
