#!/usr/bin/env python3
"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  MIRAI Phase 6: VSCode Controller - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VSCode                ‚ïë
‚ïë  VSCode Code Editing (–®–∞–≥–∏ 76-105)                                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–®–∞–≥–∏ 76-105: VSCode Code Editing
–ü–æ–¥—Ä–∞–∑–¥–µ–ª 3.1: VSCode File Operations (–®–∞–≥–∏ 76-90)
–ü–æ–¥—Ä–∞–∑–¥–µ–ª 3.2: VSCode Code Editing (–®–∞–≥–∏ 91-105)

–ê–≤—Ç–æ—Ä: MIRAI AI Team
–î–∞—Ç–∞: 2025-10-24
"""

import logging
import time
import pyautogui
from typing import Optional, Dict, Any, List
from pathlib import Path

from .app_launcher import launch_application, close_application
from .application_manager import get_application_manager

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ pyautogui
pyautogui.FAILSAFE = True
pyautogui.PAUSE = 0.3


class VSCodeController:
    """
    –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VSCode
    –†–µ–∞–ª–∏–∑—É–µ—Ç –®–∞–≥–∏ 76-105
    """
    
    def __init__(self):
        self.app_name = "vscode"
        self.is_launched = False
        self.current_file: Optional[Path] = None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handler
        manager = get_application_manager()
        manager.register_handler("vscode", self)
    
    # ========== –ü–æ–¥—Ä–∞–∑–¥–µ–ª 3.1: VSCode File Operations (–®–∞–≥–∏ 76-90) ==========
    
    def launch_vscode(self, wait_ready: bool = True) -> bool:
        """
        –®–∞–≥ 77: Launch VSCode
        
        Args:
            wait_ready: –ñ–¥–∞—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –∑–∞–ø—É—â–µ–Ω
        """
        logger.info("üöÄ –®–∞–≥ 77: –ó–∞–ø—É—Å–∫ VSCode...")
        
        result = launch_application(self.app_name, wait_ready)
        
        if result.success:
            self.is_launched = True
            logger.info("‚úÖ VSCode –∑–∞–ø—É—â–µ–Ω")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ VSCode: {result.error}")
            return False
    
    def open_file(self, file_path: str) -> bool:
        """
        –®–∞–≥ 81: Open File in VSCode
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç
        """
        logger.info(f"üìÇ –®–∞–≥ 81: –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ {file_path}...")
        
        if not self.is_launched:
            logger.warning("VSCode –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é...")
            self.launch_vscode()
            time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
        
        try:
            # Ctrl+O –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
            pyautogui.hotkey('ctrl', 'o')
            time.sleep(0.5)
            
            # –í–≤–æ–¥–∏–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            pyautogui.typewrite(file_path, interval=0.05)
            time.sleep(0.3)
            
            # Enter –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
            pyautogui.press('enter')
            time.sleep(0.5)
            
            self.current_file = Path(file_path)
            logger.info(f"‚úÖ –§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç: {file_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def create_new_file(self) -> bool:
        """
        –®–∞–≥ 84: Create New File
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–Ω
        """
        logger.info("üìÑ –®–∞–≥ 84: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...")
        
        try:
            # Ctrl+N –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            pyautogui.hotkey('ctrl', 'n')
            time.sleep(0.3)
            
            self.current_file = None
            logger.info("‚úÖ –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def save_file(self, file_path: Optional[str] = None) -> bool:
        """
        –®–∞–≥ 85: Save File
        
        Args:
            file_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–æ–≤—ã–π —Ñ–∞–π–ª)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        """
        logger.info("üíæ –®–∞–≥ 85: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        
        try:
            # Ctrl+S –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            pyautogui.hotkey('ctrl', 's')
            time.sleep(0.3)
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å (–Ω–æ–≤—ã–π —Ñ–∞–π–ª)
            if file_path:
                time.sleep(0.5)
                pyautogui.typewrite(file_path, interval=0.05)
                time.sleep(0.3)
                pyautogui.press('enter')
                self.current_file = Path(file_path)
            
            logger.info("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def save_all_files(self) -> bool:
        """
        –®–∞–≥ 86: Save All Files
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ
        """
        logger.info("üíæ –®–∞–≥ 86: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤...")
        
        try:
            # Ctrl+Shift+S –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö (–≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö)
            # –∏–ª–∏ Ctrl+K S
            pyautogui.hotkey('ctrl', 'k')
            time.sleep(0.1)
            pyautogui.press('s')
            time.sleep(0.3)
            
            logger.info("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
            return False
    
    def close_file(self) -> bool:
        """
        –®–∞–≥ 87: Close File
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã—Ç
        """
        logger.info("‚ùå –®–∞–≥ 87: –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞...")
        
        try:
            # Ctrl+W –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
            pyautogui.hotkey('ctrl', 'w')
            time.sleep(0.3)
            
            self.current_file = None
            logger.info("‚úÖ –§–∞–π–ª –∑–∞–∫—Ä—ã—Ç")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
    
    # ========== –ü–æ–¥—Ä–∞–∑–¥–µ–ª 3.2: VSCode Code Editing (–®–∞–≥–∏ 91-105) ==========
    
    def type_code(self, code: str) -> bool:
        """
        –®–∞–≥ 92: Type Code
        
        Args:
            code: –ö–æ–¥ –¥–ª—è –≤–≤–æ–¥–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω
        """
        logger.info("‚å®Ô∏è –®–∞–≥ 92: –í–≤–æ–¥ –∫–æ–¥–∞...")
        
        try:
            # –í–≤–æ–¥–∏–º –∫–æ–¥ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            lines = code.split('\n')
            for line in lines:
                pyautogui.typewrite(line, interval=0.02)
                pyautogui.press('enter')
                time.sleep(0.1)
            
            logger.info("‚úÖ –ö–æ–¥ –≤–≤–µ–¥–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞: {e}")
            return False
    
    def search_in_file(self, search_text: str) -> bool:
        """
        –®–∞–≥ 96: Search in File
        
        Args:
            search_text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–∏—Å–∫
        """
        logger.info(f"üîç –®–∞–≥ 96: –ü–æ–∏—Å–∫ '{search_text}' –≤ —Ñ–∞–π–ª–µ...")
        
        try:
            # Ctrl+F –¥–ª—è –ø–æ–∏—Å–∫–∞
            pyautogui.hotkey('ctrl', 'f')
            time.sleep(0.3)
            
            # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞
            pyautogui.typewrite(search_text, interval=0.05)
            time.sleep(0.3)
            
            # Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            pyautogui.press('enter')
            
            logger.info("‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return False
    
    def replace_in_file(self, find_text: str, replace_text: str) -> bool:
        """
        –®–∞–≥ 97: Replace in File
        
        Args:
            find_text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            replace_text: –¢–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–º–µ–Ω–∞
        """
        logger.info(f"üîÑ –®–∞–≥ 97: –ó–∞–º–µ–Ω–∞ '{find_text}' –Ω–∞ '{replace_text}'...")
        
        try:
            # Ctrl+H –¥–ª—è –∑–∞–º–µ–Ω—ã
            pyautogui.hotkey('ctrl', 'h')
            time.sleep(0.3)
            
            # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            pyautogui.typewrite(find_text, interval=0.05)
            time.sleep(0.2)
            
            # Tab –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–ª—é –∑–∞–º–µ–Ω—ã
            pyautogui.press('tab')
            time.sleep(0.2)
            
            # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∑–∞–º–µ–Ω—ã
            pyautogui.typewrite(replace_text, interval=0.05)
            time.sleep(0.2)
            
            # Enter –¥–ª—è –∑–∞–º–µ–Ω—ã (–∏–ª–∏ Ctrl+Shift+1 –¥–ª—è –∑–∞–º–µ–Ω—ã –≤—Å–µ—Ö)
            pyautogui.hotkey('ctrl', 'shift', '1')
            
            logger.info("‚úÖ –ó–∞–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã: {e}")
            return False
    
    def format_code(self) -> bool:
        """
        –®–∞–≥ 101: Format Code
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω
        """
        logger.info("‚ú® –®–∞–≥ 101: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...")
        
        try:
            # Shift+Alt+F –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            pyautogui.hotkey('shift', 'alt', 'f')
            time.sleep(0.5)
            
            logger.info("‚úÖ –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def run_code(self) -> bool:
        """
        –®–∞–≥ 102: Run Code
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –∑–∞–ø—É—â–µ–Ω
        """
        logger.info("‚ñ∂Ô∏è –®–∞–≥ 102: –ó–∞–ø—É—Å–∫ –∫–æ–¥–∞...")
        
        try:
            # F5 –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            pyautogui.press('f5')
            time.sleep(0.5)
            
            logger.info("‚úÖ –ö–æ–¥ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–¥–∞: {e}")
            return False
    
    def open_terminal(self) -> bool:
        """
        –®–∞–≥ 104: Open Terminal
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç
        """
        logger.info("üíª –®–∞–≥ 104: –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞...")
        
        try:
            # Ctrl+` –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
            pyautogui.hotkey('ctrl', '`')
            time.sleep(0.5)
            
            logger.info("‚úÖ –¢–µ—Ä–º–∏–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {e}")
            return False
    
    def close_vscode(self) -> bool:
        """
        –ó–∞–∫—Ä—ã—Ç—å VSCode
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã—Ç
        """
        logger.info("üõë –ó–∞–∫—Ä—ã—Ç–∏–µ VSCode...")
        
        result = close_application(self.app_name)
        
        if result:
            self.is_launched = False
            self.current_file = None
            logger.info("‚úÖ VSCode –∑–∞–∫—Ä—ã—Ç")
        
        return result


# Convenience —Ñ—É–Ω–∫—Ü–∏–∏
def get_vscode_controller() -> VSCodeController:
    """–ü–æ–ª—É—á–∏—Ç—å VSCode –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"""
    return VSCodeController()
