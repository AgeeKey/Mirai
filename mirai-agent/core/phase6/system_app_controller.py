#!/usr/bin/env python3
"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  MIRAI Phase 6: System App Controller - –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è         ‚ïë
‚ïë  System Applications (–®–∞–≥–∏ 121-135)                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–®–∞–≥–∏ 121-135: System Applications
- Notepad, Calculator, Task Manager, Command Prompt –∏ —Ç.–¥.

–ê–≤—Ç–æ—Ä: MIRAI AI Team
–î–∞—Ç–∞: 2025-10-24
"""

import logging
import time
import platform
import subprocess
import pyautogui
from typing import Optional, Dict, Any
from pathlib import Path

from .app_launcher import launch_application, close_application
from .application_manager import get_application_manager

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ pyautogui
pyautogui.FAILSAFE = True
pyautogui.PAUSE = 0.3


class NotepadController:
    """
    –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è Notepad (–®–∞–≥–∏ 121-123)
    """
    
    def __init__(self):
        self.app_name = "notepad"
        self.is_launched = False
    
    def open_notepad(self) -> bool:
        """
        –®–∞–≥ 121: Open Notepad
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç
        """
        logger.info("üìù –®–∞–≥ 121: –û—Ç–∫—Ä—ã—Ç–∏–µ Notepad...")
        
        result = launch_application(self.app_name, wait_ready=True)
        
        if result.success:
            self.is_launched = True
            logger.info("‚úÖ Notepad –æ—Ç–∫—Ä—ã—Ç")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Notepad: {result.error}")
            return False
    
    def edit_text(self, text: str) -> bool:
        """
        –®–∞–≥ 122: Edit Text in Notepad
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω
        """
        logger.info("‚å®Ô∏è –®–∞–≥ 122: –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ Notepad...")
        
        if not self.is_launched:
            logger.warning("Notepad –Ω–µ –æ—Ç–∫—Ä—ã—Ç, –æ—Ç–∫—Ä—ã–≤–∞—é...")
            self.open_notepad()
            time.sleep(1)
        
        try:
            # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            pyautogui.typewrite(text, interval=0.05)
            time.sleep(0.3)
            
            logger.info("‚úÖ –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
            return False
    
    def save_text(self, file_path: str) -> bool:
        """
        –®–∞–≥ 123: Save in Notepad
        
        Args:
            file_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        """
        logger.info(f"üíæ –®–∞–≥ 123: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ {file_path}...")
        
        try:
            # Ctrl+S –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            pyautogui.hotkey('ctrl', 's')
            time.sleep(0.5)
            
            # –í–≤–æ–¥–∏–º –ø—É—Ç—å
            pyautogui.typewrite(file_path, interval=0.05)
            time.sleep(0.3)
            
            # Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            pyautogui.press('enter')
            time.sleep(0.3)
            
            logger.info("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def close(self) -> bool:
        """–ó–∞–∫—Ä—ã—Ç—å Notepad"""
        return close_application(self.app_name)


class CalculatorController:
    """
    –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è Calculator (–®–∞–≥–∏ 124-125)
    """
    
    def __init__(self):
        self.app_name = "calculator"
        self.is_launched = False
    
    def open_calculator(self) -> bool:
        """
        –®–∞–≥ 124: Open Calculator
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç
        """
        logger.info("üî¢ –®–∞–≥ 124: –û—Ç–∫—Ä—ã—Ç–∏–µ Calculator...")
        
        result = launch_application(self.app_name, wait_ready=True)
        
        if result.success:
            self.is_launched = True
            logger.info("‚úÖ Calculator –æ—Ç–∫—Ä—ã—Ç")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Calculator: {result.error}")
            return False
    
    def calculate(self, expression: str) -> bool:
        """
        –®–∞–≥ 125: Use Calculator
        
        Args:
            expression: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2+2")
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        """
        logger.info(f"üî¢ –®–∞–≥ 125: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ {expression}...")
        
        if not self.is_launched:
            logger.warning("Calculator –Ω–µ –æ—Ç–∫—Ä—ã—Ç, –æ—Ç–∫—Ä—ã–≤–∞—é...")
            self.open_calculator()
            time.sleep(1)
        
        try:
            # –í–≤–æ–¥–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            for char in expression:
                pyautogui.press(char)
                time.sleep(0.1)
            
            # Enter –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            pyautogui.press('enter')
            time.sleep(0.3)
            
            logger.info("‚úÖ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {e}")
            return False
    
    def close(self) -> bool:
        """–ó–∞–∫—Ä—ã—Ç—å Calculator"""
        return close_application(self.app_name)


class TaskManagerController:
    """
    –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è Task Manager (–®–∞–≥–∏ 127-129)
    """
    
    def open_task_manager(self) -> bool:
        """
        –®–∞–≥ 127: Open Task Manager
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç
        """
        logger.info("üìä –®–∞–≥ 127: –û—Ç–∫—Ä—ã—Ç–∏–µ Task Manager...")
        
        try:
            if platform.system() == "Windows":
                # Ctrl+Shift+Esc –¥–ª—è Task Manager
                pyautogui.hotkey('ctrl', 'shift', 'esc')
                time.sleep(1)
                logger.info("‚úÖ Task Manager –æ—Ç–∫—Ä—ã—Ç")
                return True
            else:
                logger.warning("‚ö†Ô∏è Task Manager –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ Windows")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Task Manager: {e}")
            return False
    
    def monitor_processes(self) -> Dict[str, Any]:
        """
        –®–∞–≥ 128: Monitor Processes
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
        """
        logger.info("üëÄ –®–∞–≥ 128: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        try:
            import psutil
            
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                try:
                    processes.append(proc.info)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU
            processes.sort(key=lambda x: x.get('cpu_percent', 0), reverse=True)
            
            result = {
                'total_processes': len(processes),
                'top_cpu': processes[:5] if len(processes) >= 5 else processes
            }
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(processes)}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return {'error': str(e)}


class CMDController:
    """
    –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è Command Prompt (–®–∞–≥–∏ 130-132)
    """
    
    def __init__(self):
        self.app_name = "cmd"
        self.is_launched = False
        self.process = None
    
    def open_cmd(self) -> bool:
        """
        –®–∞–≥ 130: Open Command Prompt
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç
        """
        logger.info("üíª –®–∞–≥ 130: –û—Ç–∫—Ä—ã—Ç–∏–µ Command Prompt...")
        
        result = launch_application(self.app_name, wait_ready=True)
        
        if result.success:
            self.is_launched = True
            logger.info("‚úÖ Command Prompt –æ—Ç–∫—Ä—ã—Ç")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è CMD: {result.error}")
            return False
    
    def execute_command(self, command: str) -> Optional[str]:
        """
        –®–∞–≥ 131: Execute Command
        
        Args:
            command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ None
        """
        logger.info(f"‚ö° –®–∞–≥ 131: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ subprocess
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=30
            )
            
            output = result.stdout
            
            logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            return output
            
        except subprocess.TimeoutExpired:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return None
    
    def read_output(self, output: str) -> Dict[str, Any]:
        """
        –®–∞–≥ 132: Read Command Output
        
        Args:
            output: –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
        """
        logger.info("üìñ –®–∞–≥ 132: –ß—Ç–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã...")
        
        lines = output.split('\n') if output else []
        
        result = {
            'raw_output': output,
            'line_count': len(lines),
            'lines': lines,
            'has_error': 'error' in output.lower() if output else False
        }
        
        logger.info(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
        return result


class SystemAppController:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç Notepad, Calculator, Task Manager, CMD
    """
    
    def __init__(self):
        self.notepad = NotepadController()
        self.calculator = CalculatorController()
        self.task_manager = TaskManagerController()
        self.cmd = CMDController()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handler
        manager = get_application_manager()
        manager.register_handler("system_apps", self)
        
        logger.info("üîß SystemAppController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_notepad(self) -> NotepadController:
        """–ü–æ–ª—É—á–∏—Ç—å Notepad –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"""
        return self.notepad
    
    def get_calculator(self) -> CalculatorController:
        """–ü–æ–ª—É—á–∏—Ç—å Calculator –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"""
        return self.calculator
    
    def get_task_manager(self) -> TaskManagerController:
        """–ü–æ–ª—É—á–∏—Ç—å Task Manager –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"""
        return self.task_manager
    
    def get_cmd(self) -> CMDController:
        """–ü–æ–ª—É—á–∏—Ç—å CMD –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"""
        return self.cmd


# Convenience —Ñ—É–Ω–∫—Ü–∏–∏
def get_system_app_controller() -> SystemAppController:
    """–ü–æ–ª—É—á–∏—Ç—å System App –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"""
    return SystemAppController()
