#!/usr/bin/env python3
"""
Web Search Integration –¥–ª—è MIRAI
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI gpt-5-search-api –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
"""

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

from openai import OpenAI

logger = logging.getLogger(__name__)


class WebSearchAgent:
    """–ê–≥–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ OpenAI"""

    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
        config_path = Path(__file__).parent.parent / "configs" / "api_keys.json"
        with open(config_path) as f:
            config = json.load(f)

        self.client = OpenAI(api_key=config["openai"])
        self.search_model = "gpt-5-search-api-2025-10-14"
        self.search_history = []

    def search(
        self,
        query: str,
        max_tokens: int = 1000,
    ) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ

        Args:
            query: –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
            max_tokens: –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        """
        try:
            logger.info(f"üîç Web Search: {query}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_prompt = f"""Search the internet for current, real-time information about:
{query}

Please provide:
1. Direct answer to the query
2. Sources and links if available
3. Timestamp of information
4. Any relevant context

Be concise but thorough."""

            response = self.client.chat.completions.create(
                model=self.search_model,
                messages=[{"role": "user", "content": search_prompt}],
                max_tokens=max_tokens,
            )

            result = {
                "query": query,
                "answer": response.choices[0].message.content,
                "model": self.search_model,
                "tokens_used": response.usage.total_tokens,
                "timestamp": datetime.now().isoformat(),
                "success": True,
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.search_history.append(result)

            logger.info(f"‚úÖ Search completed: {response.usage.total_tokens} tokens")
            return result

        except Exception as e:
            logger.error(f"‚ùå Search error: {e}")
            return {
                "query": query,
                "answer": None,
                "error": str(e),
                "timestamp": datetime.now().isoformat(),
                "success": False,
            }

    def quick_search(self, query: str) -> str:
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞"""
        result = self.search(query, max_tokens=500)
        return result.get("answer", f"Error: {result.get('error')}")

    def get_current_info(self, topic: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–∏–∫–µ"""
        query = f"What is the latest information about {topic} as of {datetime.now().strftime('%B %Y')}?"
        return self.quick_search(query)

    def verify_fact(self, statement: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–∫—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"""
        query = f"Verify this statement with current sources: {statement}"
        result = self.search(query, max_tokens=800)
        return result

    def compare_sources(self, topic: str, num_perspectives: int = 3) -> str:
        """–°—Ä–∞–≤–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        query = f"Search multiple sources and compare {num_perspectives} different perspectives on: {topic}"
        return self.quick_search(query)

    def find_documentation(self, library: str, language: str = "Python") -> str:
        """–ù–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        query = f"Find official documentation and quick start guide for {library} {language} library"
        return self.quick_search(query)

    def search_error_solution(self, error_message: str, language: str = "Python") -> str:
        """–ù–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏"""
        query = f"""Search for solutions to this {language} error:
{error_message}

Find:
1. What causes this error
2. How to fix it
3. Code examples
4. Best practices to avoid it"""
        return self.quick_search(query)

    def research_topic(self, topic: str, depth: str = "medium") -> Dict:
        """
        –ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã

        Args:
            topic: –¢–µ–º–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            depth: –ì–ª—É–±–∏–Ω–∞ (quick, medium, deep)
        """
        token_map = {"quick": 500, "medium": 1500, "deep": 3000}
        max_tokens = token_map.get(depth, 1500)

        query = f"""Conduct a comprehensive research on: {topic}

Please include:
1. Overview and key concepts
2. Current state and recent developments
3. Main use cases and applications
4. Best practices and recommendations
5. Resources for learning more

Depth level: {depth}"""

        return self.search(query, max_tokens=max_tokens)

    def get_trending(self, category: str = "technology") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã"""
        query = f"What are the current trending topics and news in {category} as of today?"
        return self.quick_search(query)

    def get_history(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–æ–≤"""
        return self.search_history[-limit:]

    def clear_history(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"""
        self.search_history = []
        logger.info("üßπ Search history cleared")


# Singleton instance
_web_search_agent = None


def get_web_search() -> WebSearchAgent:
    """–ü–æ–ª—É—á–∏—Ç—å singleton instance Web Search –∞–≥–µ–Ω—Ç–∞"""
    global _web_search_agent
    if _web_search_agent is None:
        _web_search_agent = WebSearchAgent()
    return _web_search_agent


if __name__ == "__main__":
    # –¢–µ—Å—Ç—ã
    logging.basicConfig(level=logging.INFO)

    agent = WebSearchAgent()

    print("=== Test 1: Quick Search ===")
    result = agent.quick_search("What is the current weather in New York?")
    print(result)
    print()

    print("=== Test 2: Find Documentation ===")
    result = agent.find_documentation("requests", "Python")
    print(result)
    print()

    print("=== Test 3: Current Info ===")
    result = agent.get_current_info("artificial intelligence trends")
    print(result)
    print()

    print("=== Test 4: Search History ===")
    history = agent.get_history()
    print(f"Total searches: {len(history)}")
    for i, search in enumerate(history, 1):
        query = search['query']
        tokens = search['tokens_used']
        print(f"{i}. {query} ({tokens} tokens)")
