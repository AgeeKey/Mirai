#!/usr/bin/env python3
"""
MIRAI - Autonomous AI Agent
–†–µ–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞
- –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
- –°–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è
- –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
"""

import os
import json
import subprocess
import requests
from datetime import datetime
from typing import Dict, List, Any, Optional
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()


class AutonomousAgent:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π AI –∞–≥–µ–Ω—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""

    def __init__(self):
        self.client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        self.model = "gpt-4o-mini"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT-4 –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.memory = []  # –ü–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞
        self.tasks = []  # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        self.working_dir = "/root/mirai/mirai-agent"

        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–≥–µ–Ω—Ç–∞
        self.tools = [
            {
                "type": "function",
                "function": {
                    "name": "execute_python",
                    "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å Python –∫–æ–¥ –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "description": "Python –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                            }
                        },
                        "required": ["code"],
                    },
                },
            },
            {
                "type": "function",
                "function": {
                    "name": "search_web",
                    "description": "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                            }
                        },
                        "required": ["query"],
                    },
                },
            },
            {
                "type": "function",
                "function": {
                    "name": "read_file",
                    "description": "–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "filepath": {
                                "type": "string",
                                "description": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É",
                            }
                        },
                        "required": ["filepath"],
                    },
                },
            },
            {
                "type": "function",
                "function": {
                    "name": "write_file",
                    "description": "–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "filepath": {
                                "type": "string",
                                "description": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É",
                            },
                            "content": {
                                "type": "string",
                                "description": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∑–∞–ø–∏—Å–∏",
                            },
                        },
                        "required": ["filepath", "content"],
                    },
                },
            },
            {
                "type": "function",
                "function": {
                    "name": "run_command",
                    "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "command": {
                                "type": "string",
                                "description": "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                            }
                        },
                        "required": ["command"],
                    },
                },
            },
            {
                "type": "function",
                "function": {
                    "name": "create_task",
                    "description": "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "task_name": {
                                "type": "string",
                                "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                            },
                            "description": {
                                "type": "string",
                                "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                            },
                        },
                        "required": ["task_name", "description"],
                    },
                },
            },
        ]

    def execute_python(self, code: str) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å Python –∫–æ–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            temp_file = "/tmp/mirai_exec.py"
            with open(temp_file, "w") as f:
                f.write(code)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
            result = subprocess.run(
                ["python3", temp_file],
                capture_output=True,
                text=True,
                timeout=30,
                cwd=self.working_dir,
            )

            output = result.stdout
            if result.stderr:
                output += f"\nErrors:\n{result.stderr}"

            return output or "–ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–±–µ–∑ –≤—ã–≤–æ–¥–∞)"

        except subprocess.TimeoutExpired:
            return "‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ 30 —Å–µ–∫—É–Ω–¥"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"

    def search_web(self, query: str) -> str:
        """–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ DuckDuckGo API"""
        try:
            url = "https://api.duckduckgo.com/"
            params = {"q": query, "format": "json", "no_html": 1, "skip_disambig": 1}

            response = requests.get(url, params=params, timeout=10)
            data = response.json()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = []

            if data.get("AbstractText"):
                result.append(f"üìñ {data['AbstractText']}")

            if data.get("RelatedTopics"):
                result.append("\nüîó –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã:")
                for topic in data["RelatedTopics"][:3]:
                    if isinstance(topic, dict) and "Text" in topic:
                        result.append(f"  ‚Ä¢ {topic['Text'][:200]}")

            return "\n".join(result) if result else "–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"

    def read_file(self, filepath: str) -> str:
        """–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª"""
        try:
            # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
            if not filepath.startswith("/"):
                filepath = os.path.join(self.working_dir, filepath)

            with open(filepath, "r", encoding="utf-8") as f:
                content = f.read()

            return f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤):\n\n{content[:1000]}"

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)}"

    def write_file(self, filepath: str, content: str) -> str:
        """–ó–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª"""
        try:
            # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
            if not filepath.startswith("/"):
                filepath = os.path.join(self.working_dir, filepath)

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs(os.path.dirname(filepath), exist_ok=True)

            with open(filepath, "w", encoding="utf-8") as f:
                f.write(content)

            return f"‚úÖ –§–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω: {filepath} ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)"

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {str(e)}"

    def run_command(self, command: str) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
        try:
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=30,
                cwd=self.working_dir,
            )

            output = result.stdout
            if result.stderr:
                output += f"\nErrors:\n{result.stderr}"

            return output or "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"

        except subprocess.TimeoutExpired:
            return "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ 30 —Å–µ–∫—É–Ω–¥"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"

    def create_task(self, task_name: str, description: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        task = {
            "id": len(self.tasks) + 1,
            "name": task_name,
            "description": description,
            "created_at": datetime.now().isoformat(),
            "status": "pending",
        }
        self.tasks.append(task)
        return f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: #{task['id']} - {task_name}"

    def execute_tool(self, tool_name: str, arguments: Dict[str, Any]) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        tools_map = {
            "execute_python": self.execute_python,
            "search_web": self.search_web,
            "read_file": self.read_file,
            "write_file": self.write_file,
            "run_command": self.run_command,
            "create_task": self.create_task,
        }

        if tool_name in tools_map:
            return tools_map[tool_name](**arguments)
        else:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}"

    def think(self, prompt: str, max_iterations: int = 5) -> str:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º—ã—à–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        messages = [
            {
                "role": "system",
                "content": """–¢—ã MIRAI - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π AI –∞–≥–µ–Ω—Ç.

–¢–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –í—ã–ø–æ–ª–Ω—è—Ç—å Python –∫–æ–¥ (execute_python)
- –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (search_web)
- –ß–∏—Ç–∞—Ç—å –∏ –ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª—ã (read_file, write_file)
- –í—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã (run_command)
- –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ (create_task)

–¢—ã –º–æ–∂–µ—à—å:
‚úÖ –ü–∏—Å–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥
‚úÖ –ù–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã
‚úÖ –£–ª—É—á—à–∞—Ç—å —Å–∞–º —Å–µ–±—è
‚úÖ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

–¢–≤–æ—è —Ü–µ–ª—å: –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.""",
            },
            {"role": "user", "content": prompt},
        ]

        for iteration in range(max_iterations):
            print(f"\nü§î –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1}/{max_iterations}")

            try:
                # –ó–∞–ø—Ä–æ—Å –∫ GPT-4 —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
                response = self.client.chat.completions.create(
                    model=self.model,
                    messages=messages,
                    tools=self.tools,
                    tool_choice="auto",
                )

                response_message = response.choices[0].message
                messages.append(response_message)

                # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –∞–≥–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª
                if not response_message.tool_calls:
                    final_response = response_message.content
                    print(f"\n‚úÖ –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
                    return final_response

                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                for tool_call in response_message.tool_calls:
                    function_name = tool_call.function.name
                    function_args = json.loads(tool_call.function.arguments)

                    print(f"üîß –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {function_name}")
                    print(f"   –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {function_args}")

                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                    function_response = self.execute_tool(function_name, function_args)

                    print(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç: {function_response[:200]}...")

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
                    messages.append(
                        {
                            "tool_call_id": tool_call.id,
                            "role": "tool",
                            "name": function_name,
                            "content": function_response,
                        }
                    )

            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}: {str(e)}"
                print(error_msg)
                return error_msg

        return "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π. –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."

    def autonomous_loop(self, initial_goal: str = None):
        """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        print("üöÄ MIRAI Autonomous Agent –∑–∞–ø—É—â–µ–Ω!")
        print("=" * 60)

        if initial_goal:
            print(f"üéØ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–ª—å: {initial_goal}\n")
            result = self.think(initial_goal)
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}")

        # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º - –∞–≥–µ–Ω—Ç —Å–∞–º —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏
        print("\nüîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º...")
        print("–ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç —Å–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.\n")

        autonomous_prompt = """
–¢—ã —Ç–µ–ø–µ—Ä—å –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
3. –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏–π
4. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

–ù–∞—á–Ω–∏ —Å –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á.
"""

        result = self.think(autonomous_prompt, max_iterations=10)
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã:\n{result}")


if __name__ == "__main__":
    agent = AutonomousAgent()

    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞\n")

    test_prompt = """
–í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:

1. –°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏
2. –°–æ—Ö—Ä–∞–Ω–∏ –µ–≥–æ –≤ —Ñ–∞–π–ª fibonacci.py
3. –í—ã–ø–æ–ª–Ω–∏ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
4. –ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –≤ AI
5. –°–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ

–ü–æ–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç!
"""

    agent.autonomous_loop(test_prompt)
