#!/usr/bin/env python3
"""
üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ MIRAI
–°–æ–∑–¥–∞–Ω–∏–µ daily/weekly –ø–ª–∞–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞
"""

import json
import sqlite3
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional
from dataclasses import dataclass


@dataclass
class Task:
    """–ó–∞–¥–∞—á–∞ –≤ –ø–ª–∞–Ω–µ"""

    id: int
    title: str
    description: str
    priority: int
    estimated_hours: float
    deadline: Optional[str]
    goal_id: Optional[int]
    status: str  # planned, in_progress, completed, skipped


class AutoPlanner:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MIRAI:
    - –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π
    - –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    - –°–æ–∑–¥–∞–Ω–∏–µ daily/weekly –ø–ª–∞–Ω–æ–≤
    - –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    """

    def __init__(
        self,
        memory_db: str = "/root/mirai/mirai-agent/data/long_term_memory.db",
    ):
        self.memory_db = Path(memory_db)

    def create_daily_plan(self) -> Dict:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å

        Returns:
            Dict —Å –ø–ª–∞–Ω–æ–º –¥–Ω—è
        """
        from core.long_term_memory import LongTermMemory
        from core.self_awareness import SelfAwareness

        ltm = LongTermMemory()
        awareness = SelfAwareness()

        # 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
        active_goals = ltm.get_active_goals(limit=10)

        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        performance = awareness.analyze_performance(days=7)
        improvements = awareness.propose_improvements()

        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ–∫—É—Å –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        focus_area = self._determine_daily_focus(performance, improvements)

        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å
        tasks = self._generate_daily_tasks(active_goals, focus_area, improvements)

        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
        plan = {
            "date": datetime.now().strftime("%Y-%m-%d"),
            "created_at": datetime.now().isoformat(),
            "focus_area": focus_area,
            "performance_score": performance["overall_score"],
            "tasks": [
                {
                    "title": t["title"],
                    "priority": t["priority"],
                    "estimated_hours": t["estimated_hours"],
                    "goal_id": t.get("goal_id"),
                }
                for t in tasks
            ],
            "total_tasks": len(tasks),
            "estimated_hours": sum(t["estimated_hours"] for t in tasks),
        }

        self._save_plan(plan, "daily")

        return plan

    def create_weekly_plan(self) -> Dict:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é

        Returns:
            Dict —Å –ø–ª–∞–Ω–æ–º –Ω–µ–¥–µ–ª–∏
        """
        from core.long_term_memory import LongTermMemory
        from core.self_awareness import SelfAwareness

        ltm = LongTermMemory()
        awareness = SelfAwareness()

        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
        active_goals = ltm.get_active_goals(limit=20)

        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        performance = awareness.analyze_performance(days=30)
        improvements = awareness.propose_improvements()

        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–µ–¥–µ–ª–∏
        strategy = self._determine_weekly_strategy(active_goals, performance, improvements)

        # 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        weekly_tasks = self._distribute_tasks_by_days(active_goals, strategy)

        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
        plan = {
            "week_start": datetime.now().strftime("%Y-%m-%d"),
            "week_end": (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d"),
            "created_at": datetime.now().isoformat(),
            "strategy": strategy,
            "performance_score": performance["overall_score"],
            "daily_plans": weekly_tasks,
            "total_goals": len(active_goals),
            "high_priority_goals": len([g for g in active_goals if g.priority >= 8]),
        }

        self._save_plan(plan, "weekly")

        return plan

    def _determine_daily_focus(self, performance: Dict, improvements: List[Dict]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ–∫—É—Å –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã - —Ñ–æ–∫—É—Å –Ω–∞ –Ω–∏—Ö
        critical = [i for i in improvements if i["priority"] == "–∫—Ä–∏—Ç–∏—á–Ω—ã–π"]
        if critical:
            return f"üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ: {critical[0]['area']}"

        # –ï—Å–ª–∏ performance –Ω–∏–∑–∫–∏–π - —Ñ–æ–∫—É—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω
        if performance["overall_score"] < 50:
            return "‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"

        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
        high_priority = [i for i in improvements if i["priority"] == "–≤—ã—Å–æ–∫–∏–π"]
        if high_priority:
            return f"üü† –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {high_priority[0]['area']}"

        # –ï—Å–ª–∏ performance —Å—Ä–µ–¥–Ω–∏–π - —Ñ–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º
        if performance["overall_score"] < 70:
            return "üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π"

        # –ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ - —Ñ–æ–∫—É—Å –Ω–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏
        return "üöÄ –ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"

    def _determine_weekly_strategy(
        self, goals: List, performance: Dict, improvements: List[Dict]
    ) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–µ–¥–µ–ª–∏"""

        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π - —Ñ–æ–∫—É—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if len(goals) > 10:
            return "üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–∏–≤—à–∏—Ö—Å—è —Ü–µ–ª–µ–π"

        # –ï—Å–ª–∏ –Ω–∏–∑–∫–∏–π success rate - —Ñ–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ
        if performance["goals"]["success_rate"] < 50:
            return "‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"

        # –ï—Å–ª–∏ —Ç—Ä–µ–Ω–¥ —É—Ö—É–¥—à–µ–Ω–∏—è - —Ñ–æ–∫—É—Å –Ω–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é
        if performance["trends"]["direction"] == "degrading":
            return "üìâ –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"

        # –ï—Å–ª–∏ —Ç—Ä–µ–Ω–¥ —É–ª—É—á—à–µ–Ω–∏—è - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫—É—Ä—Å
        if performance["trends"]["direction"] == "improving":
            return "üìà –£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        return "‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ü–µ–ª—è–º–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏"

    def _generate_daily_tasks(
        self, goals: List, focus_area: str, improvements: List[Dict]
    ) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å"""
        tasks = []

        # 1. –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ improvements (–µ—Å–ª–∏ –µ—Å—Ç—å)
        critical = [i for i in improvements if i["priority"] in ["–∫—Ä–∏—Ç–∏—á–Ω—ã–π", "–≤—ã—Å–æ–∫–∏–π"]]
        for imp in critical[:2]:  # –ú–∞–∫—Å–∏–º—É–º 2 –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –¥–µ–Ω—å
            tasks.append(
                {
                    "title": f"–£–ª—É—á—à–µ–Ω–∏–µ: {imp['area']}",
                    "description": imp["suggestion"],
                    "priority": 10 if imp["priority"] == "–∫—Ä–∏—Ç–∏—á–Ω—ã–π" else 9,
                    "estimated_hours": 2.0,
                    "goal_id": None,
                }
            )

        # 2. –ó–∞–¥–∞—á–∏ –ø–æ —Ç–æ–ø-3 —Ü–µ–ª—è–º
        for goal in goals[:3]:
            tasks.append(
                {
                    "title": f"–¶–µ–ª—å: {goal.title}",
                    "description": goal.description,
                    "priority": goal.priority,
                    "estimated_hours": 1.5,
                    "goal_id": goal.id,
                }
            )

        # 3. –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –æ–±—É—á–µ–Ω–∏–µ)
        tasks.append(
            {
                "title": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∏ CI/CD",
                "description": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏, –º–µ—Ç—Ä–∏–∫–∏, GitHub Actions",
                "priority": 7,
                "estimated_hours": 0.5,
                "goal_id": None,
            }
        )

        tasks.append(
            {
                "title": "NASA-Level –æ–±—É—á–µ–Ω–∏–µ",
                "description": "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é —á–µ—Ä–µ–∑ NASA-Level",
                "priority": 6,
                "estimated_hours": 1.0,
                "goal_id": None,
            }
        )

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        tasks.sort(key=lambda t: t["priority"], reverse=True)

        return tasks[:6]  # –ú–∞–∫—Å–∏–º—É–º 6 –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å

    def _distribute_tasks_by_days(self, goals: List, strategy: str) -> Dict:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"""
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

        weekly_plan = {}

        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ" in strategy:
            # –§–æ–∫—É—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ü–µ–ª–µ–π
            for i, day in enumerate(days):
                goals_for_day = goals[i * 2 : (i + 1) * 2]  # 2 —Ü–µ–ª–∏ –≤ –¥–µ–Ω—å
                weekly_plan[day] = [
                    {
                        "title": f"–ó–∞–≤–µ—Ä—à–∏—Ç—å: {g.title}",
                        "priority": g.priority,
                        "estimated_hours": 3.0,
                    }
                    for g in goals_for_day
                ]

        elif "–ö–∞—á–µ—Å—Ç–≤–æ" in strategy:
            # –ú–µ–Ω—å—à–µ –∑–∞–¥–∞—á, –±–æ–ª—å—à–µ —Ñ–æ–∫—É—Å–∞
            for i, day in enumerate(days):
                if i < len(goals):
                    weekly_plan[day] = [
                        {
                            "title": f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {goals[i].title}",
                            "priority": goals[i].priority,
                            "estimated_hours": 4.0,
                        }
                    ]
                else:
                    weekly_plan[day] = []

        else:
            # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            for i, day in enumerate(days):
                tasks_per_day = []

                # 1 –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Ü–µ–ª—å
                if i < len(goals):
                    tasks_per_day.append(
                        {
                            "title": goals[i].title,
                            "priority": goals[i].priority,
                            "estimated_hours": 2.0,
                        }
                    )

                # + —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏
                tasks_per_day.append(
                    {"title": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—É—á–µ–Ω–∏–µ", "priority": 6, "estimated_hours": 1.5}
                )

                weekly_plan[day] = tasks_per_day

        return weekly_plan

    def _save_plan(self, plan: Dict, plan_type: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.memory_db)
        cursor = conn.cursor()

        cursor.execute(
            """
            INSERT INTO plans (title, description, plan_type, plan_data, valid_until)
            VALUES (?, ?, ?, ?, ?)
        """,
            (
                f"{plan_type.capitalize()} Plan - {plan.get('date', plan.get('week_start'))}",
                f"Auto-generated {plan_type} plan",
                plan_type,
                json.dumps(plan, ensure_ascii=False),
                (
                    datetime.now() + timedelta(days=1 if plan_type == "daily" else 7)
                ).isoformat(),
            ),
        )

        conn.commit()
        conn.close()

    def get_current_plan(self, plan_type: str = "daily") -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω"""
        conn = sqlite3.connect(self.memory_db)
        cursor = conn.cursor()

        cursor.execute(
            """
            SELECT plan_data FROM plans
            WHERE plan_type = ? AND valid_until >= datetime('now')
            ORDER BY created_at DESC
            LIMIT 1
        """,
            (plan_type,),
        )

        row = cursor.fetchone()
        conn.close()

        if row:
            return json.loads(row[0])
        return None

    def review_plan_execution(self) -> Dict:
        """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞

        Returns:
            Dict —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        from core.long_term_memory import LongTermMemory

        ltm = LongTermMemory()
        current_plan = self.get_current_plan("daily")

        if not current_plan:
            return {"status": "no_plan", "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"}

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_start = datetime.now().replace(hour=0, minute=0, second=0)

        conn = sqlite3.connect(self.memory_db)
        cursor = conn.cursor()

        cursor.execute(
            """
            SELECT COUNT(*) FROM achievements
            WHERE created_at >= ?
        """,
            (today_start.isoformat(),),
        )
        achievements_today = cursor.fetchone()[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º
        cursor.execute(
            """
            SELECT COUNT(*) FROM goals
            WHERE status = 'completed' AND completed_at >= ?
        """,
            (today_start.isoformat(),),
        )
        completed_goals_today = cursor.fetchone()[0]

        conn.close()

        total_tasks = current_plan.get("total_tasks", 0)
        estimated_hours = current_plan.get("estimated_hours", 0)

        # –û—Ü–µ–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
        completion_rate = min(
            (achievements_today / max(total_tasks, 1)) * 100,
            100,
        )

        review = {
            "plan_date": current_plan.get("date"),
            "focus_area": current_plan.get("focus_area"),
            "planned_tasks": total_tasks,
            "estimated_hours": estimated_hours,
            "achievements_today": achievements_today,
            "completed_goals_today": completed_goals_today,
            "completion_rate": round(completion_rate, 1),
            "status": (
                "excellent"
                if completion_rate >= 80
                else "good" if completion_rate >= 60 else "needs_improvement"
            ),
        }

        return review

    def adapt_plan(self) -> Dict:
        """
        –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            Dict —Å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–ª–∞–Ω–æ–º
        """
        review = self.review_plan_execution()

        if review.get("status") == "no_plan":
            return self.create_daily_plan()

        # –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ–µ - —Å–æ–∑–¥–∞—ë–º –±–æ–ª–µ–µ –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π –ø–ª–∞–Ω –∑–∞–≤—Ç—Ä–∞
        if review["status"] == "excellent":
            return {
                "adaptation": "increase_ambition",
                "message": "–û—Ç–ª–∏—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ! –ó–∞–≤—Ç—Ä–∞ —É–≤–µ–ª–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á.",
                "next_plan_tasks": review["planned_tasks"] + 1,
            }

        # –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–æ—Ö–æ–µ - —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
        elif review["status"] == "needs_improvement":
            return {
                "adaptation": "reduce_load",
                "message": "–ü–ª–∞–Ω –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ó–∞–≤—Ç—Ä–∞ —É–º–µ–Ω—å—à–∏–º –Ω–∞–≥—Ä—É–∑–∫—É.",
                "next_plan_tasks": max(review["planned_tasks"] - 1, 3),
            }

        # –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        else:
            return {
                "adaptation": "maintain",
                "message": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.",
                "next_plan_tasks": review["planned_tasks"],
            }

    def get_plan_summary(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞"""
        daily_plan = self.get_current_plan("daily")
        weekly_plan = self.get_current_plan("weekly")

        summary = "üìã –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï MIRAI\n\n"

        if daily_plan:
            summary += f"üìÖ –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({daily_plan['date']}):\n"
            summary += f"  –§–æ–∫—É—Å: {daily_plan['focus_area']}\n"
            summary += f"  –ó–∞–¥–∞—á: {daily_plan['total_tasks']}\n"
            summary += f"  –ß–∞—Å–æ–≤: {daily_plan['estimated_hours']:.1f}\n"

            if daily_plan.get("tasks"):
                summary += "\n  –¢–æ–ø-3 –∑–∞–¥–∞—á–∏:\n"
                for i, task in enumerate(daily_plan["tasks"][:3], 1):
                    summary += f"    {i}. [{task['priority']}] {task['title']}\n"
        else:
            summary += "üìÖ –ù–µ—Ç –ø–ª–∞–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"

        summary += "\n"

        if weekly_plan:
            summary += f"üìÜ –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é ({weekly_plan['week_start']} - {weekly_plan['week_end']}):\n"
            summary += f"  –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {weekly_plan['strategy']}\n"
            summary += f"  –¶–µ–ª–µ–π: {weekly_plan['total_goals']}\n"
            summary += f"  –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö: {weekly_plan['high_priority_goals']}\n"
        else:
            summary += "üìÜ –ù–µ—Ç –ø–ª–∞–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"

        return summary.strip()


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üìã –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø MIRAI\n")

    planner = AutoPlanner()

    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
    print("=" * 70)
    print("üìÖ –°–û–ó–î–ê–Æ –ü–õ–ê–ù –ù–ê –î–ï–ù–¨...\n")
    daily_plan = planner.create_daily_plan()

    print(f"–î–∞—Ç–∞: {daily_plan['date']}")
    print(f"–§–æ–∫—É—Å: {daily_plan['focus_area']}")
    print(f"Performance Score: {daily_plan['performance_score']:.1f}/100")
    print(f"\n–ó–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å ({daily_plan['total_tasks']}):\n")

    for i, task in enumerate(daily_plan["tasks"], 1):
        print(f"{i}. [{task['priority']}] {task['title']}")
        print(f"   –í—Ä–µ–º—è: {task['estimated_hours']}—á")
        if task.get("goal_id"):
            print(f"   –¶–µ–ª—å ID: {task['goal_id']}")
        print()

    print(f"–í—Å–µ–≥–æ —á–∞—Å–æ–≤: {daily_plan['estimated_hours']:.1f}—á")

    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é
    print("\n" + "=" * 70)
    print("üìÜ –°–û–ó–î–ê–Æ –ü–õ–ê–ù –ù–ê –ù–ï–î–ï–õ–Æ...\n")
    weekly_plan = planner.create_weekly_plan()

    print(f"–ü–µ—Ä–∏–æ–¥: {weekly_plan['week_start']} - {weekly_plan['week_end']}")
    print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {weekly_plan['strategy']}")
    print(f"–¶–µ–ª–µ–π: {weekly_plan['total_goals']}")
    print(f"–í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö: {weekly_plan['high_priority_goals']}")

    # –°–≤–æ–¥–∫–∞
    print("\n" + "=" * 70)
    print(planner.get_plan_summary())


if __name__ == "__main__":
    main()
