#!/usr/bin/env python3
"""
ü§ñ SELENIUM BROWSER AGENT - –ù–∞—Å—Ç–æ—è—â–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
============================================================

–ê–≥–µ–Ω—Ç –¥–ª—è –†–ï–ê–õ–¨–ù–û–ì–û —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º —á–µ—Ä–µ–∑ Selenium:
- –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –±—Ä–∞—É–∑–µ—Ä–æ–º
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
- –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript
- –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏–π

–ê–≤—Ç–æ—Ä: MIRAI Team  
–î–∞—Ç–∞: 2025-10-25
"""

import asyncio
import logging
import time
from pathlib import Path
from typing import Any, Dict, List, Optional

logger = logging.getLogger(__name__)

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Selenium (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
try:
    from selenium import webdriver
    from selenium.webdriver.chrome.options import Options as ChromeOptions
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.common.by import By
    from selenium.webdriver.common.keys import Keys
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.support.ui import WebDriverWait
    SELENIUM_AVAILABLE = True
except ImportError:
    SELENIUM_AVAILABLE = False
    logger.warning("‚ö†Ô∏è Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install selenium")


class SeleniumBrowserAgent:
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ Selenium.
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ó–∞–ø—É—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–º
    - –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    - –ü–æ–∏—Å–∫ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    - –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º
    - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript
    - –°–∫—Ä–∏–Ω—à–æ—Ç—ã
    """
    
    def __init__(self, headless: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞.
        
        Args:
            headless: –ó–∞–ø—É—Å–∫–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤ headless —Ä–µ–∂–∏–º–µ
        """
        if not SELENIUM_AVAILABLE:
            raise ImportError(
                "Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install selenium"
            )
        
        self.headless = headless
        self.driver: Optional[webdriver.Chrome] = None
        self.wait: Optional[WebDriverWait] = None
        logger.info("‚úÖ SeleniumBrowserAgent —Å–æ–∑–¥–∞–Ω")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.driver:
            logger.warning("‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
        options = ChromeOptions()
        
        if self.headless:
            options.add_argument('--headless')
        
        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_argument('--start-maximized')
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –ª–æ–≥–∏
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
        options.add_experimental_option('useAutomationExtension', False)
        
        # User agent
        options.add_argument(
            'user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
            'AppleWebKit/537.36 (KHTML, like Gecko) '
            'Chrome/120.0.0.0 Safari/537.36'
        )
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            self.driver = webdriver.Chrome(options=options)
            self.wait = WebDriverWait(self.driver, 10)
            
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")
            raise
    
    async def search_google(self, query: str) -> Dict[str, Any]:
        """
        –ü–æ–∏—Å–∫ –≤ Google —Å –†–ï–ê–õ–¨–ù–´–ú –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º.
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        """
        if not self.driver:
            await self.initialize()
        
        logger.info(f"üîç Google –ø–æ–∏—Å–∫: {query}")
        
        try:
            # 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º Google
            self.driver.get('https://www.google.com')
            await asyncio.sleep(1)
            
            # 2. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
            search_box = self.wait.until(
                EC.presence_of_element_located((By.NAME, 'q'))
            )
            
            # 3. –í–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
            search_box.clear()
            search_box.send_keys(query)
            search_box.send_keys(Keys.RETURN)
            
            # 4. –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.wait.until(
                EC.presence_of_element_located((By.ID, 'search'))
            )
            await asyncio.sleep(1)
            
            # 5. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = []
            search_results = self.driver.find_elements(By.CSS_SELECTOR, 'div.g')
            
            for result in search_results[:10]:
                try:
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    title_elem = result.find_element(By.CSS_SELECTOR, 'h3')
                    title = title_elem.text
                    
                    # –°—Å—ã–ª–∫–∞
                    link_elem = result.find_element(By.CSS_SELECTOR, 'a')
                    url = link_elem.get_attribute('href')
                    
                    # –û–ø–∏—Å–∞–Ω–∏–µ
                    try:
                        snippet_elem = result.find_element(
                            By.CSS_SELECTOR, 
                            'div[data-sncf], div.VwiC3b, span.aCOpRe'
                        )
                        snippet = snippet_elem.text
                    except:
                        snippet = ''
                    
                    if title and url:
                        results.append({
                            'title': title,
                            'url': url,
                            'snippet': snippet
                        })
                        
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                    continue
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            return {
                'success': True,
                'query': query,
                'results': results,
                'count': len(results)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return {
                'success': False,
                'query': query,
                'error': str(e)
            }
    
    async def visit_and_read(self, url: str) -> Optional[str]:
        """
        –ü–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç –∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.
        
        Args:
            url: URL —Å–∞–π—Ç–∞
            
        Returns:
            –¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ None
        """
        if not self.driver:
            await self.initialize()
        
        logger.info(f"üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç
            self.driver.get(url)
            
            # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏
            await asyncio.sleep(2)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            try:
                main_content = self.driver.find_element(
                    By.CSS_SELECTOR, 
                    'article, main, div.content, div.post, body'
                )
                text = main_content.text
            except:
                text = self.driver.find_element(By.TAG_NAME, 'body').text
            
            logger.info(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
            return None
    
    async def click_element(
        self, 
        selector: str, 
        by: By = By.CSS_SELECTOR
    ) -> bool:
        """
        –ö–ª–∏–∫–Ω—É—Ç—å –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É.
        
        Args:
            selector: –°–µ–ª–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
            by: –¢–∏–ø —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ (CSS, XPATH, –∏ —Ç.–¥.)
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.driver:
            await self.initialize()
        
        try:
            element = self.wait.until(
                EC.element_to_be_clickable((by, selector))
            )
            element.click()
            logger.info(f"‚úÖ –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É: {selector}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å: {e}")
            return False
    
    async def fill_input(
        self,
        selector: str,
        text: str,
        by: By = By.CSS_SELECTOR
    ) -> bool:
        """
        –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞.
        
        Args:
            selector: –°–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–ª—è
            text: –¢–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞
            by: –¢–∏–ø —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.driver:
            await self.initialize()
        
        try:
            element = self.wait.until(
                EC.presence_of_element_located((by, selector))
            )
            element.clear()
            element.send_keys(text)
            logger.info(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ: {selector}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ: {e}")
            return False
    
    async def execute_javascript(self, script: str) -> Any:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å JavaScript –∫–æ–¥.
        
        Args:
            script: JavaScript –∫–æ–¥
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if not self.driver:
            await self.initialize()
        
        try:
            result = self.driver.execute_script(script)
            logger.info(f"‚úÖ JavaScript –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript: {e}")
            return None
    
    async def take_screenshot(
        self,
        filename: Optional[str] = None
    ) -> Optional[str]:
        """
        –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        if not self.driver:
            await self.initialize()
        
        try:
            if not filename:
                timestamp = time.strftime("%Y%m%d_%H%M%S")
                filename = f"screenshot_{timestamp}.png"
            
            filepath = Path(filename)
            self.driver.save_screenshot(str(filepath))
            
            logger.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filepath}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None
    
    async def get_current_url(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π URL"""
        if not self.driver:
            return None
        return self.driver.current_url
    
    async def get_page_title(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if not self.driver:
            return None
        return self.driver.title
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            try:
                self.driver.quit()
                logger.info("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except:
                pass
            finally:
                self.driver = None
                self.wait = None


# ============================================================================
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# ============================================================================

async def search_with_selenium(query: str, headless: bool = False) -> Dict[str, Any]:
    """
    –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Selenium.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        headless: –ó–∞–ø—É—Å–∫–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤ headless —Ä–µ–∂–∏–º–µ
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    """
    agent = SeleniumBrowserAgent(headless=headless)
    try:
        await agent.initialize()
        results = await agent.search_google(query)
        return results
    finally:
        await agent.close()


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞
    async def test():
        if not SELENIUM_AVAILABLE:
            print("‚ùå Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        print("üöÄ –¢–µ—Å—Ç SeleniumBrowserAgent")
        print("=" * 70)
        
        agent = SeleniumBrowserAgent(headless=False)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await agent.initialize()
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            
            # –ü–æ–∏—Å–∫
            results = await agent.search_google("Python programming")
            
            print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results['count']}")
            for i, result in enumerate(results['results'][:3], 1):
                print(f"\n{i}. {result['title']}")
                print(f"   {result['url']}")
            
            # –°–∫—Ä–∏–Ω—à–æ—Ç
            screenshot = await agent.take_screenshot("test_search.png")
            if screenshot:
                print(f"\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {screenshot}")
            
            # –ü–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            print("\n–ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)
            
        finally:
            await agent.close()
            print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")
    
    asyncio.run(test())
