#!/usr/bin/env python3
"""
MIRAI Self-Evolution System
–°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ü–µ–ª–µ–ø–æ–ª–∞–≥–∞–Ω–∏—è
"""

import json
import random
import logging
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Optional, Any

logger = logging.getLogger(__name__)


class KnowledgeBase:
    """–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ú–ò–†–ê–ô - —á—Ç–æ –æ–Ω–∞ —É–º–µ–µ—Ç –∏ –∑–Ω–∞–µ—Ç"""

    def __init__(self, storage_path: str = "data/state/knowledge_base.json"):
        self.storage_path = Path(storage_path)
        self.storage_path.parent.mkdir(parents=True, exist_ok=True)
        self.knowledge = self._load()

    def _load(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        if self.storage_path.exists():
            with open(self.storage_path, "r") as f:
                return json.load(f)
        return {
            "technologies": [],
            "skills": [],
            "completed_tasks": [],
            "failed_tasks": [],
            "interests": [],
            "performance_metrics": {},
        }

    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        with open(self.storage_path, "w") as f:
            json.dump(self.knowledge, f, indent=2, ensure_ascii=False)

    def add_technology(self, tech: str, proficiency: float = 0.0):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é"""
        self.knowledge["technologies"].append(
            {
                "name": tech,
                "proficiency": proficiency,
                "learned_at": datetime.now().isoformat(),
            }
        )
        self.save()

    def add_skill(self, skill: str, level: int = 1):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫"""
        self.knowledge["skills"].append(
            {"name": skill, "level": level, "acquired_at": datetime.now().isoformat()}
        )
        self.save()

    def log_task_completion(self, task: str, success: bool, details: str = ""):
        """–ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        entry = {
            "task": task,
            "completed_at": datetime.now().isoformat(),
            "details": details,
        }

        if success:
            self.knowledge["completed_tasks"].append(entry)
        else:
            self.knowledge["failed_tasks"].append(entry)

        self.save()

    def update_performance(self, metric: str, value: float):
        """–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.knowledge["performance_metrics"][metric] = value
        self.save()


class GoalGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–µ–ª–µ–π - –ú–ò–†–ê–ô —Å–∞–º–∞ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è"""

    def __init__(self, knowledge_base: KnowledgeBase):
        self.kb = knowledge_base

        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è
        self.development_areas = {
            "backend": ["FastAPI", "Django", "Flask", "GraphQL", "gRPC"],
            "frontend": ["React", "Vue", "Svelte", "Next.js", "TypeScript"],
            "devops": ["Kubernetes", "Docker", "Terraform", "Ansible", "CI/CD"],
            "ml": [
                "TensorFlow",
                "PyTorch",
                "Scikit-learn",
                "Hugging Face",
                "LangChain",
            ],
            "databases": ["PostgreSQL", "MongoDB", "Redis", "Elasticsearch", "Neo4j"],
            "cloud": ["AWS", "GCP", "Azure", "Cloudflare", "Vercel"],
            "security": ["OWASP", "Penetration Testing", "Encryption", "OAuth2", "JWT"],
            "blockchain": ["Ethereum", "Solidity", "Web3", "Smart Contracts", "DeFi"],
            "mobile": ["React Native", "Flutter", "Swift", "Kotlin", "Expo"],
            "iot": ["Arduino", "Raspberry Pi", "MQTT", "LoRaWAN", "Edge Computing"],
        }

    def generate_goals(self, count: int = 5) -> List[Dict[str, Any]]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ü–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        goals = []

        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ —É–∂–µ –∑–Ω–∞–µ–º
        known_techs = {tech["name"] for tech in self.kb.knowledge["technologies"]}

        # 2. –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º
        area_scores = {}
        for area, techs in self.development_areas.items():
            known_count = len([t for t in techs if t in known_techs])
            area_scores[area] = 1.0 - (known_count / len(techs))

        # 3. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–º–µ–Ω—å—à–µ –∑–Ω–∞–Ω–∏–π = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        sorted_areas = sorted(area_scores.items(), key=lambda x: x[1], reverse=True)

        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–ª–∏ –∏–∑ —Ç–æ–ø-–æ–±–ª–∞—Å—Ç–µ–π
        for area, _ in sorted_areas[:3]:
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω–µ –∑–Ω–∞–µ–º
            available_techs = [
                t for t in self.development_areas[area] if t not in known_techs
            ]

            if available_techs:
                tech = random.choice(available_techs)
                goals.append(
                    {
                        "type": "learn_technology",
                        "area": area,
                        "technology": tech,
                        "priority": area_scores[area],
                        "description": f"–ò–∑—É—á–∏—Ç—å {tech} –≤ –æ–±–ª–∞—Å—Ç–∏ {area}",
                        "steps": [
                            f"–ù–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é {tech}",
                            f"–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å {tech}",
                            f"–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—è {tech}",
                            f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è {tech}",
                        ],
                    }
                )

        # 5. –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–∞–ª–æ–≤
        if len(self.kb.knowledge["failed_tasks"]) > 0:
            recent_failures = self.kb.knowledge["failed_tasks"][-3:]
            for failure in recent_failures:
                goals.append(
                    {
                        "type": "retry_failed",
                        "task": failure["task"],
                        "priority": 0.9,
                        "description": f"–†–µ—à–∏—Ç—å —Ä–∞–Ω–µ–µ –Ω–µ—É–¥–∞–≤—à—É—é—Å—è –∑–∞–¥–∞—á—É: {failure['task'][:50]}",
                        "steps": [
                            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–≤–∞–ª–∞",
                            "–ù–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
                            "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É",
                        ],
                    }
                )

        # 6. –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–ª–∏
        goals.append(
            {
                "type": "explore",
                "priority": 0.5,
                "description": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ç—Ä–µ–Ω–¥—ã",
                "steps": [
                    "–ü–æ–∏—Å–∫–∞—Ç—å trending repositories –Ω–∞ GitHub",
                    "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞ HackerNews",
                    "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤",
                ],
            }
        )

        return goals[:count]

    def prioritize_goals(self, goals: List[Dict]) -> List[Dict]:
        """–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ü–µ–ª–µ–π"""
        return sorted(goals, key=lambda g: g.get("priority", 0), reverse=True)


class LearningEngine:
    """–î–≤–∏–∂–æ–∫ –æ–±—É—á–µ–Ω–∏—è - –∫–∞–∫ –ú–ò–†–ê–ô —É—á–∏—Ç—Å—è –Ω–æ–≤–æ–º—É"""

    def __init__(self, autonomous_agent, knowledge_base: KnowledgeBase):
        self.agent = autonomous_agent
        self.kb = knowledge_base

    def learn_technology(self, technology: str) -> Dict[str, Any]:
        """–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é"""
        logger.info(f"üìö –ù–∞—á–∏–Ω–∞—é –∏–∑—É—á–µ–Ω–∏–µ: {technology}")

        result = {
            "technology": technology,
            "success": False,
            "proficiency": 0.0,
            "artifacts": [],
        }

        try:
            # 1. –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            search_query = f"{technology} official documentation tutorial"
            docs_info = self.agent.search_web(search_query)
            result["artifacts"].append({"type": "docs", "content": docs_info[:200]})

            # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            test_code = f"""
# Test project for {technology}
# Generated by MIRAI self-learning system

print("Testing {technology}")

# TODO: Add {technology} specific code here
"""

            filename = f"learning/{technology.lower().replace(' ', '_')}_test.py"
            self.agent.write_file(filename, test_code)
            result["artifacts"].append({"type": "test_project", "path": filename})

            # 3. –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                test_prompt = (
                    f"–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ–π Hello World –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑—É—è {technology}"
                )
                example_code = self.agent.think(test_prompt, max_iterations=2)

                result["artifacts"].append(
                    {"type": "example", "content": example_code[:200]}
                )
                result["proficiency"] = 0.3  # –ë–∞–∑–æ–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {technology}: {e}")
                result["proficiency"] = 0.1

            # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            self.kb.add_technology(technology, result["proficiency"])
            result["success"] = True

            logger.info(
                f"‚úÖ –ò–∑—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {technology} (—É—Ä–æ–≤–µ–Ω—å: {result['proficiency']})"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑—É—á–µ–Ω–∏—è {technology}: {e}")
            result["error"] = str(e)

        return result

    def test_knowledge(self, technology: str) -> float:
        """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        known_techs = [
            t for t in self.kb.knowledge["technologies"] if t["name"] == technology
        ]

        if not known_techs:
            return 0.0

        return known_techs[0]["proficiency"]


class SelfModificationEngine:
    """–î–≤–∏–∂–æ–∫ —Å–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ú–ò–†–ê–ô —É–ª—É—á—à–∞–µ—Ç —Å–∞–º—É —Å–µ–±—è"""

    def __init__(self, autonomous_agent, knowledge_base: KnowledgeBase):
        self.agent = autonomous_agent
        self.kb = knowledge_base
        self.modifications_log = []

    def propose_improvement(self, area: str) -> Optional[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        prompt = f"""
–¢—ã –ú–ò–†–ê–ô. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–≤–æ–π –∫–æ–¥ –≤ –æ–±–ª–∞—Å—Ç–∏ "{area}" –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ö–û–ù–ö–†–ï–¢–ù–û–ï —É–ª—É—á—à–µ–Ω–∏–µ.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
FILE: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
REASON: –ø–æ—á–µ–º—É –Ω—É–∂–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ
CODE: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è
"""

        suggestion = self.agent.think(prompt, max_iterations=3)
        return suggestion

    def add_new_tool(self, tool_name: str, tool_code: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ –∞—Ä—Å–µ–Ω–∞–ª"""
        try:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            tool_path = f"core/tools/{tool_name.lower()}.py"
            self.agent.write_file(tool_path, tool_code)

            # –õ–æ–≥–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é
            self.modifications_log.append(
                {
                    "type": "new_tool",
                    "name": tool_name,
                    "path": tool_path,
                    "timestamp": datetime.now().isoformat(),
                }
            )

            self.kb.add_skill(f"Tool: {tool_name}", level=1)

            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {e}")
            return False

    def improve_existing_code(self, file_path: str, improvement: str) -> bool:
        """–£–ª—É—á—à–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥
            current_code = self.agent.read_file(file_path)

            # –ü—Ä–æ—Å–∏–º –∞–≥–µ–Ω—Ç–∞ —É–ª—É—á—à–∏—Ç—å
            prompt = f"""
–£–ª—É—á—à–∏ —ç—Ç–æ—Ç –∫–æ–¥:

{current_code[:1000]}

–¢—Ä–µ–±—É–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {improvement}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–¥, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
"""

            improved_code = self.agent.think(prompt, max_iterations=5)

            # –°–æ–∑–¥–∞—ë–º backup
            backup_path = f"{file_path}.backup"
            self.agent.write_file(backup_path, current_code)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–¥
            self.agent.write_file(file_path, improved_code)

            logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω —Ñ–∞–π–ª: {file_path}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è {file_path}: {e}")
            return False


class MultiDirectionalExecutor:
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π - —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ü–µ–ª—è–º–∏"""

    def __init__(self):
        self.active_projects = []
        self.completed_projects = []

    def add_project(self, project: Dict):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"""
        project["started_at"] = datetime.now().isoformat()
        project["status"] = "active"
        self.active_projects.append(project)

    def work_on_projects(self, time_slice: int = 5) -> List[Dict]:
        """–†–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ (round-robin)"""
        results = []

        for project in self.active_projects[:time_slice]:
            result = {"project": project["description"], "progress": 0.0}

            # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
            if "current_step" not in project:
                project["current_step"] = 0

            if project["current_step"] < len(project.get("steps", [])):
                current_step = project["steps"][project["current_step"]]
                result["action"] = f"–í—ã–ø–æ–ª–Ω—è—é: {current_step}"
                project["current_step"] += 1
                result["progress"] = project["current_step"] / len(project["steps"])
            else:
                project["status"] = "completed"
                project["completed_at"] = datetime.now().isoformat()
                self.completed_projects.append(project)
                self.active_projects.remove(project)
                result["progress"] = 1.0
                result["action"] = "–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à—ë–Ω"

            results.append(result)

        return results

    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        return {
            "active": len(self.active_projects),
            "completed": len(self.completed_projects),
            "projects": [
                {
                    "name": p.get("description", "Unknown"),
                    "progress": p.get("current_step", 0)
                    / len(p.get("steps", [1]))
                    * 100,
                }
                for p in self.active_projects
            ],
        }


class SelfEvolutionSystem:
    """–ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –ú–ò–†–ê–ô"""

    def __init__(self, autonomous_agent):
        self.agent = autonomous_agent
        self.kb = KnowledgeBase()
        self.goal_generator = GoalGenerator(self.kb)
        self.learning_engine = LearningEngine(autonomous_agent, self.kb)
        self.modification_engine = SelfModificationEngine(autonomous_agent, self.kb)
        self.executor = MultiDirectionalExecutor()

        logger.info("üå∏ –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –ú–ò–†–ê–ô –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def evolution_cycle(self) -> Dict[str, Any]:
        """–û–¥–∏–Ω —Ü–∏–∫–ª —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è"""
        logger.info("üîÑ –¶–ò–ö–õ –°–ê–ú–û–†–ê–ó–í–ò–¢–ò–Ø")

        results = {
            "timestamp": datetime.now().isoformat(),
            "goals_generated": 0,
            "learning_completed": 0,
            "improvements_made": 0,
            "projects_progress": [],
        }

        try:
            # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ü–µ–ª–µ–π
            if len(self.executor.active_projects) < 3:
                new_goals = self.goal_generator.generate_goals(count=3)
                results["goals_generated"] = len(new_goals)

                for goal in new_goals:
                    if goal["type"] == "learn_technology":
                        self.executor.add_project(goal)

            # 2. –†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ç–µ–∫—É—â–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
            progress = self.executor.work_on_projects(time_slice=3)
            results["projects_progress"] = progress

            # 3. –û–±—É—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ)
            for project in self.executor.active_projects[:1]:
                if project.get("type") == "learn_technology":
                    tech = project.get("technology")
                    if tech:
                        learning_result = self.learning_engine.learn_technology(tech)
                        if learning_result["success"]:
                            results["learning_completed"] += 1

            # 4. –°–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è (–∫–∞–∂–¥—ã–µ N —Ü–∏–∫–ª–æ–≤)
            if random.random() < 0.2:  # 20% —à–∞–Ω—Å
                improvement = self.modification_engine.propose_improvement(
                    "autonomous_agent"
                )
                if improvement:
                    results["improvements_made"] = 1

            logger.info(f"‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω: {results}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è: {e}", exc_info=True)
            results["error"] = str(e)

        return results

    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "knowledge": {
                "technologies": len(self.kb.knowledge["technologies"]),
                "skills": len(self.kb.knowledge["skills"]),
                "completed_tasks": len(self.kb.knowledge["completed_tasks"]),
                "failed_tasks": len(self.kb.knowledge["failed_tasks"]),
            },
            "projects": self.executor.get_status(),
            "modifications": len(self.modification_engine.modifications_log),
        }
