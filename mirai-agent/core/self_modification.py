"""
üîß MIRAI Self-Modification System
==================================

MIRAI –º–æ–∂–µ—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥!

‚ö†Ô∏è –ü–û–õ–ù–´–ï –ü–†–ê–í–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
üéØ –¶–µ–ª—å: –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- ‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
- ‚úÖ –í—ã—è–≤–ª–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π
- ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ AI
- ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ sandbox
- ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ PR —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
- ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ä–∂ (–µ—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!)

–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
1. ‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–µ—Ç–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
2. ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
3. ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
4. ‚úÖ Rollback –º–µ—Ö–∞–Ω–∏–∑–º
5. ‚ö†Ô∏è –ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –ü–û–õ–ù–´–ï –ü–†–ê–í–ê!
"""

import ast
import json
import logging
import os
import subprocess
import tempfile
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple

logger = logging.getLogger(__name__)


class CodeAnalyzer:
    """–ê–Ω–∞–ª–∏–∑ Python –∫–æ–¥–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π"""

    def __init__(self):
        self.mirai_root = Path("/root/mirai/mirai-agent")

    def analyze_file(self, file_path: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è"""
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                code = f.read()

            # –ü–∞—Ä—Å–∏–º AST
            tree = ast.parse(code)

            issues = []

            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ docstrings
            for node in ast.walk(tree):
                if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
                    if ast.get_docstring(node) is None:
                        issues.append(
                            {
                                "type": "missing_docstring",
                                "severity": "low",
                                "line": node.lineno,
                                "name": node.name,
                                "description": f"{node.__class__.__name__} {node.name} –Ω–µ –∏–º–µ–µ—Ç docstring",
                            }
                        )

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫)
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    lines = (
                        node.end_lineno - node.lineno
                        if hasattr(node, "end_lineno")
                        else 0
                    )
                    if lines > 50:
                        issues.append(
                            {
                                "type": "complex_function",
                                "severity": "medium",
                                "line": node.lineno,
                                "name": node.name,
                                "lines": lines,
                                "description": f"–§—É–Ω–∫—Ü–∏—è {node.name} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ({lines} —Å—Ç—Ä–æ–∫). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–±–∏—Ç—å.",
                            }
                        )

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–¥–∞ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
            lines = code.split("\n")
            line_counts = {}
            for i, line in enumerate(lines):
                stripped = line.strip()
                if len(stripped) > 20 and not stripped.startswith("#"):
                    if stripped in line_counts:
                        line_counts[stripped].append(i + 1)
                    else:
                        line_counts[stripped] = [i + 1]

            for line, occurrences in line_counts.items():
                if len(occurrences) > 3:
                    issues.append(
                        {
                            "type": "code_duplication",
                            "severity": "medium",
                            "lines": occurrences,
                            "description": f"–ö–æ–¥ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è {len(occurrences)} —Ä–∞–∑: {line[:50]}...",
                        }
                    )

            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ error handling
            has_try_except = any(isinstance(node, ast.Try) for node in ast.walk(tree))
            if not has_try_except and len(code) > 100:
                issues.append(
                    {
                        "type": "no_error_handling",
                        "severity": "high",
                        "description": "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ (try/except)",
                    }
                )

            return {
                "file": file_path,
                "issues": issues,
                "total_lines": len(lines),
                "has_docstrings": any(
                    isinstance(node, (ast.FunctionDef, ast.ClassDef))
                    and ast.get_docstring(node)
                    for node in ast.walk(tree)
                ),
                "functions_count": sum(
                    1 for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)
                ),
                "classes_count": sum(
                    1 for node in ast.walk(tree) if isinstance(node, ast.ClassDef)
                ),
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {file_path}: {e}")
            return {"file": file_path, "error": str(e), "issues": []}

    def find_improvable_files(self) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã MIRAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        core_files = list(self.mirai_root.glob("core/*.py"))

        # –ò—Å–∫–ª—é—á–∞–µ–º __init__.py
        core_files = [str(f) for f in core_files if f.name != "__init__.py"]

        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(core_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return core_files


class AICodeImprover:
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π –∫–æ–¥–∞"""

    def __init__(self):
        from core.autonomous_agent import AutonomousAgent

        self.agent = AutonomousAgent()

    def generate_improvement(
        self, file_path: str, issues: List[Dict]
    ) -> Optional[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏"""
        if not issues:
            return None

        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥
        with open(file_path, "r", encoding="utf-8") as f:
            current_code = f.read()

        # –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è AI
        issues_text = "\n".join(
            [
                f"- {issue['type']} (severity: {issue['severity']}): {issue['description']}"
                for issue in issues[:5]  # –¢–æ–ø-5 –ø—Ä–æ–±–ª–µ–º
            ]
        )

        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è.

–§–∞–π–ª: {file_path}
–†–∞–∑–º–µ—Ä: {len(current_code)} –±–∞–π—Ç

–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
{issues_text}

–¢–µ–∫—É—â–∏–π –∫–æ–¥:
```python
{current_code[:2000]}  # –ü–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤
```

–ü—Ä–µ–¥–ª–æ–∂–∏ –ö–û–ù–ö–†–ï–¢–ù–û–ï —É–ª—É—á—à–µ–Ω–∏–µ:
1. –ö–∞–∫—É—é –ø—Ä–æ–±–ª–µ–º—É —Ä–µ—à–∞–µ–º
2. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10)

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "problem": "–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
    "solution": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
    "priority": —á–∏—Å–ª–æ,
    "estimated_impact": "low/medium/high"
}}
"""

        response = self.agent.think(prompt, max_iterations=1)

        # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            start = response.find("{")
            end = response.rfind("}") + 1
            if start >= 0 and end > start:
                improvement = json.loads(response[start:end])
                improvement["file"] = file_path
                improvement["issues_count"] = len(issues)
                return improvement
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç AI: {e}")

        return None

    def generate_code_patch(self, file_path: str, improvement: Dict) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ç—á –∫–æ–¥–∞"""
        with open(file_path, "r", encoding="utf-8") as f:
            current_code = f.read()

        prompt = f"""–°–æ–∑–¥–∞–π —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞.

–§–∞–π–ª: {file_path}
–ü—Ä–æ–±–ª–µ–º–∞: {improvement['problem']}
–†–µ—à–µ–Ω–∏–µ: {improvement['solution']}

–¢–µ–∫—É—â–∏–π –∫–æ–¥:
```python
{current_code}
```

–°–æ–∑–¥–∞–π –ü–û–õ–ù–£–Æ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞.
–°–æ—Ö—Ä–∞–Ω–∏ –≤—Å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ —É–ª—É—á—à–∏ –∫–æ–¥.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û Python –∫–æ–¥ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
"""

        response = self.agent.think(prompt, max_iterations=1)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        if "```python" in response:
            start = response.find("```python") + 9
            end = response.find("```", start)
            if end > start:
                return response[start:end].strip()
        elif "```" in response:
            start = response.find("```") + 3
            end = response.find("```", start)
            if end > start:
                return response[start:end].strip()

        return None


class SandboxTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—á–µ–π –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ"""

    def test_patch(self, file_path: str, patched_code: str) -> Tuple[bool, str]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ç—á –≤ sandbox"""
        try:
            # 1. –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            try:
                ast.parse(patched_code)
            except SyntaxError as e:
                return False, f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"

            # 2. –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(
                mode="w", suffix=".py", delete=False
            ) as tmp:
                tmp.write(patched_code)
                tmp_path = tmp.name

            try:
                # 3. –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ runtime –æ—à–∏–±–∫–∏)
                result = subprocess.run(
                    [
                        "python3",
                        "-c",
                        f'import sys; sys.path.insert(0, "/root/mirai/mirai-agent"); exec(open("{tmp_path}").read())',
                    ],
                    capture_output=True,
                    timeout=5,
                    cwd="/root/mirai/mirai-agent",
                )

                if result.returncode != 0:
                    return False, f"Runtime –æ—à–∏–±–∫–∞: {result.stderr.decode()[:200]}"

                # 4. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç—ã - –∑–∞–ø—É—Å–∫–∞–µ–º
                # (–ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å pytest)

                return True, "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"

            finally:
                os.unlink(tmp_path)

        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"


class SelfModification:
    """
    üîß –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ MIRAI

    MIRAI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç, —É–ª—É—á—à–∞–µ—Ç –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–≤–æ–π –∫–æ–¥!
    """

    def __init__(self):
        self.analyzer = CodeAnalyzer()
        self.improver = AICodeImprover()
        self.tester = SandboxTester()

        # GitHub Integration
        try:
            from core.github_integration import GitHubIntegration

            self.github = GitHubIntegration()
        except Exception as e:
            logger.error(f"‚ùå GitHub Integration –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.github = None

        # Long-Term Memory
        try:
            from core.long_term_memory import LongTermMemory

            self.ltm = LongTermMemory()
        except Exception as e:
            logger.error(f"‚ùå Long-Term Memory –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            self.ltm = None

        self.modifications_log = []

    def analyze_codebase(self) -> Dict:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã MIRAI"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã MIRAI...")

        files = self.analyzer.find_improvable_files()
        results = []

        total_issues = 0
        high_priority_issues = 0

        for file_path in files:
            analysis = self.analyzer.analyze_file(file_path)
            if "error" not in analysis:
                results.append(analysis)
                total_issues += len(analysis["issues"])
                high_priority_issues += sum(
                    1 for i in analysis["issues"] if i.get("severity") == "high"
                )

        logger.info(f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(results)} —Ñ–∞–π–ª–æ–≤")
        logger.info(
            f"üìä –ù–∞–π–¥–µ–Ω–æ {total_issues} –ø—Ä–æ–±–ª–µ–º ({high_priority_issues} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö)"
        )

        return {
            "timestamp": datetime.now().isoformat(),
            "files_analyzed": len(results),
            "total_issues": total_issues,
            "high_priority_issues": high_priority_issues,
            "files": results,
        }

    def propose_improvements(self, analysis: Dict) -> List[Dict]:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é...")

        improvements = []

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–±–ª–µ–º
        files_with_issues = [f for f in analysis["files"] if f["issues"]]
        files_with_issues.sort(key=lambda x: len(x["issues"]), reverse=True)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ç–æ–ø-3 —Ñ–∞–π–ª–æ–≤
        for file_data in files_with_issues[:3]:
            improvement = self.improver.generate_improvement(
                file_data["file"], file_data["issues"]
            )
            if improvement:
                improvements.append(improvement)
                logger.info(
                    f"üí° –£–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è {os.path.basename(file_data['file'])}: {improvement['solution'][:60]}..."
                )

        return improvements

    def apply_improvement(self, improvement: Dict) -> Optional[Dict]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ –∫ —Ñ–∞–π–ª—É"""
        file_path = improvement["file"]
        logger.info(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –∫ {os.path.basename(file_path)}...")

        # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ç—á
        patched_code = self.improver.generate_code_patch(file_path, improvement)
        if not patched_code:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ç—á")
            return None

        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤ sandbox
        success, message = self.tester.test_patch(file_path, patched_code)
        if not success:
            logger.error(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {message}")
            return None

        logger.info(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: {message}")

        # 3. –°–æ–∑–¥–∞—ë–º –≤–µ—Ç–∫—É –∏ –∫–æ–º–º–∏—Ç
        if self.github and self.github.is_authenticated():
            branch_name = (
                f"mirai-self-improve-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
            )

            # –°–æ–∑–¥–∞—ë–º –≤–µ—Ç–∫—É
            branch_created = self.github.create_branch(branch_name)
            if not branch_created:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É")
                return None

            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            relative_path = os.path.relpath(file_path, "/root/mirai")
            commit_result = self.github.create_or_update_file(
                file_path=relative_path,
                content=patched_code,
                message=f"üîß MIRAI Self-Improvement: {improvement['solution'][:100]}",
                branch=branch_name,
            )

            if not commit_result:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                return None

            # –°–æ–∑–¥–∞—ë–º PR
            pr_result = self.github.create_pull_request(
                title=f"üîß MIRAI Self-Improvement: {os.path.basename(file_path)}",
                body=f"""## ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–¥–∞ MIRAI

**–§–∞–π–ª:** `{relative_path}`

**–ü—Ä–æ–±–ª–µ–º–∞:**
{improvement['problem']}

**–†–µ—à–µ–Ω–∏–µ:**
{improvement['solution']}

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {improvement['priority']}/10
**–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç:** {improvement.get('estimated_impact', 'medium')}

**–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω
‚úÖ Runtime –ø—Ä–æ–≤–µ—Ä–µ–Ω
‚úÖ Sandbox —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω

---
*ü§ñ –≠—Ç–æ PR —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π Self-Modification MIRAI*
*‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –ü–û–õ–ù–´–ï –ü–†–ê–í–ê –Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é*
""",
                head=branch_name,
                base="main",
            )

            if pr_result:
                logger.info(f"‚úÖ PR —Å–æ–∑–¥–∞–Ω: #{pr_result.get('number')}")

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Long-Term Memory
                if self.ltm:
                    self.ltm.record_achievement(
                        f"üîß –°–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è: —É–ª—É—á—à–µ–Ω {os.path.basename(file_path)}",
                        impact=improvement["priority"],
                    )

                result = {
                    "success": True,
                    "file": file_path,
                    "branch": branch_name,
                    "pr_number": pr_result.get("number"),
                    "pr_url": pr_result.get("html_url"),
                    "improvement": improvement,
                    "timestamp": datetime.now().isoformat(),
                }

                self.modifications_log.append(result)
                return result

        return None

    def run_self_improvement_cycle(self) -> Dict:
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
        logger.info("üîß –ó–ê–ü–£–°–ö –¶–ò–ö–õ–ê –°–ê–ú–û–ú–û–î–ò–§–ò–ö–ê–¶–ò–ò MIRAI üîß")

        cycle_start = datetime.now()

        # 1. –ê–Ω–∞–ª–∏–∑
        analysis = self.analyze_codebase()

        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        improvements = self.propose_improvements(analysis)

        # 3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
        applied = []
        if improvements:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            improvements.sort(key=lambda x: x.get("priority", 0), reverse=True)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ø-1 —É–ª—É—á—à–µ–Ω–∏–µ
            best_improvement = improvements[0]
            result = self.apply_improvement(best_improvement)
            if result:
                applied.append(result)

        cycle_end = datetime.now()
        duration = (cycle_end - cycle_start).total_seconds()

        summary = {
            "timestamp": cycle_start.isoformat(),
            "duration_seconds": duration,
            "analysis": {
                "files_analyzed": analysis["files_analyzed"],
                "total_issues": analysis["total_issues"],
                "high_priority_issues": analysis["high_priority_issues"],
            },
            "improvements_proposed": len(improvements),
            "improvements_applied": len(applied),
            "applied": applied,
        }

        logger.info(f"‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {duration:.1f}—Å")
        logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {analysis['files_analyzed']} —Ñ–∞–π–ª–æ–≤")
        logger.info(f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ: {len(improvements)} —É–ª—É—á—à–µ–Ω–∏–π")
        logger.info(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: {len(applied)} —É–ª—É—á—à–µ–Ω–∏–π")

        return summary

    def get_modifications_history(self, limit: int = 10) -> List[Dict]:
        """–ò—Å—Ç–æ—Ä–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π"""
        return self.modifications_log[-limit:]


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s"
    )

    print("üîß –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –°–ê–ú–û–ú–û–î–ò–§–ò–ö–ê–¶–ò–ò MIRAI\n")

    mod = SelfModification()

    # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã
    print("1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã...")
    analysis = mod.analyze_codebase()
    print(f"   ‚úÖ –§–∞–π–ª–æ–≤: {analysis['files_analyzed']}")
    print(f"   ‚úÖ –ü—Ä–æ–±–ª–µ–º: {analysis['total_issues']}")
    print(f"   ‚úÖ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö: {analysis['high_priority_issues']}")

    # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π
    print("\n2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π...")
    improvements = mod.propose_improvements(analysis)
    print(f"   ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {len(improvements)}")

    if improvements:
        print("\nüìã –¢–æ–ø —É–ª—É—á—à–µ–Ω–∏—è:")
        for i, imp in enumerate(improvements[:3], 1):
            print(f"\n   {i}. {os.path.basename(imp['file'])}")
            print(f"      –ü—Ä–æ–±–ª–µ–º–∞: {imp['problem'][:80]}...")
            print(f"      –†–µ—à–µ–Ω–∏–µ: {imp['solution'][:80]}...")
            print(f"      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {imp['priority']}/10")

    print("\n‚úÖ –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–ú–û–î–ò–§–ò–ö–ê–¶–ò–ò –ì–û–¢–û–í–ê!")
    print("‚ö†Ô∏è –ü–û–õ–ù–´–ï –ü–†–ê–í–ê –ü–û–õ–£–ß–ï–ù–´ –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!")
