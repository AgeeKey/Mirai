#!/usr/bin/env python3
"""
‚úÖ Execution Context Validator - –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
–®–∞–≥ 2 –∏–∑ 150: Validate Execution Context

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤:
- –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
- –†–µ—Å—É—Ä—Å—ã
- –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
"""

import logging
import platform
from typing import Dict, List, Optional, Any
from dataclasses import dataclass

try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False
    print("‚ö†Ô∏è psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è mock –¥–∞–Ω–Ω—ã–µ")

logger = logging.getLogger(__name__)


@dataclass
class ValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    is_valid: bool
    errors: List[str]
    warnings: List[str]
    info: Dict[str, Any]


class ExecutionContextValidator:
    """
    –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (CPU, RAM, Disk)
    - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    - –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        """
        self.config = config or {}
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.min_cpu_percent = self.config.get('min_cpu_percent', 10.0)
        self.min_memory_mb = self.config.get('min_memory_mb', 512)
        self.min_disk_gb = self.config.get('min_disk_gb', 1)
        
        logger.info("‚úÖ ExecutionContextValidator —Å–æ–∑–¥–∞–Ω")
    
    def validate(self) -> ValidationResult:
        """
        –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        Returns:
            ValidationResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        errors = []
        warnings = []
        info = {}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        system_check = self._check_system()
        info['system'] = system_check
        if not system_check['os_supported']:
            errors.append(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: {system_check['os']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
        cpu_check = self._check_cpu()
        info['cpu'] = cpu_check
        if cpu_check['available_percent'] < self.min_cpu_percent:
            warnings.append(
                f"–ú–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ CPU: {cpu_check['available_percent']:.1f}% "
                f"(–º–∏–Ω–∏–º—É–º {self.min_cpu_percent}%)"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        memory_check = self._check_memory()
        info['memory'] = memory_check
        if memory_check['available_mb'] < self.min_memory_mb:
            errors.append(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏: {memory_check['available_mb']:.0f} MB "
                f"(–º–∏–Ω–∏–º—É–º {self.min_memory_mb} MB)"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞
        disk_check = self._check_disk()
        info['disk'] = disk_check
        if disk_check['free_gb'] < self.min_disk_gb:
            warnings.append(
                f"–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: {disk_check['free_gb']:.1f} GB "
                f"(–º–∏–Ω–∏–º—É–º {self.min_disk_gb} GB)"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        network_check = self._check_network()
        info['network'] = network_check
        
        is_valid = len(errors) == 0
        
        if is_valid:
            logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–∞")
        else:
            logger.error(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: {len(errors)} –æ—à–∏–±–æ–∫")
        
        return ValidationResult(
            is_valid=is_valid,
            errors=errors,
            warnings=warnings,
            info=info
        )
    
    def _check_system(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        os_name = platform.system()
        
        return {
            'os': os_name,
            'os_version': platform.version(),
            'architecture': platform.machine(),
            'python_version': platform.python_version(),
            'os_supported': os_name in ['Windows', 'Linux', 'Darwin']
        }
    
    def _check_cpu(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ CPU"""
        if not PSUTIL_AVAILABLE:
            return {
                'count': 4,
                'used_percent': 20.0,
                'available_percent': 80.0,
                'per_cpu': [20.0, 20.0, 20.0, 20.0]
            }
        
        cpu_percent = psutil.cpu_percent(interval=1)
        cpu_count = psutil.cpu_count()
        
        return {
            'count': cpu_count,
            'used_percent': cpu_percent,
            'available_percent': 100 - cpu_percent,
            'per_cpu': psutil.cpu_percent(interval=1, percpu=True)
        }
    
    def _check_memory(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏"""
        if not PSUTIL_AVAILABLE:
            return {
                'total_mb': 8192,
                'available_mb': 4096,
                'used_mb': 4096,
                'percent': 50.0
            }
        
        memory = psutil.virtual_memory()
        
        return {
            'total_mb': memory.total / (1024 * 1024),
            'available_mb': memory.available / (1024 * 1024),
            'used_mb': memory.used / (1024 * 1024),
            'percent': memory.percent
        }
    
    def _check_disk(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞"""
        if not PSUTIL_AVAILABLE:
            return {
                'total_gb': 256,
                'used_gb': 128,
                'free_gb': 128,
                'percent': 50.0
            }
        
        disk = psutil.disk_usage('/')
        
        return {
            'total_gb': disk.total / (1024 ** 3),
            'used_gb': disk.used / (1024 ** 3),
            'free_gb': disk.free / (1024 ** 3),
            'percent': disk.percent
        }
    
    def _check_network(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏"""
        if not PSUTIL_AVAILABLE:
            return {
                'bytes_sent': 0,
                'bytes_recv': 0,
                'available': True
            }
        
        try:
            net_io = psutil.net_io_counters()
            
            return {
                'bytes_sent': net_io.bytes_sent,
                'bytes_recv': net_io.bytes_recv,
                'available': True
            }
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç—å: {e}")
            return {'available': False}
    
    def check_resources(self) -> bool:
        """
        –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        
        Returns:
            bool: True –µ—Å–ª–∏ —Ä–µ—Å—É—Ä—Å—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã
        """
        result = self.validate()
        return result.is_valid


# –¢–µ—Å—Ç—ã
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    validator = ExecutionContextValidator()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    result = validator.validate()
    
    print("\n" + "="*60)
    print("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò –ö–û–ù–¢–ï–ö–°–¢–ê")
    print("="*60)
    print(f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í–ê–õ–ò–î–ù–û' if result.is_valid else '‚ùå –ù–ï–í–ê–õ–ò–î–ù–û'}")
    
    if result.errors:
        print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(result.errors)}):")
        for error in result.errors:
            print(f"  ‚Ä¢ {error}")
    
    if result.warnings:
        print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(result.warnings)}):")
        for warning in result.warnings:
            print(f"  ‚Ä¢ {warning}")
    
    print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
    print(f"  –û–°: {result.info['system']['os']} {result.info['system']['os_version']}")
    print(f"  CPU: {result.info['cpu']['count']} —è–¥–µ—Ä, –¥–æ—Å—Ç—É–ø–Ω–æ {result.info['cpu']['available_percent']:.1f}%")
    print(f"  RAM: {result.info['memory']['available_mb']:.0f} MB –¥–æ—Å—Ç—É–ø–Ω–æ")
    print(f"  –î–∏—Å–∫: {result.info['disk']['free_gb']:.1f} GB —Å–≤–æ–±–æ–¥–Ω–æ")
    print("="*60)
