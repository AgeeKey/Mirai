#!/usr/bin/env python3
"""
üìã Action Queue - –û—á–µ—Ä–µ–¥—å –¥–µ–π—Å—Ç–≤–∏–π
–®–∞–≥ 3 –∏–∑ 150: Initialize Action Queue

FIFO queue –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
"""

import asyncio
import logging
from typing import Optional, List
from queue import Queue, Empty
from datetime import datetime
from .action_executor import Action, ActionStatus

logger = logging.getLogger(__name__)


class ActionQueue:
    """
    –û—á–µ—Ä–µ–¥—å –¥–µ–π—Å—Ç–≤–∏–π FIFO
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ—á–µ—Ä–µ–¥—å
    - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é
    """
    
    def __init__(self, max_size: int = 1000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏
        
        Args:
            max_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
        """
        self.queue: Queue = Queue(maxsize=max_size)
        self.max_size = max_size
        self.total_enqueued = 0
        self.total_dequeued = 0
        self.priority_queue: List[Action] = []
        
        logger.info(f"üìã ActionQueue —Å–æ–∑–¥–∞–Ω–∞ (max_size={max_size})")
    
    def enqueue(self, action: Action, priority: bool = False) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
        
        Args:
            action: –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            priority: –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if priority:
                self.priority_queue.insert(0, action)
                logger.info(f"‚≠ê –î–µ–π—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: {action.description}")
            else:
                self.queue.put_nowait(action)
                logger.debug(f"‚ûï –î–µ–π—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {action.description}")
            
            self.total_enqueued += 1
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return False
    
    def dequeue(self, timeout: float = 1.0) -> Optional[Action]:
        """
        –ò–∑–≤–ª–µ—á—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
            
        Returns:
            Action –∏–ª–∏ None
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å
            if self.priority_queue:
                action = self.priority_queue.pop(0)
                self.total_dequeued += 1
                logger.debug(f"‚≠ê –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action.description}")
                return action
            
            # –ó–∞—Ç–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å
            action = self.queue.get(timeout=timeout)
            self.total_dequeued += 1
            logger.debug(f"‚ûñ –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {action.description}")
            return action
            
        except Empty:
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return None
    
    def peek(self) -> Optional[Action]:
        """
        –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        
        Returns:
            Action –∏–ª–∏ None
        """
        if self.priority_queue:
            return self.priority_queue[0]
        
        if not self.queue.empty():
            # Peek –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ Queue
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ dequeue
            return None
        
        return None
    
    def size(self) -> int:
        """–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏"""
        return self.queue.qsize() + len(self.priority_queue)
    
    def is_empty(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É"""
        return self.queue.empty() and len(self.priority_queue) == 0
    
    def is_full(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å"""
        return self.queue.full()
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å"""
        while not self.queue.empty():
            try:
                self.queue.get_nowait()
            except Empty:
                break
        
        self.priority_queue.clear()
        logger.info("üóëÔ∏è –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞")
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏"""
        return {
            'current_size': self.size(),
            'priority_size': len(self.priority_queue),
            'regular_size': self.queue.qsize(),
            'max_size': self.max_size,
            'total_enqueued': self.total_enqueued,
            'total_dequeued': self.total_dequeued,
            'is_empty': self.is_empty(),
            'is_full': self.is_full()
        }


# –¢–µ—Å—Ç—ã
if __name__ == "__main__":
    from .action_executor import ActionType
    
    # –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    queue = ActionQueue(max_size=10)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    action1 = Action(
        id="1",
        type=ActionType.MOUSE_CLICK,
        parameters={},
        description="–î–µ–π—Å—Ç–≤–∏–µ 1"
    )
    
    action2 = Action(
        id="2",
        type=ActionType.KEYBOARD_TYPE,
        parameters={},
        description="–î–µ–π—Å—Ç–≤–∏–µ 2 (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)"
    )
    
    action3 = Action(
        id="3",
        type=ActionType.WINDOW_FOCUS,
        parameters={},
        description="–î–µ–π—Å—Ç–≤–∏–µ 3"
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º
    queue.enqueue(action1)
    queue.enqueue(action3)
    queue.enqueue(action2, priority=True)  # –î–æ–±–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    
    print("\n" + "="*60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ß–ï–†–ï–î–ò")
    print("="*60)
    stats = queue.get_stats()
    for key, value in stats.items():
        print(f"{key}: {value}")
    
    print("\n" + "="*60)
    print("üìã –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ò–ó –û–ß–ï–†–ï–î–ò")
    print("="*60)
    while not queue.is_empty():
        action = queue.dequeue()
        if action:
            print(f"‚úì {action.description}")
    
    print("\n‚úÖ –¢–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
