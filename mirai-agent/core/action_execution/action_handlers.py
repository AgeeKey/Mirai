#!/usr/bin/env python3
"""
üéØ Action Handlers Registry - –†–µ–µ—Å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
–®–∞–≥ 5 –∏–∑ 150: Register Action Handlers

Dispatch mechanism –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
"""

import logging
from typing import Dict, Callable, Any, Optional
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class HandlerInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ"""
    name: str
    handler: Callable
    description: str
    action_types: list


class ActionHandlerRegistry:
    """
    –†–µ–µ—Å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ action
    - Dispatch actions –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É handler
    - –í–∞–ª–∏–¥–∞—Ü–∏—è handlers
    """
    
    def __init__(self):
        self.handlers: Dict[str, HandlerInfo] = {}
        self.type_to_handler: Dict[str, str] = {}
        self._register_default_handlers()
        logger.info("üéØ ActionHandlerRegistry —Å–æ–∑–¥–∞–Ω")
    
    def register_handler(
        self,
        name: str,
        handler: Callable,
        action_types: list,
        description: str = ""
    ) -> bool:
        """
        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        
        Args:
            name: –ò–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            handler: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            action_types: –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
            description: –û–ø–∏—Å–∞–Ω–∏–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º HandlerInfo
            handler_info = HandlerInfo(
                name=name,
                handler=handler,
                description=description or f"Handler for {name}",
                action_types=action_types
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä
            self.handlers[name] = handler_info
            
            # –°–≤—è–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
            for action_type in action_types:
                self.type_to_handler[action_type] = name
            
            logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω handler: {name} –¥–ª—è {action_types}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ handler: {e}")
            return False
    
    def get_handler(self, action_type: str) -> Optional[Callable]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
        
        Args:
            action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            
        Returns:
            Callable handler –∏–ª–∏ None
        """
        handler_name = self.type_to_handler.get(action_type)
        if not handler_name:
            logger.warning(f"‚ö†Ô∏è Handler –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–∏–ø–∞: {action_type}")
            return None
        
        handler_info = self.handlers.get(handler_name)
        if not handler_info:
            logger.error(f"‚ùå HandlerInfo –Ω–µ –Ω–∞–π–¥–µ–Ω: {handler_name}")
            return None
        
        return handler_info.handler
    
    def dispatch(self, action_type: str, **kwargs) -> Any:
        """
        –î–∏—Å–ø–∞—Ç—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        
        Args:
            action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–π—Å—Ç–≤–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è handler
        """
        handler = self.get_handler(action_type)
        if not handler:
            raise ValueError(f"–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞: {action_type}")
        
        try:
            logger.debug(f"üéØ –î–∏—Å–ø–∞—Ç—á {action_type} -> {handler.__name__}")
            result = handler(**kwargs)
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è handler: {e}")
            raise
    
    def _register_default_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # Mouse handlers
        def handle_mouse_click(**kwargs):
            logger.info(f"üñ±Ô∏è Mouse click: {kwargs}")
            return {'success': True, 'action': 'mouse_click'}
        
        def handle_mouse_drag(**kwargs):
            logger.info(f"üñ±Ô∏è Mouse drag: {kwargs}")
            return {'success': True, 'action': 'mouse_drag'}
        
        def handle_mouse_scroll(**kwargs):
            logger.info(f"üñ±Ô∏è Mouse scroll: {kwargs}")
            return {'success': True, 'action': 'mouse_scroll'}
        
        # Keyboard handlers
        def handle_keyboard_type(**kwargs):
            logger.info(f"‚å®Ô∏è Keyboard type: {kwargs}")
            return {'success': True, 'action': 'keyboard_type'}
        
        def handle_keyboard_shortcut(**kwargs):
            logger.info(f"‚å®Ô∏è Keyboard shortcut: {kwargs}")
            return {'success': True, 'action': 'keyboard_shortcut'}
        
        # Window handlers
        def handle_window_focus(**kwargs):
            logger.info(f"ü™ü Window focus: {kwargs}")
            return {'success': True, 'action': 'window_focus'}
        
        def handle_window_maximize(**kwargs):
            logger.info(f"ü™ü Window maximize: {kwargs}")
            return {'success': True, 'action': 'window_maximize'}
        
        # Application handlers
        def handle_application_open(**kwargs):
            logger.info(f"üì± Application open: {kwargs}")
            return {'success': True, 'action': 'application_open'}
        
        def handle_application_close(**kwargs):
            logger.info(f"üì± Application close: {kwargs}")
            return {'success': True, 'action': 'application_close'}
        
        # Browser handlers
        def handle_browser_navigate(**kwargs):
            logger.info(f"üåê Browser navigate: {kwargs}")
            return {'success': True, 'action': 'browser_navigate'}
        
        # File handlers
        def handle_file_open(**kwargs):
            logger.info(f"üìÅ File open: {kwargs}")
            return {'success': True, 'action': 'file_open'}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ handlers
        self.register_handler('mouse_handler', handle_mouse_click, ['mouse_click'])
        self.register_handler('mouse_drag_handler', handle_mouse_drag, ['mouse_drag'])
        self.register_handler('mouse_scroll_handler', handle_mouse_scroll, ['mouse_scroll'])
        self.register_handler('keyboard_handler', handle_keyboard_type, ['keyboard_type'])
        self.register_handler('shortcut_handler', handle_keyboard_shortcut, ['keyboard_shortcut'])
        self.register_handler('window_focus_handler', handle_window_focus, ['window_focus'])
        self.register_handler('window_maximize_handler', handle_window_maximize, ['window_maximize'])
        self.register_handler('app_open_handler', handle_application_open, ['application_open'])
        self.register_handler('app_close_handler', handle_application_close, ['application_close'])
        self.register_handler('browser_handler', handle_browser_navigate, ['browser_navigate'])
        self.register_handler('file_handler', handle_file_open, ['file_open'])
    
    def list_handlers(self) -> list:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö handlers"""
        return [
            {
                'name': info.name,
                'types': info.action_types,
                'description': info.description
            }
            for info in self.handlers.values()
        ]
    
    def get_stats(self) -> dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞"""
        return {
            'total_handlers': len(self.handlers),
            'total_action_types': len(self.type_to_handler),
            'handlers': self.list_handlers()
        }


# –¢–µ—Å—Ç—ã
if __name__ == "__main__":
    registry = ActionHandlerRegistry()
    
    print("\n" + "="*60)
    print("üéØ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–ï HANDLERS")
    print("="*60)
    
    stats = registry.get_stats()
    print(f"–í—Å–µ–≥–æ handlers: {stats['total_handlers']}")
    print(f"–¢–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_action_types']}")
    
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ò–°–ü–ê–¢–ß–ê")
    print("="*60)
    
    # –¢–µ—Å—Ç 1: Mouse click
    result1 = registry.dispatch('mouse_click', x=100, y=200)
    print(f"‚úì Mouse click: {result1}")
    
    # –¢–µ—Å—Ç 2: Keyboard type
    result2 = registry.dispatch('keyboard_type', text='Hello')
    print(f"‚úì Keyboard type: {result2}")
    
    # –¢–µ—Å—Ç 3: Window focus
    result3 = registry.dispatch('window_focus', window_title='Chrome')
    print(f"‚úì Window focus: {result3}")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
