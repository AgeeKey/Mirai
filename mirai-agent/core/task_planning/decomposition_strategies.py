#!/usr/bin/env python3
"""
üîÑ –ü–û–î–†–ê–ó–î–ï–õ 1.2: DECOMPOSITION STRATEGIES (–®–∞–≥–∏ 16-30)
=======================================================

–†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏:
- –õ–∏–Ω–µ–π–Ω–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ
- –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ
- –ú–æ–¥—É–ª—å–Ω–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ
- –ò –¥—Ä—É–≥–∏–µ –ø–æ–¥—Ö–æ–¥—ã
"""

import logging
from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from typing import Any, Dict, List, Optional, Tuple

from .task_decomposition import ParsedTask, Subtask, TaskType, ComplexityLevel

logger = logging.getLogger(__name__)


# ============================================================================
# –ë–ê–ó–û–í–´–ô –ò–ù–¢–ï–†–§–ï–ô–°
# ============================================================================

class DecompositionStrategy(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è"""
    
    @abstractmethod
    def decompose(self, task: ParsedTask) -> List[Dict[str, Any]]:
        """
        –†–∞–∑–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        
        Args:
            task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–¥–∑–∞–¥–∞—á –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π
        """
        pass
    
    @abstractmethod
    def get_strategy_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        pass


# ============================================================================
# –°–¢–†–ê–¢–ï–ì–ò–ò –†–ê–ó–õ–û–ñ–ï–ù–ò–Ø
# ============================================================================

class LinearDecomposer(DecompositionStrategy):
    """
    –®–∞–≥ 16: Linear Decomposition
    
    –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏: A ‚Üí B ‚Üí C ‚Üí D
    –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ª—É—á–∞–π –¥–ª—è –ª–∏–Ω–µ–π–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
    """
    
    def decompose(self, task: ParsedTask) -> List[Dict[str, Any]]:
        """
        –õ–∏–Ω–µ–π–Ω–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        
        Args:
            task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤
        """
        logger.info(f"–®–∞–≥ 16: –õ–∏–Ω–µ–π–Ω–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{task.goal}'")
        
        steps = []
        
        # –ë–∞–∑–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ª—é–±–æ–π –∑–∞–¥–∞—á–∏
        base_steps = [
            {
                'id': f'{task.fingerprint}_0',
                'name': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
                'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ —Ä–µ—Å—É—Ä—Å—ã',
                'type': 'preparation'
            },
            {
                'id': f'{task.fingerprint}_1',
                'name': '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ',
                'description': f'–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {task.goal}',
                'type': 'execution',
                'depends_on': [f'{task.fingerprint}_0']
            },
            {
                'id': f'{task.fingerprint}_2',
                'name': '–ü—Ä–æ–≤–µ—Ä–∫–∞',
                'description': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                'type': 'validation',
                'depends_on': [f'{task.fingerprint}_1']
            },
            {
                'id': f'{task.fingerprint}_3',
                'name': '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ',
                'description': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã',
                'type': 'cleanup',
                'depends_on': [f'{task.fingerprint}_2']
            }
        ]
        
        return base_steps
    
    def get_strategy_name(self) -> str:
        return "Linear (–õ–∏–Ω–µ–π–Ω–æ–µ)"


class HierarchicalDecomposer(DecompositionStrategy):
    """
    –®–∞–≥ 17: Hierarchical Decomposition
    
    –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –≤ –∏–µ—Ä–∞—Ä—Ö–∏—é (–¥–µ—Ä–µ–≤–æ): Top-level ‚Üí Mid-level ‚Üí Leaf tasks
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö.
    """
    
    def decompose(self, task: ParsedTask) -> List[Dict[str, Any]]:
        """
        –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        
        Args:
            task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            
        Returns:
            –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        """
        logger.info(f"–®–∞–≥ 17: –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{task.goal}'")
        
        # –°–æ–∑–¥–∞–µ–º 3-—É—Ä–æ–≤–Ω–µ–≤—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é
        hierarchy = []
        
        # –£—Ä–æ–≤–µ–Ω—å 1: –ì–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ —Ñ–∞–∑—ã
        phases = ['–ê–Ω–∞–ª–∏–∑', '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è', '–ü—Ä–æ–≤–µ—Ä–∫–∞']
        
        for phase_idx, phase in enumerate(phases):
            phase_id = f'{task.fingerprint}_phase_{phase_idx}'
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∑—É
            hierarchy.append({
                'id': phase_id,
                'name': phase,
                'description': f'–§–∞–∑–∞ {phase} –¥–ª—è –∑–∞–¥–∞—á–∏ {task.goal}',
                'type': 'phase',
                'level': 1,
                'parent': None,
                'children': []
            })
            
            # –£—Ä–æ–≤–µ–Ω—å 2: –ö–∞–∂–¥–∞—è —Ñ–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏
            for subtask_idx in range(2):  # 2 –ø–æ–¥–∑–∞–¥–∞—á–∏ –Ω–∞ —Ñ–∞–∑—É
                subtask_id = f'{phase_id}_sub_{subtask_idx}'
                
                hierarchy.append({
                    'id': subtask_id,
                    'name': f'{phase} - –ü–æ–¥–∑–∞–¥–∞—á–∞ {subtask_idx + 1}',
                    'description': f'–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É {subtask_idx + 1} —Ñ–∞–∑—ã {phase}',
                    'type': 'subtask',
                    'level': 2,
                    'parent': phase_id,
                    'depends_on': [f'{phase_id}_sub_{subtask_idx - 1}'] if subtask_idx > 0 else []
                })
        
        return hierarchy
    
    def get_strategy_name(self) -> str:
        return "Hierarchical (–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ)"


class ModularDecomposer(DecompositionStrategy):
    """
    –®–∞–≥ 18: Modular Decomposition
    
    –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –º–æ–¥—É–ª–∏ - –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –Ω–µ–∑–∞–≤–∏—Å–∏–º –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º.
    –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–∞–¥–∞—á —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –±–ª–æ–∫–∞–º–∏.
    """
    
    def decompose(self, task: ParsedTask) -> List[Dict[str, Any]]:
        """
        –ú–æ–¥—É–ª—å–Ω–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        
        Args:
            task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
        """
        logger.info(f"–®–∞–≥ 18: –ú–æ–¥—É–ª—å–Ω–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{task.goal}'")
        
        modules = []
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á
        module_types = {
            'input': '–ú–æ–¥—É–ª—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö',
            'processing': '–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏',
            'validation': '–ú–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
            'output': '–ú–æ–¥—É–ª—å –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
        }
        
        for idx, (mod_type, description) in enumerate(module_types.items()):
            modules.append({
                'id': f'{task.fingerprint}_module_{mod_type}',
                'name': f'–ú–æ–¥—É–ª—å: {mod_type}',
                'description': description,
                'type': 'module',
                'module_type': mod_type,
                'reusable': True,
                'depends_on': []  # –ú–æ–¥—É–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã
            })
        
        return modules
    
    def get_strategy_name(self) -> str:
        return "Modular (–ú–æ–¥—É–ª—å–Ω–æ–µ)"


class ProblemSolvingDecomposer(DecompositionStrategy):
    """
    –®–∞–≥ 19: Problem-Solving Decomposition
    
    –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:
    Define ‚Üí Analyze ‚Üí Solve ‚Üí Verify
    """
    
    def decompose(self, task: ParsedTask) -> List[Dict[str, Any]]:
        """
        –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        
        Args:
            task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
        """
        logger.info(f"–®–∞–≥ 19: Problem-Solving —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{task.goal}'")
        
        steps = [
            {
                'id': f'{task.fingerprint}_define',
                'name': '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
                'description': '–ß–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å',
                'type': 'define',
                'phase': 'definition'
            },
            {
                'id': f'{task.fingerprint}_analyze',
                'name': '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã',
                'description': '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç',
                'type': 'analyze',
                'phase': 'analysis',
                'depends_on': [f'{task.fingerprint}_define']
            },
            {
                'id': f'{task.fingerprint}_solve',
                'name': '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
                'description': f'–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ: {task.goal}',
                'type': 'solve',
                'phase': 'solution',
                'depends_on': [f'{task.fingerprint}_analyze']
            },
            {
                'id': f'{task.fingerprint}_verify',
                'name': '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è',
                'description': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞',
                'type': 'verify',
                'phase': 'verification',
                'depends_on': [f'{task.fingerprint}_solve']
            }
        ]
        
        return steps
    
    def get_strategy_name(self) -> str:
        return "Problem-Solving (–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º)"


class StateBasedDecomposer(DecompositionStrategy):
    """
    –®–∞–≥ 20: State-Based Decomposition
    
    –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏:
    State1 ‚Üí Action ‚Üí State2 ‚Üí Action ‚Üí State3
    """
    
    def decompose(self, task: ParsedTask) -> List[Dict[str, Any]]:
        """
        –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        Args:
            task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        """
        logger.info(f"–®–∞–≥ 20: State-Based —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{task.goal}'")
        
        states = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã
        state_transitions = [
            ('initial', '–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', None),
            ('prepared', '–°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏', 'initial'),
            ('executing', '–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', 'prepared'),
            ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', 'executing')
        ]
        
        for state_name, description, from_state in state_transitions:
            state_id = f'{task.fingerprint}_state_{state_name}'
            
            step = {
                'id': state_id,
                'name': f'–ü–µ—Ä–µ—Ö–æ–¥ –≤ {state_name}',
                'description': description,
                'type': 'state_transition',
                'state': state_name,
                'depends_on': [f'{task.fingerprint}_state_{from_state}'] if from_state else []
            }
            
            states.append(step)
        
        return states
    
    def get_strategy_name(self) -> str:
        return "State-Based (–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π)"


class GoalBasedDecomposer(DecompositionStrategy):
    """
    –®–∞–≥ 21: Goal-Based Decomposition
    
    –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø–æ–¥—Ü–µ–ª—è–º (means-ends analysis):
    –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Üí –ø–æ–¥—Ü–µ–ª–∏ ‚Üí –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    
    def decompose(self, task: ParsedTask) -> List[Dict[str, Any]]:
        """
        –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ü–µ–ª–∏
        
        Args:
            task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            
        Returns:
            –ò–µ—Ä–∞—Ä—Ö–∏—è —Ü–µ–ª–µ–π –∏ –ø–æ–¥—Ü–µ–ª–µ–π
        """
        logger.info(f"–®–∞–≥ 21: Goal-Based —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{task.goal}'")
        
        goals = []
        
        # –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å
        main_goal_id = f'{task.fingerprint}_goal_main'
        goals.append({
            'id': main_goal_id,
            'name': '–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å',
            'description': task.goal,
            'type': 'main_goal',
            'level': 0
        })
        
        # –ü–æ–¥—Ü–µ–ª–∏
        subgoals = [
            '–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
            '–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É',
            '–î–æ—Å—Ç–∏—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
        ]
        
        for idx, subgoal in enumerate(subgoals):
            subgoal_id = f'{task.fingerprint}_goal_sub_{idx}'
            goals.append({
                'id': subgoal_id,
                'name': f'–ü–æ–¥—Ü–µ–ª—å {idx + 1}',
                'description': subgoal,
                'type': 'subgoal',
                'level': 1,
                'parent_goal': main_goal_id,
                'depends_on': [f'{task.fingerprint}_goal_sub_{idx - 1}'] if idx > 0 else []
            })
        
        return goals
    
    def get_strategy_name(self) -> str:
        return "Goal-Based (–ù–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π)"


class DataFlowDecomposer(DecompositionStrategy):
    """
    –®–∞–≥ 23: Data-Flow Decomposition
    
    –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø–æ—Ç–æ–∫–∞–º –¥–∞–Ω–Ω—ã—Ö:
    –û—Ç–∫—É–¥–∞ –¥–∞–Ω–Ω—ã–µ ‚Üí –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –∫—É–¥–∞ –≤—ã—Ö–æ–¥—è—Ç
    """
    
    def decompose(self, task: ParsedTask) -> List[Dict[str, Any]]:
        """
        –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ—Ç–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        """
        logger.info(f"–®–∞–≥ 23: Data-Flow —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{task.goal}'")
        
        flow_steps = [
            {
                'id': f'{task.fingerprint}_data_input',
                'name': '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
                'description': '–ü–æ–ª—É—á–∏—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                'type': 'data_input',
                'data_flow': 'input'
            },
            {
                'id': f'{task.fingerprint}_data_transform',
                'name': '–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö',
                'description': '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç',
                'type': 'data_transform',
                'data_flow': 'transform',
                'depends_on': [f'{task.fingerprint}_data_input']
            },
            {
                'id': f'{task.fingerprint}_data_process',
                'name': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
                'description': f'–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {task.goal}',
                'type': 'data_process',
                'data_flow': 'process',
                'depends_on': [f'{task.fingerprint}_data_transform']
            },
            {
                'id': f'{task.fingerprint}_data_output',
                'name': '–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞',
                'description': '–í—ã–≤–µ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                'type': 'data_output',
                'data_flow': 'output',
                'depends_on': [f'{task.fingerprint}_data_process']
            }
        ]
        
        return flow_steps
    
    def get_strategy_name(self) -> str:
        return "Data-Flow (–ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö)"


class DomainSpecificDecomposer(DecompositionStrategy):
    """
    –®–∞–≥ 24: Domain-Specific Decomposition
    
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞ (Chrome, CapCut, etc.) —Å–≤–æ–π —Å–ø–æ—Å–æ–± —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è.
    """
    
    def __init__(self):
        self.domain_templates = {
            'chrome': self._chrome_decomposition,
            'browser': self._chrome_decomposition,
            'vscode': self._vscode_decomposition,
            'editor': self._vscode_decomposition,
            'file': self._file_decomposition,
            'api': self._api_decomposition,
        }
    
    def decompose(self, task: ParsedTask) -> List[Dict[str, Any]]:
        """
        Domain-specific —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ
        
        Args:
            task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            
        Returns:
            –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –¥–æ–º–µ–Ω–∞ —à–∞–≥–∏
        """
        logger.info(f"–®–∞–≥ 24: Domain-Specific —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{task.goal}'")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
        domain = self._identify_domain(task)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω
        decomposition_func = self.domain_templates.get(
            domain,
            self._default_decomposition
        )
        
        return decomposition_func(task)
    
    def _identify_domain(self, task: ParsedTask) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–º–µ–Ω –∑–∞–¥–∞—á–∏"""
        text_lower = task.raw_text.lower()
        
        if any(word in text_lower for word in ['–±—Ä–∞—É–∑–µ—Ä', 'chrome', 'browser', '—Å–∞–π—Ç']):
            return 'chrome'
        elif any(word in text_lower for word in ['–∫–æ–¥', 'code', 'vscode']):
            return 'vscode'
        elif any(word in text_lower for word in ['—Ñ–∞–π–ª', 'file']):
            return 'file'
        elif any(word in text_lower for word in ['api', '–∑–∞–ø—Ä–æ—Å', 'request']):
            return 'api'
        
        return 'unknown'
    
    def _chrome_decomposition(self, task: ParsedTask) -> List[Dict]:
        """–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–æ–º"""
        return [
            {'id': f'{task.fingerprint}_chrome_0', 'name': '–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞', 
             'description': '–û—Ç–∫—Ä—ã—Ç—å Chrome —Å –Ω—É–∂–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º'},
            {'id': f'{task.fingerprint}_chrome_1', 'name': '–ù–∞–≤–∏–≥–∞—Ü–∏—è', 
             'description': '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',
             'depends_on': [f'{task.fingerprint}_chrome_0']},
            {'id': f'{task.fingerprint}_chrome_2', 'name': '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ', 
             'description': f'–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ: {task.goal}',
             'depends_on': [f'{task.fingerprint}_chrome_1']},
            {'id': f'{task.fingerprint}_chrome_3', 'name': '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞', 
             'description': '–ò–∑–≤–ª–µ—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
             'depends_on': [f'{task.fingerprint}_chrome_2']},
        ]
    
    def _vscode_decomposition(self, task: ParsedTask) -> List[Dict]:
        """–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –∫–æ–¥–∞"""
        return [
            {'id': f'{task.fingerprint}_vscode_0', 'name': '–û—Ç–∫—Ä—ã—Ç—å VSCode', 
             'description': '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä'},
            {'id': f'{task.fingerprint}_vscode_1', 'name': '–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª', 
             'description': '–û—Ç–∫—Ä—ã—Ç—å –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª',
             'depends_on': [f'{task.fingerprint}_vscode_0']},
            {'id': f'{task.fingerprint}_vscode_2', 'name': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 
             'description': f'–í—ã–ø–æ–ª–Ω–∏—Ç—å: {task.goal}',
             'depends_on': [f'{task.fingerprint}_vscode_1']},
            {'id': f'{task.fingerprint}_vscode_3', 'name': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', 
             'description': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
             'depends_on': [f'{task.fingerprint}_vscode_2']},
        ]
    
    def _file_decomposition(self, task: ParsedTask) -> List[Dict]:
        """–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""
        return [
            {'id': f'{task.fingerprint}_file_0', 'name': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è', 
             'description': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'},
            {'id': f'{task.fingerprint}_file_1', 'name': '–ß—Ç–µ–Ω–∏–µ/–ó–∞–ø–∏—Å—å', 
             'description': f'–í—ã–ø–æ–ª–Ω–∏—Ç—å: {task.goal}',
             'depends_on': [f'{task.fingerprint}_file_0']},
            {'id': f'{task.fingerprint}_file_2', 'name': '–í–∞–ª–∏–¥–∞—Ü–∏—è', 
             'description': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏',
             'depends_on': [f'{task.fingerprint}_file_1']},
        ]
    
    def _api_decomposition(self, task: ParsedTask) -> List[Dict]:
        """–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API"""
        return [
            {'id': f'{task.fingerprint}_api_0', 'name': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞', 
             'description': '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞'},
            {'id': f'{task.fingerprint}_api_1', 'name': '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞', 
             'description': '–í—ã–ø–æ–ª–Ω–∏—Ç—å API –∑–∞–ø—Ä–æ—Å',
             'depends_on': [f'{task.fingerprint}_api_0']},
            {'id': f'{task.fingerprint}_api_2', 'name': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞', 
             'description': '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
             'depends_on': [f'{task.fingerprint}_api_1']},
            {'id': f'{task.fingerprint}_api_3', 'name': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫', 
             'description': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏',
             'depends_on': [f'{task.fingerprint}_api_2']},
        ]
    
    def _default_decomposition(self, task: ParsedTask) -> List[Dict]:
        """–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return [
            {'id': f'{task.fingerprint}_default_0', 'name': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞'},
            {'id': f'{task.fingerprint}_default_1', 'name': '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ',
             'depends_on': [f'{task.fingerprint}_default_0']},
            {'id': f'{task.fingerprint}_default_2', 'name': '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ',
             'depends_on': [f'{task.fingerprint}_default_1']},
        ]
    
    def get_strategy_name(self) -> str:
        return "Domain-Specific (–ü–æ –¥–æ–º–µ–Ω—É)"


class AdaptiveDecomposer(DecompositionStrategy):
    """
    –®–∞–≥ 28: Adaptive Decomposition
    
    –í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏.
    """
    
    def __init__(self):
        self.strategies = {
            ComplexityLevel.SIMPLE: LinearDecomposer(),
            ComplexityLevel.MEDIUM: ModularDecomposer(),
            ComplexityLevel.COMPLEX: HierarchicalDecomposer(),
            ComplexityLevel.VERY_COMPLEX: GoalBasedDecomposer(),
        }
        
        self.type_strategies = {
            TaskType.SEARCH: DataFlowDecomposer(),
            TaskType.ANALYZE: ProblemSolvingDecomposer(),
            TaskType.EXECUTE: StateBasedDecomposer(),
        }
    
    def decompose(self, task: ParsedTask) -> List[Dict[str, Any]]:
        """
        –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ - –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        logger.info(f"–®–∞–≥ 28: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ '{task.goal}'")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
        if task.task_type in self.type_strategies:
            strategy = self.type_strategies[task.task_type]
            logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ —Ç–∏–ø—É: {strategy.get_strategy_name()}")
        # –ò–Ω–∞—á–µ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        else:
            strategy = self.strategies.get(
                task.complexity,
                LinearDecomposer()
            )
            logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {strategy.get_strategy_name()}")
        
        return strategy.decompose(task)
    
    def get_strategy_name(self) -> str:
        return "Adaptive (–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ)"


class DecompositionValidator:
    """
    –®–∞–≥ 29: Decomposition Validation
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ:
    - –ü–æ–ª–Ω–æ—Ç–∞
    - –ù–µ–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ—Å—Ç—å
    - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    """
    
    def validate(
        self,
        decomposition: List[Dict[str, Any]],
        original_task: ParsedTask
    ) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        
        Args:
            decomposition: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è
            original_task: –ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        logger.info("–®–∞–≥ 29: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
        
        result = {
            'valid': True,
            'issues': [],
            'warnings': [],
            'completeness': True,
            'consistency': True,
            'efficiency': 1.0
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã
        if len(decomposition) == 0:
            result['valid'] = False
            result['completeness'] = False
            result['issues'].append("–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
            return result
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–Ω–µ—Ç —Ü–∏–∫–ª–æ–≤)
        if self._has_dependency_cycle(decomposition):
            result['valid'] = False
            result['consistency'] = False
            result['issues'].append("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–∏–∫–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        all_ids = {step.get('id') for step in decomposition if 'id' in step}
        for step in decomposition:
            for dep in step.get('depends_on', []):
                if dep not in all_ids:
                    result['warnings'].append(
                        f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å '{dep}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–∏"
                    )
        
        # –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º–µ–Ω—å—à–µ —à–∞–≥–æ–≤ = –ª—É—á—à–µ)
        step_count = len(decomposition)
        if step_count > 20:
            result['efficiency'] = 0.5
            result['warnings'].append("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —à–∞–≥–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å")
        elif step_count > 10:
            result['efficiency'] = 0.7
        else:
            result['efficiency'] = 1.0
        
        return result
    
    def _has_dependency_cycle(self, decomposition: List[Dict]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ü–∏–∫–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö"""
        graph = {}
        for step in decomposition:
            if 'id' in step:
                graph[step['id']] = step.get('depends_on', [])
        
        visited = set()
        rec_stack = set()
        
        def has_cycle_dfs(node):
            if node in rec_stack:
                return True
            if node in visited:
                return False
            
            visited.add(node)
            rec_stack.add(node)
            
            for neighbor in graph.get(node, []):
                if has_cycle_dfs(neighbor):
                    return True
            
            rec_stack.remove(node)
            return False
        
        for node in graph:
            if has_cycle_dfs(node):
                return True
        
        return False


class DecompositionOptimizer:
    """
    –®–∞–≥ 30: Decomposition Optimization
    
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ:
    - –ú–∏–Ω–∏–º—É–º —à–∞–≥–æ–≤
    - –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
    - –ú–∏–Ω–∏–º—É–º —Ä–∏—Å–∫–∞
    """
    
    def optimize(
        self,
        decomposition: List[Dict[str, Any]],
        optimization_goal: str = 'balanced'
    ) -> List[Dict[str, Any]]:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ
        
        Args:
            decomposition: –ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ
            optimization_goal: –¶–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ('speed', 'safety', 'balanced')
            
        Returns:
            –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ
        """
        logger.info(f"–®–∞–≥ 30: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è (—Ü–µ–ª—å: {optimization_goal})")
        
        optimized = decomposition.copy()
        
        if optimization_goal == 'speed':
            # –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
            optimized = self._merge_sequential_steps(optimized)
        elif optimization_goal == 'safety':
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
            optimized = self._add_safety_checks(optimized)
        else:  # balanced
            # –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
            optimized = self._balance_optimization(optimized)
        
        return optimized
    
    def _merge_sequential_steps(self, steps: List[Dict]) -> List[Dict]:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã–µ —à–∞–≥–∏"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        return steps
    
    def _add_safety_checks(self, steps: List[Dict]) -> List[Dict]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —à–∞–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        enhanced = []
        for step in steps:
            enhanced.append(step)
            # –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            if step.get('type') in ['execution', 'data_process']:
                check_step = {
                    'id': f"{step['id']}_safety_check",
                    'name': f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ {step.get('name', '—à–∞–≥–∞')}",
                    'description': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                    'type': 'safety_check',
                    'depends_on': [step['id']]
                }
                enhanced.append(check_step)
        return enhanced
    
    def _balance_optimization(self, steps: List[Dict]) -> List[Dict]:
        """–ë–∞–ª–∞–Ω—Å–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"""
        # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –æ–±–æ–∏—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
        return steps
