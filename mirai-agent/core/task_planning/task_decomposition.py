#!/usr/bin/env python3
"""
üìã –†–ê–ó–î–ï–õ 1: TASK DECOMPOSITION (–®–∞–≥–∏ 1-40)
==========================================

–ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã:
1.1: Task Analysis (–®–∞–≥–∏ 1-15) - –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏
1.2: Decomposition Strategies (–®–∞–≥–∏ 16-30) - –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è
1.3: Subtask Creation (–®–∞–≥–∏ 31-40) - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á
"""

import hashlib
import logging
import re
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Set

logger = logging.getLogger(__name__)


# ============================================================================
# –ë–ê–ó–û–í–´–ï –¢–ò–ü–´ –î–ê–ù–ù–´–•
# ============================================================================

class TaskType(Enum):
    """–®–∞–≥ 3: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
    SEARCH = "search"          # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    EDIT = "edit"              # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    ANALYZE = "analyze"        # –ê–Ω–∞–ª–∏–∑
    EXECUTE = "execute"        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    CREATE = "create"          # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–≥–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ
    DELETE = "delete"          # –£–¥–∞–ª–µ–Ω–∏–µ
    NAVIGATE = "navigate"      # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    COMMUNICATE = "communicate" # –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è
    UNKNOWN = "unknown"        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ


class ComplexityLevel(Enum):
    """–®–∞–≥ 4: –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏"""
    SIMPLE = 1      # 1-3 —à–∞–≥–∞
    MEDIUM = 2      # 4-10 —à–∞–≥–æ–≤
    COMPLEX = 3     # 11+ —à–∞–≥–æ–≤
    VERY_COMPLEX = 4  # 50+ —à–∞–≥–æ–≤


class RiskLevel(Enum):
    """–®–∞–≥ 10: –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


@dataclass
class TaskConstraint:
    """–®–∞–≥ 2: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    time_limit: Optional[float] = None  # —Å–µ–∫—É–Ω–¥—ã
    budget: Optional[float] = None
    resources: List[str] = field(default_factory=list)
    safety_level: str = "normal"
    max_retries: int = 3


@dataclass
class TaskParameters:
    """–®–∞–≥ 12: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏"""
    search_query: Optional[str] = None
    file_path: Optional[str] = None
    output_format: Optional[str] = None
    target_app: Optional[str] = None
    custom_params: Dict[str, Any] = field(default_factory=dict)


@dataclass
class ParsedTask:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–¥–∞—á–∏ (–®–∞–≥ 1)"""
    raw_text: str
    goal: str
    target: str
    scope: str
    task_type: TaskType
    complexity: ComplexityLevel
    constraints: TaskConstraint
    parameters: TaskParameters
    risk_level: RiskLevel
    fingerprint: str
    parsed_at: datetime = field(default_factory=datetime.now)


# ============================================================================
# –ü–û–î–†–ê–ó–î–ï–õ 1.1: TASK ANALYSIS (–®–∞–≥–∏ 1-15)
# ============================================================================

class TaskParser:
    """
    –®–∞–≥ 1: Parse High-Level Task
    
    –ü–∞—Ä—Å–∏—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
    
    –ü—Ä–∏–º–µ—Ä:
        –í—Ö–æ–¥: "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python"
        –í—ã—Ö–æ–¥: goal="find info", target="Python", scope="general"
    """
    
    def __init__(self):
        self.action_keywords = {
            'search': ['–Ω–∞–π–¥–∏', '–ø–æ–∏—â–∏', 'search', 'find', 'lookup'],
            'edit': ['–∏–∑–º–µ–Ω–∏', '–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π', 'edit', 'modify', 'change'],
            'analyze': ['–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', 'analyze', 'examine', 'review'],
            'execute': ['–∑–∞–ø—É—Å—Ç–∏', '–≤—ã–ø–æ–ª–Ω–∏', 'execute', 'run', 'start'],
            'create': ['—Å–æ–∑–¥–∞–π', '—Å–¥–µ–ª–∞–π', 'create', 'make', 'build'],
            'delete': ['—É–¥–∞–ª–∏', 'delete', 'remove', 'clear'],
        }
    
    def parse(self, user_task: str) -> ParsedTask:
        """
        –ü–∞—Ä—Å–∏—Ç –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_task: –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            ParsedTask —Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        logger.info(f"–®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞—á–∏: {user_task}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        task_type = self._identify_task_type(user_task)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–ª—å, –æ–±—ä–µ–∫—Ç –∏ –æ–±–ª–∞—Å—Ç—å
        goal, target, scope = self._extract_components(user_task, task_type)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        parsed = ParsedTask(
            raw_text=user_task,
            goal=goal,
            target=target,
            scope=scope,
            task_type=task_type,
            complexity=ComplexityLevel.SIMPLE,  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–∑–∂–µ
            constraints=TaskConstraint(),
            parameters=TaskParameters(),
            risk_level=RiskLevel.LOW,
            fingerprint=""
        )
        
        return parsed
    
    def _identify_task_type(self, text: str) -> TaskType:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        text_lower = text.lower()
        
        for task_type, keywords in self.action_keywords.items():
            if any(kw in text_lower for kw in keywords):
                return TaskType(task_type)
        
        return TaskType.UNKNOWN
    
    def _extract_components(self, text: str, task_type: TaskType) -> tuple:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: —Ü–µ–ª—å, –æ–±—ä–µ–∫—Ç, –æ–±–ª–∞—Å—Ç—å"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å NLP
        words = text.split()
        
        goal = task_type.value if task_type != TaskType.UNKNOWN else "process"
        target = words[-1] if words else "unknown"
        scope = "general"
        
        return goal, target, scope


class ConstraintExtractor:
    """
    –®–∞–≥ 2: Extract Task Constraints
    
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:
    - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    - –ë—é–¥–∂–µ—Ç
    - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    """
    
    def extract(self, task_text: str) -> TaskConstraint:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
        
        Args:
            task_text: –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            
        Returns:
            TaskConstraint —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        """
        logger.info("–®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∑–∞–¥–∞—á–∏")
        
        constraints = TaskConstraint()
        
        # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        time_match = re.search(r'(\d+)\s*(—Å–µ–∫—É–Ω–¥|–º–∏–Ω—É—Ç|—á–∞—Å)', task_text.lower())
        if time_match:
            amount = int(time_match.group(1))
            unit = time_match.group(2)
            
            if '—Å–µ–∫—É–Ω–¥' in unit:
                constraints.time_limit = amount
            elif '–º–∏–Ω—É—Ç' in unit:
                constraints.time_limit = amount * 60
            elif '—á–∞—Å' in unit:
                constraints.time_limit = amount * 3600
        
        # –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if any(word in task_text.lower() for word in ['–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ', '–±–µ–∑–æ–ø–∞—Å–Ω–æ', 'careful', 'safe']):
            constraints.safety_level = "high"
        
        return constraints


class TaskTypeClassifier:
    """
    –®–∞–≥ 3: Identify Task Type Classification
    
    –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç —à–∞–±–ª–æ–Ω —Ä–µ—à–µ–Ω–∏—è.
    """
    
    def __init__(self):
        self.type_templates = {
            TaskType.SEARCH: self._search_template,
            TaskType.EDIT: self._edit_template,
            TaskType.ANALYZE: self._analyze_template,
            TaskType.EXECUTE: self._execute_template,
            TaskType.CREATE: self._create_template,
        }
    
    def classify(self, parsed_task: ParsedTask) -> Dict[str, Any]:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω
        
        Args:
            parsed_task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —à–∞–±–ª–æ–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        logger.info(f"–®–∞–≥ 3: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏: {parsed_task.task_type}")
        
        template_func = self.type_templates.get(
            parsed_task.task_type,
            self._default_template
        )
        
        return template_func(parsed_task)
    
    def _search_template(self, task: ParsedTask) -> Dict:
        """–®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        return {
            'type': 'search',
            'steps': [
                '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–∏—Å–∫–∞',
                '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å',
                '–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫',
                '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
                '–í–µ—Ä–Ω—É—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
            ],
            'tools': ['browser', 'api', 'database']
        }
    
    def _edit_template(self, task: ParsedTask) -> Dict:
        """–®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–¥–∞—á —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            'type': 'edit',
            'steps': [
                '–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                '–ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
                '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'
            ],
            'tools': ['file_system', 'editor', 'validator']
        }
    
    def _analyze_template(self, task: ParsedTask) -> Dict:
        """–®–∞–±–ª–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        return {
            'type': 'analyze',
            'steps': [
                '–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ',
                '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ',
                '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑',
                '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥—ã',
                '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç'
            ],
            'tools': ['data_processor', 'analyzer', 'reporter']
        }
    
    def _execute_template(self, task: ParsedTask) -> Dict:
        """–®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return {
            'type': 'execute',
            'steps': [
                '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å preconditions',
                '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ',
                '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É',
                '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
                'Cleanup'
            ],
            'tools': ['executor', 'validator', 'monitor']
        }
    
    def _create_template(self, task: ParsedTask) -> Dict:
        """–®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–∏—è"""
        return {
            'type': 'create',
            'steps': [
                '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
                '–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É',
                '–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º',
                '–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
                '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'
            ],
            'tools': ['creator', 'validator', 'storage']
        }
    
    def _default_template(self, task: ParsedTask) -> Dict:
        """–®–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'type': 'unknown',
            'steps': [
                '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É',
                '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥',
                '–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è',
                '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
            ],
            'tools': ['generic_processor']
        }


class ComplexityAnalyzer:
    """
    –®–∞–≥ 4: Determine Task Complexity Level
    
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏:
    - –ü—Ä–æ—Å—Ç–∞—è (1-3 —à–∞–≥–∞)
    - –°—Ä–µ–¥–Ω—è—è (4-10 —à–∞–≥–æ–≤)
    - –°–ª–æ–∂–Ω–∞—è (11+ —à–∞–≥–æ–≤)
    """
    
    def analyze(self, parsed_task: ParsedTask, template: Dict) -> ComplexityLevel:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
        
        Args:
            parsed_task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            template: –®–∞–±–ª–æ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            ComplexityLevel
        """
        logger.info("–®–∞–≥ 4: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
        
        # –°—á–∏—Ç–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        step_count = len(template.get('steps', []))
        tool_count = len(template.get('tools', []))
        has_constraints = parsed_task.constraints.time_limit is not None
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
        score = step_count
        score += tool_count * 0.5
        if has_constraints:
            score += 2
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        if score <= 3:
            return ComplexityLevel.SIMPLE
        elif score <= 10:
            return ComplexityLevel.MEDIUM
        elif score <= 25:
            return ComplexityLevel.COMPLEX
        else:
            return ComplexityLevel.VERY_COMPLEX


class ResourceIdentifier:
    """
    –®–∞–≥ 5: Identify Required Resources
    
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è/—Ñ–∞–π–ª—ã/API –Ω—É–∂–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
    """
    
    def __init__(self):
        self.app_keywords = {
            'chrome': ['–±—Ä–∞—É–∑–µ—Ä', 'chrome', 'browser', '—Å–∞–π—Ç', 'website'],
            'vscode': ['vscode', '–∫–æ–¥', 'code', '—Ä–µ–¥–∞–∫—Ç–æ—Ä', 'editor'],
            'terminal': ['—Ç–µ—Ä–º–∏–Ω–∞–ª', 'terminal', '–∫–æ–º–∞–Ω–¥–∞', 'command'],
            'notepad': ['–±–ª–æ–∫–Ω–æ—Ç', 'notepad', '—Ç–µ–∫—Å—Ç', 'text'],
        }
    
    def identify(self, parsed_task: ParsedTask, template: Dict) -> List[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        
        Args:
            parsed_task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            template: –®–∞–±–ª–æ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        """
        logger.info("–®–∞–≥ 5: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")
        
        resources = set()
        
        # –ò–∑ —à–∞–±–ª–æ–Ω–∞
        resources.update(template.get('tools', []))
        
        # –ò–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
        text_lower = parsed_task.raw_text.lower()
        for app, keywords in self.app_keywords.items():
            if any(kw in text_lower for kw in keywords):
                resources.add(app)
        
        return list(resources)


class ResourceAvailabilityChecker:
    """
    –®–∞–≥ 6: Check Resource Availability
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.
    """
    
    def check(self, resources: List[str]) -> Dict[str, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤
        
        Args:
            resources: –°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {—Ä–µ—Å—É—Ä—Å: –¥–æ—Å—Ç—É–ø–µ–Ω}
        """
        logger.info("–®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–æ–≤")
        
        availability = {}
        
        for resource in resources:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è –≤—Å–µ—Ö
            availability[resource] = True
        
        return availability


class DependencyAnalyzer:
    """
    –®–∞–≥ 7: Analyze Task Dependencies
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏.
    """
    
    def analyze(self, subtasks: List[Dict]) -> Dict[str, List[str]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        
        Args:
            subtasks: –°–ø–∏—Å–æ–∫ –ø–æ–¥–∑–∞–¥–∞—á
            
        Returns:
            –ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        """
        logger.info("–®–∞–≥ 7: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–¥–∞—á")
        
        dependencies = {}
        
        for i, task in enumerate(subtasks):
            task_id = task.get('id', f'task_{i}')
            dependencies[task_id] = task.get('depends_on', [])
        
        return dependencies


class SuccessCriteriaDefiner:
    """
    –®–∞–≥ 8: Determine Task Success Criteria
    
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
    """
    
    def define(self, parsed_task: ParsedTask, template: Dict) -> List[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
        
        Args:
            parsed_task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            template: –®–∞–±–ª–æ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        """
        logger.info("–®–∞–≥ 8: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É—Å–ø–µ—Ö–∞")
        
        criteria = [
            "–í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –±–µ–∑ –æ—à–∏–±–æ–∫",
            "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º",
            "–ù–µ—Ç –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        if parsed_task.task_type == TaskType.SEARCH:
            criteria.append("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞")
        elif parsed_task.task_type == TaskType.CREATE:
            criteria.append("–û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∏ –≤–∞–ª–∏–¥–µ–Ω")
        
        return criteria


class DurationEstimator:
    """
    –®–∞–≥ 9: Estimate Task Duration
    
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
    """
    
    def estimate(self, complexity: ComplexityLevel, step_count: int) -> float:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        Args:
            complexity: –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            step_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
            
        Returns:
            –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        logger.info("–®–∞–≥ 9: –û—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏")
        
        # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        base_time_per_step = {
            ComplexityLevel.SIMPLE: 5,
            ComplexityLevel.MEDIUM: 10,
            ComplexityLevel.COMPLEX: 20,
            ComplexityLevel.VERY_COMPLEX: 30
        }
        
        base = base_time_per_step.get(complexity, 15)
        estimated = base * step_count
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        overhead = estimated * 0.2
        
        return estimated + overhead


class RiskAssessor:
    """
    –®–∞–≥ 10: Assess Task Risk Level
    
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏.
    """
    
    def assess(self, parsed_task: ParsedTask, resources: List[str]) -> RiskLevel:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∏—Å–∫
        
        Args:
            parsed_task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            resources: –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            
        Returns:
            RiskLevel
        """
        logger.info("–®–∞–≥ 10: –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞")
        
        risk_score = 0
        
        # –†–∏—Å–∫ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        if parsed_task.task_type in [TaskType.DELETE, TaskType.EXECUTE]:
            risk_score += 2
        elif parsed_task.task_type in [TaskType.EDIT]:
            risk_score += 1
        
        # –†–∏—Å–∫ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        risk_score += parsed_task.complexity.value - 1
        
        # –†–∏—Å–∫ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        if len(resources) > 3:
            risk_score += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        if risk_score <= 1:
            return RiskLevel.LOW
        elif risk_score <= 3:
            return RiskLevel.MEDIUM
        elif risk_score <= 5:
            return RiskLevel.HIGH
        else:
            return RiskLevel.CRITICAL


class TaskFingerprinter:
    """
    –®–∞–≥ 15: Task Fingerprinting
    
    –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö.
    """
    
    def create_fingerprint(self, parsed_task: ParsedTask) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –∑–∞–¥–∞—á–∏
        
        Args:
            parsed_task: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            
        Returns:
            –•—ç—à-—Å—Ç—Ä–æ–∫–∞ –æ—Ç–ø–µ—á–∞—Ç–∫–∞
        """
        logger.info("–®–∞–≥ 15: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –∑–∞–¥–∞—á–∏")
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        fingerprint_data = (
            f"{parsed_task.task_type.value}"
            f"{parsed_task.goal}"
            f"{parsed_task.target}"
            f"{parsed_task.complexity.value}"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ö—ç—à
        return hashlib.md5(fingerprint_data.encode()).hexdigest()


# ============================================================================
# –ü–û–î–†–ê–ó–î–ï–õ 1.2: DECOMPOSITION STRATEGIES (–®–∞–≥–∏ 16-30)
# ============================================================================
# –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ decomposition_strategies.py

# ============================================================================
# –ü–û–î–†–ê–ó–î–ï–õ 1.3: SUBTASK CREATION (–®–∞–≥–∏ 31-40)
# ============================================================================

@dataclass
class Subtask:
    """
    –®–∞–≥ 31: Create Subtask Objects
    
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É –ø–æ–¥–∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    id: str
    name: str
    description: str
    parameters: Dict[str, Any] = field(default_factory=dict)
    constraints: Optional[TaskConstraint] = None
    
    # –®–∞–≥–∏ 32-33: Pre/Postconditions
    preconditions: List[str] = field(default_factory=list)
    postconditions: List[str] = field(default_factory=list)
    
    # –®–∞–≥ 36: Duration
    estimated_duration: float = 0.0
    
    # –®–∞–≥ 37: Dependencies
    depends_on: List[str] = field(default_factory=list)
    enables: List[str] = field(default_factory=list)
    
    # –®–∞–≥ 38: Priority
    priority: int = 5  # 1-10, –≥–¥–µ 10 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π
    
    # –°—Ç–∞—Ç—É—Å
    status: str = "pending"
    result: Optional[Any] = None
    
    created_at: datetime = field(default_factory=datetime.now)


class SubtaskCreator:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –ø–æ–¥–∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è.
    """
    
    def create_subtasks(
        self,
        steps: List[str],
        task_id: str,
        base_priority: int = 5
    ) -> List[Subtask]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —à–∞–≥–æ–≤
        
        Args:
            steps: –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            task_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏
            base_priority: –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–¥–∑–∞–¥–∞—á
        """
        logger.info(f"–®–∞–≥ 31: –°–æ–∑–¥–∞–Ω–∏–µ {len(steps)} –ø–æ–¥–∑–∞–¥–∞—á")
        
        subtasks = []
        
        for i, step in enumerate(steps):
            subtask = Subtask(
                id=f"{task_id}_subtask_{i}",
                name=f"–®–∞–≥ {i+1}",
                description=step,
                priority=base_priority,
                estimated_duration=10.0  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
            if i > 0:
                subtask.depends_on.append(f"{task_id}_subtask_{i-1}")
            
            subtasks.append(subtask)
        
        return subtasks


class PreconditionDefiner:
    """
    –®–∞–≥ 32: Define Subtask Preconditions
    
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏.
    """
    
    def define(self, subtask: Subtask, context: Dict) -> List[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç preconditions
        
        Args:
            subtask: –ü–æ–¥–∑–∞–¥–∞—á–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ preconditions
        """
        logger.info(f"–®–∞–≥ 32: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ preconditions –¥–ª—è {subtask.id}")
        
        preconditions = []
        
        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - —ç—Ç–æ preconditions
        for dep in subtask.depends_on:
            preconditions.append(f"–ó–∞–¥–∞—á–∞ {dep} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ preconditions
        if 'required_resources' in context:
            for res in context['required_resources']:
                preconditions.append(f"–†–µ—Å—É—Ä—Å {res} –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        return preconditions


class PostconditionDefiner:
    """
    –®–∞–≥ 33: Define Subtask Postconditions
    
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Å—Ç—É—Å–ª–æ–≤–∏—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏.
    """
    
    def define(self, subtask: Subtask) -> List[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç postconditions
        
        Args:
            subtask: –ü–æ–¥–∑–∞–¥–∞—á–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ postconditions
        """
        logger.info(f"–®–∞–≥ 33: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ postconditions –¥–ª—è {subtask.id}")
        
        postconditions = [
            f"{subtask.name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
        ]
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞
        if 'search' in subtask.name.lower():
            postconditions.append("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        elif 'create' in subtask.name.lower():
            postconditions.append("–û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω")
        
        return postconditions


class DependencyGraphBuilder:
    """
    –®–∞–≥ 37: Calculate Subtask Dependencies
    
    –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (DAG) –º–µ–∂–¥—É –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏.
    """
    
    def build_dag(self, subtasks: List[Subtask]) -> Dict[str, List[str]]:
        """
        –°—Ç—Ä–æ–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        Args:
            subtasks: –°–ø–∏—Å–æ–∫ –ø–æ–¥–∑–∞–¥–∞—á
            
        Returns:
            DAG –≤ –≤–∏–¥–µ adjacency list
        """
        logger.info("–®–∞–≥ 37: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (DAG)")
        
        dag = {}
        
        for subtask in subtasks:
            dag[subtask.id] = subtask.depends_on.copy()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª—ã
        if self._has_cycle(dag):
            logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–∏–∫–ª –≤ –≥—Ä–∞—Ñ–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!")
        
        return dag
    
    def _has_cycle(self, graph: Dict[str, List[str]]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ü–∏–∫–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ"""
        visited = set()
        rec_stack = set()
        
        def visit(node):
            if node in rec_stack:
                return True
            if node in visited:
                return False
            
            visited.add(node)
            rec_stack.add(node)
            
            for neighbor in graph.get(node, []):
                if visit(neighbor):
                    return True
            
            rec_stack.remove(node)
            return False
        
        for node in graph:
            if visit(node):
                return True
        
        return False


class PriorityAssigner:
    """
    –®–∞–≥ 38: Assign Subtask Priority
    
    –ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–∂–¥–æ–π –ø–æ–¥–∑–∞–¥–∞—á–µ.
    """
    
    def assign(self, subtasks: List[Subtask], critical_path: List[str]) -> None:
        """
        –ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ–¥–∑–∞–¥–∞—á–∞–º
        
        Args:
            subtasks: –°–ø–∏—Å–æ–∫ –ø–æ–¥–∑–∞–¥–∞—á
            critical_path: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å (—Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏)
        """
        logger.info("–®–∞–≥ 38: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø–æ–¥–∑–∞–¥–∞—á–∞–º")
        
        for subtask in subtasks:
            # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏
            if subtask.id in critical_path:
                subtask.priority = 10
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–∏—Å–∏–º—ã—Ö –∑–∞–¥–∞—á
            else:
                dependent_count = sum(
                    1 for s in subtasks if subtask.id in s.depends_on
                )
                subtask.priority = min(5 + dependent_count, 9)


class SubtaskSetValidator:
    """
    –®–∞–≥ 40: Validate Subtask Set
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –Ω–∞–±–æ—Ä –ø–æ–¥–∑–∞–¥–∞—á –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –∑–∞–¥–∞—á—É.
    """
    
    def validate(
        self,
        subtasks: List[Subtask],
        original_task: ParsedTask,
        success_criteria: List[str]
    ) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä –ø–æ–¥–∑–∞–¥–∞—á
        
        Args:
            subtasks: –°–ø–∏—Å–æ–∫ –ø–æ–¥–∑–∞–¥–∞—á
            original_task: –ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞
            success_criteria: –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        logger.info("–®–∞–≥ 40: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ –ø–æ–¥–∑–∞–¥–∞—á")
        
        result = {
            'valid': True,
            'issues': [],
            'coverage': 0.0,
            'completeness': True
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã
        if len(subtasks) == 0:
            result['valid'] = False
            result['issues'].append("–ù–µ—Ç –ø–æ–¥–∑–∞–¥–∞—á")
            result['completeness'] = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        all_ids = {s.id for s in subtasks}
        for subtask in subtasks:
            for dep in subtask.depends_on:
                if dep not in all_ids:
                    result['valid'] = False
                    result['issues'].append(
                        f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {dep} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {subtask.id}"
                    )
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
        if result['valid']:
            result['coverage'] = 1.0
        else:
            result['coverage'] = max(0.0, 1.0 - len(result['issues']) * 0.2)
        
        return result


# ============================================================================
# –§–ê–°–ê–î –î–õ–Ø –î–ï–ö–û–ú–ü–û–ó–ò–¶–ò–ò –ó–ê–î–ê–ß
# ============================================================================

class TaskDecomposer:
    """
    –§–∞—Å–∞–¥ –¥–ª—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–¥–∞—á.
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è –∑–∞–¥–∞—á.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–∫–æ–º–ø–æ–∑–µ—Ä–∞"""
        self.parser = TaskParser()
        self.classifier = TaskTypeClassifier()
        self.complexity_analyzer = ComplexityAnalyzer()
        self.resource_identifier = ResourceIdentifier()
        self.subtask_creator = SubtaskCreator()
        self.validator = SubtaskSetValidator()
        logger.info("‚úÖ TaskDecomposer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def decompose(self, task_description: str) -> Dict[str, Any]:
        """
        –†–∞–∑–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏.
        
        Args:
            task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏
        """
        logger.info(f"üîç –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∑–∞–¥–∞—á–∏: {task_description}")
        
        # 1. –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞—á–∏
        parsed = self.parser.parse(task_description)
        
        # 2. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        task_type = self.classifier.classify(parsed)
        
        # 3. –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity = self.complexity_analyzer.analyze(parsed)
        
        # 4. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        resources = self.resource_identifier.identify(parsed)
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á
        subtasks = self.subtask_creator.create(
            parsed,
            task_type,
            complexity
        )
        
        # 6. –í–∞–ª–∏–¥–∞—Ü–∏—è
        validation = self.validator.validate(
            subtasks,
            parsed,
            parsed.success_criteria
        )
        
        return {
            'task': parsed,
            'type': task_type,
            'complexity': complexity,
            'resources': resources,
            'subtasks': subtasks,
            'validation': validation,
            'success': validation['valid']
        }
