#!/usr/bin/env python3
"""
üéØ MAIN PLANNER - –ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–®–∞–≥–∏ 131-150)
==============================================================

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –§–∞–∑—ã 3 –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import logging
from dataclasses import dataclass, field
from datetime import datetime
from typing import Any, Dict, List, Optional

from .task_decomposition import (
    TaskParser,
    ConstraintExtractor,
    TaskTypeClassifier,
    ComplexityAnalyzer,
    ResourceIdentifier,
    ResourceAvailabilityChecker,
    DependencyAnalyzer,
    SuccessCriteriaDefiner,
    DurationEstimator,
    RiskAssessor,
    TaskFingerprinter,
    SubtaskCreator,
    PreconditionDefiner,
    PostconditionDefiner,
    DependencyGraphBuilder,
    PriorityAssigner,
    SubtaskSetValidator,
    ParsedTask,
    Subtask,
)

from .decomposition_strategies import (
    AdaptiveDecomposer,
    DecompositionValidator,
    DecompositionOptimizer,
)

from .sequential_planning import (
    ExecutionOrderDeterminer,
    CriticalPathFinder,
    ParallelizationAnalyzer,
    SequentialPlanCreator,
    ParallelPlanCreator,
    TransitionMinimizer,
    CheckpointIdentifier,
    ErrorHandlerAdder,
    ValidationStepAdder,
    LoggingPointAdder,
    SafetyCheckAdder,
    ReplanningTriggerDetector,
    IncrementalReplanner,
    RealityAdapter,
)

from .optimization import (
    TimeOptimizer,
    ResourceOptimizer,
    SafetyOptimizer,
    MultiObjectiveOptimizer,
    PlanCompactor,
    PlanSimplifier,
    CachingOpportunitiesIdentifier,
    LoadBalancer,
)

from .validation import (
    CompletenessChecker,
    ConsistencyChecker,
    FeasibilityChecker,
    SafetyChecker,
    PerformanceChecker,
    ValidationReportGenerator,
    PlanSignOff,
    ValidationResult,
)

logger = logging.getLogger(__name__)


@dataclass
class PlanningResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    success: bool
    parsed_task: Optional[ParsedTask] = None
    decomposition: List[Dict[str, Any]] = field(default_factory=list)
    subtasks: List[Subtask] = field(default_factory=list)
    execution_plan: Optional[Dict[str, Any]] = None
    validation_results: Dict[str, ValidationResult] = field(default_factory=dict)
    approved: bool = False
    errors: List[str] = field(default_factory=list)
    warnings: List[str] = field(default_factory=list)
    created_at: datetime = field(default_factory=datetime.now)


class TaskPlanningSystem:
    """
    üéØ –ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
    
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ 150 —à–∞–≥–æ–≤ –§–∞–∑—ã 3:
    - Task Decomposition (1-40)
    - Sequential Planning (41-80)
    - Optimization & Validation (81-130)
    - Integration & Finalization (131-150)
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Task Planning System (–§–∞–∑–∞ 3)")
        
        # –†–ê–ó–î–ï–õ 1: TASK DECOMPOSITION (–®–∞–≥–∏ 1-40)
        self.task_parser = TaskParser()
        self.constraint_extractor = ConstraintExtractor()
        self.type_classifier = TaskTypeClassifier()
        self.complexity_analyzer = ComplexityAnalyzer()
        self.resource_identifier = ResourceIdentifier()
        self.resource_checker = ResourceAvailabilityChecker()
        self.dependency_analyzer = DependencyAnalyzer()
        self.success_criteria_definer = SuccessCriteriaDefiner()
        self.duration_estimator = DurationEstimator()
        self.risk_assessor = RiskAssessor()
        self.task_fingerprinter = TaskFingerprinter()
        
        # Decomposition Strategies (16-30)
        self.adaptive_decomposer = AdaptiveDecomposer()
        self.decomposition_validator = DecompositionValidator()
        self.decomposition_optimizer = DecompositionOptimizer()
        
        # Subtask Creation (31-40)
        self.subtask_creator = SubtaskCreator()
        self.precondition_definer = PreconditionDefiner()
        self.postcondition_definer = PostconditionDefiner()
        self.dependency_graph_builder = DependencyGraphBuilder()
        self.priority_assigner = PriorityAssigner()
        self.subtask_validator = SubtaskSetValidator()
        
        # –†–ê–ó–î–ï–õ 2: SEQUENTIAL PLANNING (–®–∞–≥–∏ 41-80)
        self.execution_order_determiner = ExecutionOrderDeterminer()
        self.critical_path_finder = CriticalPathFinder()
        self.parallelization_analyzer = ParallelizationAnalyzer()
        self.sequential_plan_creator = SequentialPlanCreator()
        self.parallel_plan_creator = ParallelPlanCreator()
        self.transition_minimizer = TransitionMinimizer()
        self.checkpoint_identifier = CheckpointIdentifier()
        
        # Plan Refinement (56-70)
        self.error_handler_adder = ErrorHandlerAdder()
        self.validation_step_adder = ValidationStepAdder()
        self.logging_point_adder = LoggingPointAdder()
        self.safety_check_adder = SafetyCheckAdder()
        
        # Adaptive Planning (71-80)
        self.replanning_detector = ReplanningTriggerDetector()
        self.incremental_replanner = IncrementalReplanner()
        self.reality_adapter = RealityAdapter()
        
        # –†–ê–ó–î–ï–õ 3: OPTIMIZATION & VALIDATION (–®–∞–≥–∏ 81-130)
        self.time_optimizer = TimeOptimizer()
        self.resource_optimizer = ResourceOptimizer()
        self.safety_optimizer = SafetyOptimizer()
        self.multi_objective_optimizer = MultiObjectiveOptimizer()
        self.plan_compactor = PlanCompactor()
        self.plan_simplifier = PlanSimplifier()
        self.caching_identifier = CachingOpportunitiesIdentifier()
        self.load_balancer = LoadBalancer()
        
        # Validation (106-130)
        self.completeness_checker = CompletenessChecker()
        self.consistency_checker = ConsistencyChecker()
        self.feasibility_checker = FeasibilityChecker()
        self.safety_checker = SafetyChecker()
        self.performance_checker = PerformanceChecker()
        self.report_generator = ValidationReportGenerator()
        self.plan_signoff = PlanSignOff()
        
        logger.info("‚úÖ Task Planning System –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def plan_task(
        self,
        user_task: str,
        requirements: Optional[List[str]] = None,
        available_resources: Optional[Dict[str, Any]] = None,
        optimization_goals: Optional[Dict[str, float]] = None
    ) -> PlanningResult:
        """
        –ü–æ–ª–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–≤—Å–µ 150 —à–∞–≥–æ–≤)
        
        Args:
            user_task: –ó–∞–¥–∞—á–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            requirements: –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            available_resources: –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            optimization_goals: –¶–µ–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            
        Returns:
            PlanningResult —Å –ø–æ–ª–Ω—ã–º –ø–ª–∞–Ω–æ–º
        """
        logger.info("=" * 70)
        logger.info(f"üéØ –ù–ê–ß–ê–õ–û –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø: {user_task}")
        logger.info("=" * 70)
        
        result = PlanningResult(success=False)
        
        try:
            # ================================================================
            # –≠–¢–ê–ü 1: –ê–ù–ê–õ–ò–ó –ò –†–ê–ó–õ–û–ñ–ï–ù–ò–ï –ó–ê–î–ê–ß–ò (–®–∞–≥–∏ 1-40)
            # ================================================================
            logger.info("\nüìã –≠–¢–ê–ü 1: –ê–ù–ê–õ–ò–ó –ò –†–ê–ó–õ–û–ñ–ï–ù–ò–ï –ó–ê–î–ê–ß–ò")
            logger.info("-" * 70)
            
            # –®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞—á–∏
            parsed_task = self.task_parser.parse(user_task)
            result.parsed_task = parsed_task
            
            # –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            parsed_task.constraints = self.constraint_extractor.extract(user_task)
            
            # –®–∞–≥ 3: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            task_template = self.type_classifier.classify(parsed_task)
            logger.info(f"   –¢–∏–ø –∑–∞–¥–∞—á–∏: {parsed_task.task_type.value}")
            
            # –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            parsed_task.complexity = self.complexity_analyzer.analyze(
                parsed_task,
                task_template
            )
            logger.info(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {parsed_task.complexity.name}")
            
            # –®–∞–≥ 5: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            required_resources = self.resource_identifier.identify(
                parsed_task,
                task_template
            )
            logger.info(f"   –†–µ—Å—É—Ä—Å—ã: {', '.join(required_resources)}")
            
            # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            resource_availability = self.resource_checker.check(required_resources)
            
            # –®–∞–≥ 8: –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
            success_criteria = self.success_criteria_definer.define(
                parsed_task,
                task_template
            )
            
            # –®–∞–≥ 10: –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
            parsed_task.risk_level = self.risk_assessor.assess(
                parsed_task,
                required_resources
            )
            logger.info(f"   –†–∏—Å–∫: {parsed_task.risk_level.value}")
            
            # –®–∞–≥ 15: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –∑–∞–¥–∞—á–∏
            parsed_task.fingerprint = self.task_fingerprinter.create_fingerprint(
                parsed_task
            )
            
            # –®–∞–≥–∏ 16-30: –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            logger.info("\n   üîÑ –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
            decomposition = self.adaptive_decomposer.decompose(parsed_task)
            result.decomposition = decomposition
            logger.info(f"   –°–æ–∑–¥–∞–Ω–æ {len(decomposition)} –ø–æ–¥–∑–∞–¥–∞—á")
            
            # –®–∞–≥ 29: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è
            decomp_validation = self.decomposition_validator.validate(
                decomposition,
                parsed_task
            )
            if not decomp_validation['valid']:
                result.errors.extend(decomp_validation['issues'])
                result.warnings.extend(decomp_validation.get('warnings', []))
            
            # –®–∞–≥ 30: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è
            decomposition = self.decomposition_optimizer.optimize(
                decomposition,
                optimization_goal='balanced'
            )
            
            # –®–∞–≥–∏ 31-40: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á
            logger.info("\n   üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á...")
            subtasks = self.subtask_creator.create_subtasks(
                [d.get('description', d.get('name', '')) for d in decomposition],
                parsed_task.fingerprint
            )
            result.subtasks = subtasks
            
            # –®–∞–≥ 37: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            dependency_graph = self.dependency_graph_builder.build_dag(subtasks)
            
            # –®–∞–≥ 40: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ –ø–æ–¥–∑–∞–¥–∞—á
            subtask_validation = self.subtask_validator.validate(
                subtasks,
                parsed_task,
                success_criteria
            )
            if not subtask_validation['valid']:
                result.errors.extend(subtask_validation['issues'])
            
            # ================================================================
            # –≠–¢–ê–ü 2: –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï (–®–∞–≥–∏ 41-80)
            # ================================================================
            logger.info("\n‚è≠Ô∏è –≠–¢–ê–ü 2: –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï")
            logger.info("-" * 70)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º subtasks –≤ Dict –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
            task_dicts = [
                {
                    'id': st.id,
                    'name': st.name,
                    'description': st.description,
                    'depends_on': st.depends_on,
                    'estimated_duration': st.estimated_duration,
                    'priority': st.priority,
                    'risk_level': parsed_task.risk_level.value
                }
                for st in subtasks
            ]
            
            # –®–∞–≥ 41: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_order = self.execution_order_determiner.determine_order(
                task_dicts
            )
            logger.info(f"   –ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {len(execution_order)} —à–∞–≥–æ–≤")
            
            # –®–∞–≥ 42: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
            critical_path, critical_duration = self.critical_path_finder.find_critical_path(
                task_dicts,
                execution_order
            )
            logger.info(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å: {len(critical_path)} –∑–∞–¥–∞—á, "
                       f"{critical_duration:.1f}—Å")
            
            # –®–∞–≥ 38: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
            self.priority_assigner.assign(subtasks, critical_path)
            
            # –®–∞–≥ 43: –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏
            parallel_groups = self.parallelization_analyzer.find_parallel_groups(
                task_dicts
            )
            logger.info(f"   –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏: {len(parallel_groups)}")
            
            # –®–∞–≥–∏ 44-45: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if len(parallel_groups) > 1 and max(len(g) for g in parallel_groups) > 1:
                execution_plan = self.parallel_plan_creator.create_plan(
                    task_dicts,
                    parallel_groups
                )
                logger.info(f"   –°–æ–∑–¥–∞–Ω –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ø–ª–∞–Ω "
                           f"(–ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º: {execution_plan['max_parallelism']})")
            else:
                execution_plan = self.sequential_plan_creator.create_plan(
                    task_dicts,
                    execution_order
                )
                logger.info("   –°–æ–∑–¥–∞–Ω –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ô –ø–ª–∞–Ω")
            
            execution_plan['tasks'] = task_dicts  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω
            execution_plan['critical_path'] = critical_path
            
            # –®–∞–≥ 49: –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
            task_dicts = self.transition_minimizer.minimize_transitions(task_dicts)
            
            # –®–∞–≥ 51: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è checkpoints
            checkpoints = self.checkpoint_identifier.identify_checkpoints(task_dicts)
            execution_plan['checkpoints'] = checkpoints
            logger.info(f"   Checkpoints: {len(checkpoints)}")
            
            # –®–∞–≥–∏ 56-64: –£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
            logger.info("\n   üîß –£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞...")
            task_dicts = self.error_handler_adder.add_handlers(task_dicts)
            task_dicts = self.validation_step_adder.add_validation_steps(task_dicts)
            task_dicts = self.logging_point_adder.add_logging(task_dicts)
            task_dicts = self.safety_check_adder.add_safety_checks(task_dicts)
            
            execution_plan['tasks'] = task_dicts
            logger.info(f"   –ü–ª–∞–Ω —É—Ç–æ—á–Ω–µ–Ω: {len(task_dicts)} –∑–∞–¥–∞—á (—Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏)")
            
            # ================================================================
            # –≠–¢–ê–ü 3: –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò –í–ê–õ–ò–î–ê–¶–ò–Ø (–®–∞–≥–∏ 81-130)
            # ================================================================
            logger.info("\n‚ö° –≠–¢–ê–ü 3: –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò –í–ê–õ–ò–î–ê–¶–ò–Ø")
            logger.info("-" * 70)
            
            # –®–∞–≥–∏ 81-91: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            logger.info("\n   ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∞...")
            
            if optimization_goals:
                execution_plan = self.multi_objective_optimizer.optimize(
                    execution_plan,
                    optimization_goals
                )
            else:
                # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                execution_plan = self.time_optimizer.optimize(execution_plan)
                execution_plan = self.resource_optimizer.optimize(execution_plan)
                execution_plan = self.safety_optimizer.optimize(execution_plan)
            
            logger.info(f"   –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ "
                       f"(score: {execution_plan.get('optimization_score', 0):.2f})")
            
            # –®–∞–≥ 93: –£–ø–ª–æ—Ç–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
            execution_plan = self.plan_compactor.compact(execution_plan)
            
            # –®–∞–≥ 95: –£–ø—Ä–æ—â–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
            execution_plan = self.plan_simplifier.simplify(execution_plan)
            
            # –®–∞–≥ 96: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            caching_opportunities = self.caching_identifier.identify(execution_plan)
            execution_plan['caching_opportunities'] = caching_opportunities
            
            # –®–∞–≥ 100: –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
            execution_plan = self.load_balancer.balance(execution_plan)
            
            result.execution_plan = execution_plan
            
            # –®–∞–≥–∏ 106-130: –í–∞–ª–∏–¥–∞—Ü–∏—è
            logger.info("\n   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞–Ω–∞...")
            
            if requirements is None:
                requirements = success_criteria
            
            if available_resources is None:
                available_resources = {
                    'time_budget': 600,  # 10 –º–∏–Ω—É—Ç
                    'resources': required_resources
                }
            
            # –®–∞–≥ 106: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã
            completeness_result = self.completeness_checker.check(
                execution_plan,
                requirements
            )
            result.validation_results['completeness'] = completeness_result
            
            # –®–∞–≥ 107: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            consistency_result = self.consistency_checker.check(execution_plan)
            result.validation_results['consistency'] = consistency_result
            
            # –®–∞–≥ 108: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–∏–º–æ—Å—Ç–∏
            feasibility_result = self.feasibility_checker.check(
                execution_plan,
                available_resources
            )
            result.validation_results['feasibility'] = feasibility_result
            
            # –®–∞–≥ 109: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            safety_result = self.safety_checker.check(execution_plan)
            result.validation_results['safety'] = safety_result
            
            # –®–∞–≥ 110: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_result = self.performance_checker.check(execution_plan)
            result.validation_results['performance'] = performance_result
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            for check_name, check_result in result.validation_results.items():
                status = "‚úÖ" if check_result.valid else "‚ùå"
                logger.info(f"   {status} {check_name.capitalize()}: "
                           f"{check_result.score:.2f} "
                           f"({check_result.checks_passed}/{check_result.checks_total})")
            
            # –®–∞–≥ 122: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            validation_report = self.report_generator.generate(
                execution_plan,
                result.validation_results
            )
            execution_plan['validation_report'] = validation_report
            
            # –®–∞–≥ 129: –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
            execution_plan = self.plan_signoff.sign_off(
                execution_plan,
                result.validation_results
            )
            
            result.approved = execution_plan.get('approved', False)
            
            # ================================================================
            # –≠–¢–ê–ü 4: –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø (–®–∞–≥–∏ 131-150)
            # ================================================================
            logger.info("\nüéØ –≠–¢–ê–ü 4: –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø")
            logger.info("-" * 70)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            result.success = result.approved and len(result.errors) == 0
            
            if result.success:
                logger.info("‚úÖ –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û")
                logger.info(f"   –ó–∞–¥–∞—á: {len(execution_plan.get('tasks', []))}")
                logger.info(f"   –í—Ä–µ–º—è: {execution_plan.get('total_duration', 0):.1f}—Å")
                logger.info(f"   –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º: {execution_plan.get('max_parallelism', 1)}")
                logger.info(f"   Checkpoints: {len(execution_plan.get('checkpoints', []))}")
            else:
                logger.warning("‚ö†Ô∏è –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
                if result.errors:
                    logger.warning(f"   –û—à–∏–±–∫–∏: {len(result.errors)}")
                if result.warnings:
                    logger.warning(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(result.warnings)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø: {e}", exc_info=True)
            result.success = False
            result.errors.append(str(e))
        
        logger.info("=" * 70)
        logger.info("üéØ –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        logger.info("=" * 70)
        
        return result
    
    def get_statistics(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        return {
            'name': 'Task Planning System - Phase 3',
            'version': '3.0.0',
            'total_steps': 150,
            'sections': {
                'task_decomposition': '1-40',
                'sequential_planning': '41-80',
                'optimization_validation': '81-130',
                'finalization': '131-150'
            },
            'components': {
                'decomposition': 15,
                'strategies': 10,
                'planning': 12,
                'optimization': 10,
                'validation': 8
            }
        }
