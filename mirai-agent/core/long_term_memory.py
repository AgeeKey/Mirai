#!/usr/bin/env python3
"""
üß† –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ü–∞–º—è—Ç—å MIRAI
–•—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, —Ä–µ—à–µ–Ω–∏–π –∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏
"""

import json
import sqlite3
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional


class Goal:
    """–ö–ª–∞—Å—Å —Ü–µ–ª–∏"""

    def __init__(
        self,
        id: int,
        title: str,
        description: str,
        priority: int,
        status: str,
        created_at: str,
        deadline: Optional[str] = None,
    ):
        self.id = id
        self.title = title
        self.description = description
        self.priority = priority
        self.status = status
        self.created_at = created_at
        self.deadline = deadline

    def to_dict(self) -> Dict:
        return {
            "id": self.id,
            "title": self.title,
            "description": self.description,
            "priority": self.priority,
            "status": self.status,
            "created_at": self.created_at,
            "deadline": self.deadline,
        }


class LongTermMemory:
    """
    –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å MIRAI:
    - –¶–µ–ª–∏ (goals)
    - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (achievements)
    - –ù–µ—É–¥–∞—á–∏ (failures)
    - –†–µ—à–µ–Ω–∏—è (decisions)
    """

    def __init__(
        self, db_path: str = "/root/mirai/mirai-agent/data/long_term_memory.db"
    ):
        self.db_path = Path(db_path)
        self.db_path.parent.mkdir(parents=True, exist_ok=True)
        self._init_database()

    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ —Ü–µ–ª–µ–π
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS goals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                description TEXT,
                priority INTEGER DEFAULT 5,
                status TEXT DEFAULT 'active',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                deadline TIMESTAMP,
                completed_at TIMESTAMP
            )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS achievements (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                goal_id INTEGER,
                description TEXT NOT NULL,
                result TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (goal_id) REFERENCES goals(id)
            )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ—É–¥–∞—á (–¥–ª—è –æ–±—É—á–µ–Ω–∏—è)
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS failures (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                goal_id INTEGER,
                reason TEXT NOT NULL,
                lesson_learned TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (goal_id) REFERENCES goals(id)
            )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—à–µ–Ω–∏–π
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS decisions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                context TEXT NOT NULL,
                decision TEXT NOT NULL,
                reasoning TEXT,
                outcome TEXT,
                outcome_rating INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                evaluated_at TIMESTAMP
            )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞–Ω–æ–≤
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS plans (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                description TEXT,
                plan_type TEXT,
                plan_data TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                valid_until TIMESTAMP
            )
        """
        )

        conn.commit()
        conn.close()

    def set_goal(
        self,
        title: str,
        description: str = "",
        priority: int = 5,
        deadline: Optional[str] = None,
    ) -> int:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å

        Args:
            title: –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏
            description: –û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10, –≥–¥–µ 10 - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π)
            deadline: –î–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS

        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            INSERT INTO goals (title, description, priority, deadline)
            VALUES (?, ?, ?, ?)
        """,
            (title, description, priority, deadline),
        )

        goal_id = cursor.lastrowid
        conn.commit()
        conn.close()

        print(f"‚úÖ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: '{title}' (ID: {goal_id}, Priority: {priority})")
        return goal_id

    def get_active_goals(self, limit: int = 10) -> List[Goal]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            SELECT id, title, description, priority, status, created_at, deadline
            FROM goals
            WHERE status = 'active'
            ORDER BY priority DESC, created_at ASC
            LIMIT ?
        """,
            (limit,),
        )

        goals = [Goal(*row) for row in cursor.fetchall()]
        conn.close()

        return goals

    def get_all_goals(self, status: Optional[str] = None) -> List[Goal]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ü–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É)"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        if status:
            cursor.execute(
                """
                SELECT id, title, description, priority, status, created_at, deadline
                FROM goals
                WHERE status = ?
                ORDER BY priority DESC, created_at DESC
            """,
                (status,),
            )
        else:
            cursor.execute(
                """
                SELECT id, title, description, priority, status, created_at, deadline
                FROM goals
                ORDER BY priority DESC, created_at DESC
            """
            )

        goals = [Goal(*row) for row in cursor.fetchall()]
        conn.close()

        return goals

    def complete_goal(self, goal_id: int, result: str = "") -> bool:
        """–û—Ç–º–µ—Ç–∏—Ç—å —Ü–µ–ª—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            UPDATE goals
            SET status = 'completed', completed_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """,
            (goal_id,),
        )

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        if result:
            cursor.execute(
                """
                INSERT INTO achievements (goal_id, description, result)
                VALUES (?, ?, ?)
            """,
                (goal_id, f"Goal completed: {goal_id}", result),
            )

        conn.commit()
        affected = cursor.rowcount
        conn.close()

        if affected > 0:
            print(f"üéâ –¶–µ–ª—å #{goal_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
            return True
        return False

    def fail_goal(self, goal_id: int, reason: str, lesson_learned: str = "") -> bool:
        """–û—Ç–º–µ—Ç–∏—Ç—å —Ü–µ–ª—å –∫–∞–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—É—é"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            UPDATE goals
            SET status = 'failed', completed_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """,
            (goal_id,),
        )

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á—É –∏ —É—Ä–æ–∫
        cursor.execute(
            """
            INSERT INTO failures (goal_id, reason, lesson_learned)
            VALUES (?, ?, ?)
        """,
            (goal_id, reason, lesson_learned),
        )

        conn.commit()
        affected = cursor.rowcount
        conn.close()

        if affected > 0:
            print(f"‚ùå –¶–µ–ª—å #{goal_id} –ø—Ä–æ–≤–∞–ª–µ–Ω–∞. –£—Ä–æ–∫: {lesson_learned}")
            return True
        return False

    def record_achievement(
        self, description: str, result: str = "", goal_id: Optional[int] = None
    ):
        """–ó–∞–ø–∏—Å–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ü–µ–ª—å—é)"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            INSERT INTO achievements (goal_id, description, result)
            VALUES (?, ?, ?)
        """,
            (goal_id, description, result),
        )

        conn.commit()
        conn.close()

        print(f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {description}")

    def record_decision(self, context: str, decision: str, reasoning: str = "") -> int:
        """–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–Ω—è—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            INSERT INTO decisions (context, decision, reasoning)
            VALUES (?, ?, ?)
        """,
            (context, decision, reasoning),
        )

        decision_id = cursor.lastrowid
        conn.commit()
        conn.close()

        print(f"üìù –†–µ—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ (ID: {decision_id})")
        return decision_id

    def evaluate_decision(self, decision_id: int, outcome: str, rating: int):
        """
        –û—Ü–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—à–µ–Ω–∏—è

        Args:
            decision_id: ID —Ä–µ—à–µ–Ω–∏—è
            outcome: –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            rating: –û—Ü–µ–Ω–∫–∞ (1-10)
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            UPDATE decisions
            SET outcome = ?, outcome_rating = ?, evaluated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """,
            (outcome, rating, decision_id),
        )

        conn.commit()
        conn.close()

        emoji = "‚úÖ" if rating >= 7 else "‚ö†Ô∏è" if rating >= 4 else "‚ùå"
        print(f"{emoji} –†–µ—à–µ–Ω–∏–µ #{decision_id} –æ—Ü–µ–Ω–µ–Ω–æ: {rating}/10 - {outcome}")

    def learn_from_history(self, days: int = 30) -> Dict:
        """
        –ò–∑–≤–ª–µ—á—å —É—Ä–æ–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π

        Returns:
            Dict —Å –∞–Ω–∞–ª–∏–∑–æ–º: —É—Å–ø–µ—Ö–∏, –Ω–µ—É–¥–∞—á–∏, –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        since = (datetime.now() - timedelta(days=days)).isoformat()

        # –£—Å–ø–µ—à–Ω—ã–µ —Ü–µ–ª–∏
        cursor.execute(
            """
            SELECT COUNT(*) FROM goals
            WHERE status = 'completed' AND completed_at >= ?
        """,
            (since,),
        )
        completed_goals = cursor.fetchone()[0]

        # –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
        cursor.execute(
            """
            SELECT COUNT(*) FROM goals
            WHERE status = 'failed' AND completed_at >= ?
        """,
            (since,),
        )
        failed_goals = cursor.fetchone()[0]

        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        cursor.execute(
            """
            SELECT COUNT(*) FROM achievements
            WHERE created_at >= ?
        """,
            (since,),
        )
        achievements_count = cursor.fetchone()[0]

        # –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —Ä–µ—à–µ–Ω–∏—è
        cursor.execute(
            """
            SELECT AVG(outcome_rating) FROM decisions
            WHERE evaluated_at >= ? AND outcome_rating IS NOT NULL
        """,
            (since,),
        )
        avg_decision_rating = cursor.fetchone()[0] or 0

        # –£—Ä–æ–∫–∏ –∏–∑ –Ω–µ—É–¥–∞—á
        cursor.execute(
            """
            SELECT lesson_learned FROM failures
            WHERE created_at >= ? AND lesson_learned IS NOT NULL
            ORDER BY created_at DESC
            LIMIT 5
        """,
            (since,),
        )
        lessons = [row[0] for row in cursor.fetchall()]

        conn.close()

    def get_recent_achievements(self, limit: int = 20) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

        Returns:
            List —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            SELECT id, goal_id, description, result, created_at
            FROM achievements
            ORDER BY created_at DESC
            LIMIT ?
        """,
            (limit,),
        )

        achievements = []
        for row in cursor.fetchall():
            achievements.append(
                {
                    "id": row[0],
                    "goal_id": row[1],
                    "description": row[2],
                    "result": row[3],
                    "created_at": row[4],
                    "impact": 5,  # Default impact –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                }
            )

        conn.close()
        return achievements

    def learn_from_history_impl(self, days: int = 30) -> Dict:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è learn_from_history"""
        since = (datetime.now() - timedelta(days=days)).isoformat()

        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute(
            "SELECT COUNT(*) FROM goals WHERE status = 'completed' AND updated_at >= ?",
            (since,),
        )
        completed_goals = cursor.fetchone()[0]

        cursor.execute(
            "SELECT COUNT(*) FROM goals WHERE status = 'failed' AND updated_at >= ?",
            (since,),
        )
        failed_goals = cursor.fetchone()[0]

        cursor.execute(
            "SELECT COUNT(*) FROM achievements WHERE created_at >= ?", (since,)
        )
        achievements_count = cursor.fetchone()[0]

        cursor.execute(
            "SELECT AVG(outcome_rating) FROM decisions WHERE evaluated_at >= ? AND outcome_rating IS NOT NULL",
            (since,),
        )
        avg_decision_rating = cursor.fetchone()[0] or 0

        cursor.execute(
            "SELECT lesson_learned FROM failures WHERE created_at >= ? AND lesson_learned IS NOT NULL ORDER BY created_at DESC LIMIT 5",
            (since,),
        )
        lessons = [row[0] for row in cursor.fetchall()]

        conn.close()

        analysis = {
            "period_days": days,
            "completed_goals": completed_goals,
            "failed_goals": failed_goals,
            "success_rate": (
                completed_goals / (completed_goals + failed_goals) * 100
                if (completed_goals + failed_goals) > 0
                else 0
            ),
            "achievements_count": achievements_count,
            "avg_decision_rating": round(avg_decision_rating, 1),
            "recent_lessons": lessons,
        }

        return analysis

    def get_summary(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–∞–º—è—Ç–∏"""
        active_goals = self.get_active_goals()
        history = self.learn_from_history(days=7)

        summary = f"""
üìä –î–û–õ–ì–û–°–†–û–ß–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ MIRAI

üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏: {len(active_goals)}
"""

        if active_goals:
            summary += "\n–¢–æ–ø-3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:\n"
            for i, goal in enumerate(active_goals[:3], 1):
                summary += f"  {i}. [{goal.priority}] {goal.title}\n"

        summary += f"""
üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:
  ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–µ–ª–µ–π: {history['completed_goals']}
  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ü–µ–ª–µ–π: {history['failed_goals']}
  üìä Success Rate: {history['success_rate']:.1f}%
  üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {history['achievements_count']}
  üß† –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π: {history['avg_decision_rating']}/10
"""

        if history["recent_lessons"]:
            summary += "\nüí° –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏:\n"
            for lesson in history["recent_lessons"][:3]:
                summary += f"  ‚Ä¢ {lesson}\n"

        return summary.strip()


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    print("üß† –¢–ï–°–¢ –î–û–õ–ì–û–°–†–û–ß–ù–û–ô –ü–ê–ú–Ø–¢–ò MIRAI\n")

    ltm = LongTermMemory()

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–º–µ—Ä—ã —Ü–µ–ª–µ–π
    goal1 = ltm.set_goal(
        title="–î–æ—Å—Ç–∏—á—å 90% –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏",
        description="–ù–∞–ø–∏—Å–∞—Ç—å unit-—Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö core –º–æ–¥—É–ª–µ–π",
        priority=8,
        deadline=(datetime.now() + timedelta(days=14)).isoformat(),
    )

    goal2 = ltm.set_goal(
        title="–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ 20%",
        description="–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å —É–∑–∫–∏–µ –º–µ—Å—Ç–∞",
        priority=6,
    )

    goal3 = ltm.set_goal(
        title="–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç",
        description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD pipeline —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–µ–ø–ª–æ–µ–º",
        priority=9,
    )

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    ltm.record_achievement(
        description="–î–æ–±–∞–≤–ª–µ–Ω–∞ GitHub Integration —Å auto-fix –∫–æ–¥–∞",
        result="–°–æ–∑–¥–∞–Ω–æ 4 –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–∞, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç",
    )

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
    decision1 = ltm.record_decision(
        context="CI/CD –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 75% success rate",
        decision="–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç",
        reasoning="–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –ª—É—á—à–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ",
    )

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
    ltm.evaluate_decision(
        decision1, outcome="Auto-fix —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞—ë—Ç PR —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏", rating=9
    )

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
    print("\n" + "=" * 60)
    print("–ê–ö–¢–ò–í–ù–´–ï –¶–ï–õ–ò:")
    print("=" * 60)
    for goal in ltm.get_active_goals():
        print(f"\n[{goal.priority}] {goal.title}")
        print(f"    {goal.description}")
        if goal.deadline:
            print(f"    ‚è∞ Deadline: {goal.deadline}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    print("\n" + "=" * 60)
    print(ltm.get_summary())
    print("=" * 60)

    # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    print("\nüìö –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ò:")
    history = ltm.learn_from_history(days=30)
    print(json.dumps(history, indent=2, ensure_ascii=False))

    def get_recent_achievements(self, limit: int = 20) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

        Returns:
            List —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            SELECT id, goal_id, description, result, created_at
            FROM achievements
            ORDER BY created_at DESC
            LIMIT ?
        """,
            (limit,),
        )

        achievements = []
        for row in cursor.fetchall():
            achievements.append(
                {
                    "id": row[0],
                    "goal_id": row[1],
                    "description": row[2],
                    "result": row[3],
                    "created_at": row[4],
                    "impact": 5,  # Default impact –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                }
            )

        conn.close()
        return achievements


if __name__ == "__main__":
    main()
