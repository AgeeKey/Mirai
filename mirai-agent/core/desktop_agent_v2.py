#!/usr/bin/env python3
"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  MIRAI Desktop Agent V2 - –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º           ‚ïë
‚ïë  NASA-level Architecture for Desktop Automation                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- üñ±Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (pyautogui + native API)
- ü™ü –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–∞–º–∏ (–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è)
- üåê –ë—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å browser_automation.py)
- üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã + GPT-4 Vision –∞–Ω–∞–ª–∏–∑
- üîç OCR –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ (pytesseract)
- üëÅÔ∏è Computer Vision –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (OpenCV)
- ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π (GPT-4o)
- üß† –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å RAG –∏ Long-term Memory
- üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
- üìä –ú–µ—Ç—Ä–∏–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

–ê–≤—Ç–æ—Ä: MIRAI AI Team
–î–∞—Ç–∞: 2025-10-24
"""

import base64
import json
import logging
import os
import platform
import subprocess
import time
from dataclasses import dataclass, field
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple, Union

import cv2
import numpy as np
import pyautogui
from openai import OpenAI
from PIL import Image, ImageGrab

# OCR
try:
    import pytesseract
    OCR_AVAILABLE = True
except ImportError:
    OCR_AVAILABLE = False
    print("‚ö†Ô∏è pytesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pytesseract")

# Windows-specific
if platform.system() == "Windows":
    try:
        import win32con
        import win32gui
        import win32process
        WINDOWS_API_AVAILABLE = True
    except ImportError:
        WINDOWS_API_AVAILABLE = False
        print("‚ö†Ô∏è pywin32 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –§—É–Ω–∫—Ü–∏–∏ Windows API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
else:
    WINDOWS_API_AVAILABLE = False

# MIRAI core imports
try:
    from core.autonomous_agent import AutonomousAgent
    from core.browser_automation import BrowserAutomation
    from core.memory_manager import get_memory_manager, Message
    MIRAI_CORE_AVAILABLE = True
except ImportError:
    MIRAI_CORE_AVAILABLE = False
    print("‚ö†Ô∏è MIRAI core modules –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –†–∞–±–æ—Ç–∞—é –≤ standalone —Ä–µ–∂–∏–º–µ.")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
pyautogui.FAILSAFE = True  # –î–≤–∏–≥–∞–π –º—ã—à—å –≤ —É–≥–æ–ª —ç–∫—Ä–∞–Ω–∞ —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
pyautogui.PAUSE = 0.3  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏


@dataclass
class ScreenRegion:
    """–û–±–ª–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã"""
    x: int
    y: int
    width: int
    height: int
    
    def to_tuple(self) -> Tuple[int, int, int, int]:
        return (self.x, self.y, self.width, self.height)
    
    def center(self) -> Tuple[int, int]:
        return (self.x + self.width // 2, self.y + self.height // 2)


@dataclass
class WindowInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    handle: int  # hwnd –Ω–∞ Windows, window ID –Ω–∞ Linux
    title: str
    class_name: str = ""
    process_name: str = ""
    rect: Optional[Tuple[int, int, int, int]] = None  # (left, top, right, bottom)
    is_visible: bool = True
    is_minimized: bool = False
    
    def to_region(self) -> Optional[ScreenRegion]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ ScreenRegion"""
        if self.rect:
            left, top, right, bottom = self.rect
            return ScreenRegion(left, top, right - left, bottom - top)
        return None


@dataclass
class DesktopAction:
    """–î–µ–π—Å—Ç–≤–∏–µ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ"""
    timestamp: float
    action_type: str  # click, type, screenshot, etc.
    params: Dict[str, Any]
    result: str
    screenshot_path: Optional[str] = None
    duration: float = 0.0
    
    def to_dict(self) -> Dict:
        return {
            "timestamp": self.timestamp,
            "action_type": self.action_type,
            "params": self.params,
            "result": self.result,
            "screenshot_path": self.screenshot_path,
            "duration": self.duration
        }


class SafetyLimits:
    """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
    MAX_CLICKS_PER_MINUTE = 60
    MAX_KEYSTROKES_PER_MINUTE = 300
    MAX_SCREENSHOTS_PER_MINUTE = 30
    
    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã —ç–∫—Ä–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è)
    FORBIDDEN_REGIONS: List[ScreenRegion] = []
    
    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    PROTECTED_PROCESSES = ["explorer.exe", "System", "svchost.exe", "csrss.exe"]
    
    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
    FORBIDDEN_KEYS = ["power", "sleep"]
    
    @classmethod
    def check_action_allowed(cls, action_type: str, params: Dict) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ
        
        Returns:
            (allowed, reason)
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
        if action_type == "click":
            x, y = params.get("x", 0), params.get("y", 0)
            for region in cls.FORBIDDEN_REGIONS:
                if (region.x <= x <= region.x + region.width and
                    region.y <= y <= region.y + region.height):
                    return False, f"–ö–ª–∏–∫ –≤ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π –∑–æ–Ω–µ: {region}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
        if action_type == "press_key":
            keys = params.get("keys", "").lower()
            if any(forbidden in keys for forbidden in cls.FORBIDDEN_KEYS):
                return False, f"–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏—à–∞: {keys}"
        
        return True, "OK"


class MiraiDesktopAgent:
    """
    –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏–º —Å—Ç–æ–ª–æ–º
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ                  MIRAI Desktop Agent                    ‚îÇ
    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
    ‚îÇ  Vision & OCR    ‚îÇ  Input Control  ‚îÇ  Window Manager   ‚îÇ
    ‚îÇ  - GPT-4 Vision  ‚îÇ  - Mouse        ‚îÇ  - Find/Activate  ‚îÇ
    ‚îÇ  - pytesseract   ‚îÇ  - Keyboard     ‚îÇ  - Resize/Move    ‚îÇ
    ‚îÇ  - OpenCV        ‚îÇ  - Hotkeys      ‚îÇ  - List/Monitor   ‚îÇ
    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
    ‚îÇ              Autonomous Decision Engine                 ‚îÇ
    ‚îÇ              (GPT-4o + RAG + Memory)                    ‚îÇ
    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
    ‚îÇ        Safety Layer (Limits + Forbidden Actions)        ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    """
    
    def __init__(
        self,
        openai_api_key: Optional[str] = None,
        enable_safety: bool = True,
        enable_memory: bool = True,
        screenshots_dir: str = "screenshots",
        user_id: str = "desktop_user"
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Desktop Agent
        
        Args:
            openai_api_key: API –∫–ª—é—á OpenAI
            enable_safety: –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            enable_memory: –í–∫–ª—é—á–∏—Ç—å –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
            screenshots_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è memory system
        """
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MIRAI Desktop Agent V2...")
        
        # API –∫–ª—é—á OpenAI
        self.api_key = self._load_api_key(openai_api_key)
        self.client = OpenAI(api_key=self.api_key)
        self.model = "gpt-4o"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.enable_safety = enable_safety
        self.enable_memory = enable_memory
        self.user_id = user_id
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        self.screenshots_dir = Path(screenshots_dir)
        self.screenshots_dir.mkdir(exist_ok=True, parents=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        self.os_type = platform.system()
        self.screen_width, self.screen_height = pyautogui.size()
        logger.info(f"üñ•Ô∏è –û–°: {self.os_type}, –≠–∫—Ä–∞–Ω: {self.screen_width}x{self.screen_height}")
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MIRAI core
        self.autonomous_agent = None
        self.browser_automation = None
        self.memory_manager = None
        
        if MIRAI_CORE_AVAILABLE:
            try:
                self.autonomous_agent = AutonomousAgent(user_id=user_id)
                self.browser_automation = BrowserAutomation(headless=False)
                if enable_memory:
                    self.memory_manager = get_memory_manager()
                logger.info("‚úÖ MIRAI core –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å MIRAI core: {e}")
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π
        self.action_history: List[DesktopAction] = []
        self.last_screenshot_path: Optional[str] = None
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è rate limiting
        self._action_timestamps: Dict[str, List[float]] = {
            "click": [],
            "type": [],
            "screenshot": []
        }
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è GPT
        self.tools = self._create_tools()
        
        logger.info("‚úÖ Desktop Agent –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    def _load_api_key(self, provided_key: Optional[str]) -> str:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á OpenAI"""
        # 1. –ò–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        if provided_key:
            return provided_key
        
        # 2. –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_key = os.getenv("OPENAI_API_KEY")
        if env_key:
            return env_key
        
        # 3. –ò–∑ configs/api_keys.json
        config_path = Path(__file__).parent.parent / "configs" / "api_keys.json"
        if config_path.exists():
            try:
                with open(config_path) as f:
                    config = json.load(f)
                    key = config.get("openai")
                    if key:
                        return key
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á –∏–∑ {config_path}: {e}")
        
        raise ValueError(
            "OpenAI API key –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:\n"
            "1. OPENAI_API_KEY environment variable\n"
            "2. configs/api_keys.json —Å –∫–ª—é—á–æ–º 'openai'\n"
            "3. –ü–µ—Ä–µ–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä openai_api_key"
        )
    
    def _create_tools(self) -> List[Dict]:
        """–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è GPT Function Calling"""
        tools = [
            {
                "type": "function",
                "function": {
                    "name": "click_at_position",
                    "description": "–ö–ª–∏–∫–Ω—É—Ç—å –º—ã—à—å—é –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —ç–∫—Ä–∞–Ω–∞",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "x": {"type": "integer", "description": "X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (0 –¥–æ screen_width)"},
                            "y": {"type": "integer", "description": "Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (0 –¥–æ screen_height)"},
                            "clicks": {"type": "integer", "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ (1 –∏–ª–∏ 2)", "default": 1},
                            "button": {"type": "string", "enum": ["left", "right", "middle"], "description": "–ö–Ω–æ–ø–∫–∞ –º—ã—à–∏"}
                        },
                        "required": ["x", "y"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "type_text",
                    "description": "–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "text": {"type": "string", "description": "–¢–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞"},
                            "interval": {"type": "number", "description": "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)", "default": 0.05}
                        },
                        "required": ["text"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "press_key",
                    "description": "–ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É –∏–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à (–Ω–∞–ø—Ä–∏–º–µ—Ä: enter, ctrl+c, alt+tab)",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "keys": {"type": "string", "description": "–ö–ª–∞–≤–∏—à–∞ –∏–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è"}
                        },
                        "required": ["keys"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "take_screenshot",
                    "description": "–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "region": {"type": "string", "description": "–û–±–ª–∞—Å—Ç—å: 'full' –∏–ª–∏ 'x,y,width,height'", "default": "full"}
                        }
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "analyze_screenshot",
                    "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ—Ä–µ–∑ GPT-4 Vision",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "question": {"type": "string", "description": "–í–æ–ø—Ä–æ—Å –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ"}
                        },
                        "required": ["question"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "find_text_on_screen",
                    "description": "–ù–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å –ø–æ–º–æ—â—å—é OCR",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "text": {"type": "string", "description": "–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞"}
                        },
                        "required": ["text"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "find_image_on_screen",
                    "description": "–ù–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å –ø–æ–º–æ—â—å—é Computer Vision",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "image_path": {"type": "string", "description": "–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é-—à–∞–±–ª–æ–Ω—É"}
                        },
                        "required": ["image_path"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "open_application",
                    "description": "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –ø—É—Ç–∏",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "app_name": {"type": "string", "description": "–ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –ø—É—Ç—å –∫ .exe"},
                            "args": {"type": "string", "description": "–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏", "default": ""}
                        },
                        "required": ["app_name"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "find_window",
                    "description": "–ù–∞–π—Ç–∏ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "title_contains": {"type": "string", "description": "–¢–µ–∫—Å—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –æ–∫–Ω–∞"}
                        },
                        "required": ["title_contains"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "activate_window",
                    "description": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å (–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞) –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "title_contains": {"type": "string", "description": "–¢–µ–∫—Å—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –æ–∫–Ω–∞"}
                        },
                        "required": ["title_contains"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "move_mouse",
                    "description": "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫—É—Ä—Å–æ—Ä –º—ã—à–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "x": {"type": "integer", "description": "X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞"},
                            "y": {"type": "integer", "description": "Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞"},
                            "duration": {"type": "number", "description": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)", "default": 0.5}
                        },
                        "required": ["x", "y"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "wait_seconds",
                    "description": "–ü–æ–¥–æ–∂–¥–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "seconds": {"type": "number", "description": "–°–µ–∫—É–Ω–¥—ã –æ–∂–∏–¥–∞–Ω–∏—è"}
                        },
                        "required": ["seconds"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "get_mouse_position",
                    "description": "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏",
                    "parameters": {"type": "object", "properties": {}}
                }
            }
        ]
        
        # –î–æ–±–∞–≤–∏—Ç—å browser tools –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.browser_automation:
            tools.append({
                "type": "function",
                "function": {
                    "name": "browse_web",
                    "description": "–û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ URL",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "url": {"type": "string", "description": "URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è"}
                        },
                        "required": ["url"]
                    }
                }
            })
        
        return tools
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ë–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è - –ú—ã—à—å –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def click_at_position(
        self,
        x: int,
        y: int,
        clicks: int = 1,
        button: str = "left"
    ) -> str:
        """–ö–ª–∏–∫–Ω—É—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        start_time = time.time()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if self.enable_safety:
                allowed, reason = SafetyLimits.check_action_allowed(
                    "click",
                    {"x": x, "y": y, "clicks": clicks, "button": button}
                )
                if not allowed:
                    return f"‚ùå –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: {reason}"
            
            # Rate limiting
            if not self._check_rate_limit("click", SafetyLimits.MAX_CLICKS_PER_MINUTE):
                return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–ª–∏–∫–æ–≤ –≤ –º–∏–Ω—É—Ç—É"
            
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫
            pyautogui.click(x, y, clicks=clicks, button=button)
            
            duration = time.time() - start_time
            result = f"‚úÖ –ö–ª–∏–∫ {button} –≤ ({x}, {y}) x{clicks}"
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._log_action("click", {"x": x, "y": y, "clicks": clicks, "button": button}, result, duration)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}"
    
    def type_text(self, text: str, interval: float = 0.05) -> str:
        """–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç"""
        start_time = time.time()
        
        try:
            # Rate limiting
            estimated_keystrokes = len(text)
            if not self._check_rate_limit("type", SafetyLimits.MAX_KEYSTROKES_PER_MINUTE, estimated_keystrokes):
                return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –≤ –º–∏–Ω—É—Ç—É"
            
            # –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å
            pyautogui.write(text, interval=interval)
            
            duration = time.time() - start_time
            result = f"‚úÖ –ù–∞–ø–µ—á–∞—Ç–∞–Ω —Ç–µ–∫—Å—Ç ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)"
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–µ –ª–æ–≥–∏—Ä—É–µ–º —Å–∞–º —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            self._log_action("type_text", {"length": len(text)}, result, duration)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {e}"
    
    def press_key(self, keys: str) -> str:
        """–ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É –∏–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é"""
        start_time = time.time()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if self.enable_safety:
                allowed, reason = SafetyLimits.check_action_allowed("press_key", {"keys": keys})
                if not allowed:
                    return f"‚ùå –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: {reason}"
            
            # –†–∞–∑–±–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é (ctrl+c -> ['ctrl', 'c'])
            key_list = keys.lower().replace(' ', '').split('+')
            
            if len(key_list) == 1:
                pyautogui.press(key_list[0])
            else:
                pyautogui.hotkey(*key_list)
            
            duration = time.time() - start_time
            result = f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞: {keys}"
            
            self._log_action("press_key", {"keys": keys}, result, duration)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    def move_mouse(self, x: int, y: int, duration: float = 0.5) -> str:
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫—É—Ä—Å–æ—Ä"""
        try:
            pyautogui.moveTo(x, y, duration=duration)
            return f"‚úÖ –ö—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ ({x}, {y})"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    def get_mouse_position(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞"""
        try:
            x, y = pyautogui.position()
            return f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞: ({x}, {y})"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    def wait_seconds(self, seconds: float) -> str:
        """–ü–æ–¥–æ–∂–¥–∞—Ç—å"""
        try:
            time.sleep(seconds)
            return f"‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ {seconds}—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ Vision
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def take_screenshot(self, region: str = "full") -> str:
        """–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"""
        start_time = time.time()
        
        try:
            # Rate limiting
            if not self._check_rate_limit("screenshot", SafetyLimits.MAX_SCREENSHOTS_PER_MINUTE):
                return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ –º–∏–Ω—É—Ç—É"
            
            # –ò–º—è —Ñ–∞–π–ª–∞
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            filename = f"screenshot_{timestamp}.png"
            filepath = self.screenshots_dir / filename
            
            # –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
            if region == "full":
                screenshot = pyautogui.screenshot()
            else:
                # –ü–∞—Ä—Å–∏–º —Ä–µ–≥–∏–æ–Ω: "x,y,width,height"
                parts = [int(p.strip()) for p in region.split(',')]
                if len(parts) != 4:
                    return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–≥–∏–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: x,y,width,height"
                screenshot = pyautogui.screenshot(region=tuple(parts))
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            screenshot.save(filepath)
            self.last_screenshot_path = str(filepath)
            
            duration = time.time() - start_time
            result = f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç: {filepath.name}"
            
            self._log_action("screenshot", {"region": region}, result, duration, str(filepath))
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    def analyze_screenshot(self, question: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ GPT-4 Vision"""
        try:
            if not self.last_screenshot_path:
                return "‚ùå –ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç (take_screenshot)"
            
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with open(self.last_screenshot_path, "rb") as img_file:
                img_data = base64.b64encode(img_file.read()).decode()
            
            # –ó–∞–ø—Ä–æ—Å –∫ GPT-4 Vision
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": question},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/png;base64,{img_data}"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=1000
            )
            
            analysis = response.choices[0].message.content
            result = f"üîç Vision –∞–Ω–∞–ª–∏–∑:\n{analysis}"
            
            self._log_action("analyze_screenshot", {"question": question}, analysis)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # OCR –∏ Computer Vision
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def find_text_on_screen(self, text: str) -> str:
        """–ù–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å –ø–æ–º–æ—â—å—é OCR"""
        try:
            if not OCR_AVAILABLE:
                return "‚ùå OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pytesseract"
            
            # –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot = pyautogui.screenshot()
            
            # OCR
            ocr_text = pytesseract.image_to_string(screenshot)
            
            # –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞
            if text.lower() in ocr_text.lower():
                # –ù–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ)
                return f"‚úÖ –¢–µ–∫—Å—Ç '{text}' –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω–µ\nOCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{ocr_text[:200]}..."
            else:
                return f"‚ùå –¢–µ–∫—Å—Ç '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω–µ"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OCR: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞ OCR: {e}"
    
    def find_image_on_screen(self, image_path: str) -> str:
        """–ù–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å –ø–æ–º–æ—â—å—é OpenCV"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not Path(image_path).exists():
                return f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}"
            
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω
            template = cv2.imread(image_path)
            if template is None:
                return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}"
            
            # –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞
            screenshot = pyautogui.screenshot()
            screenshot_np = np.array(screenshot)
            screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
            
            # Template matching
            result = cv2.matchTemplate(screenshot_cv, template, cv2.TM_CCOEFF_NORMED)
            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
            
            # –ü–æ—Ä–æ–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            threshold = 0.8
            if max_val >= threshold:
                x, y = max_loc
                h, w = template.shape[:2]
                center_x, center_y = x + w // 2, y + h // 2
                
                return f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ ({center_x}, {center_y}), —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {max_val:.2%}"
            else:
                return f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {max_val:.2%})"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –†–∞–±–æ—Ç–∞ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ –æ–∫–Ω–∞–º–∏
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def open_application(self, app_name: str, args: str = "") -> str:
        """–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            # –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            common_apps = {
                # –ë—Ä–∞—É–∑–µ—Ä—ã
                "chrome": "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
                "firefox": "C:\\Program Files\\Mozilla Firefox\\firefox.exe",
                "edge": "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe",
                # –†–µ–¥–∞–∫—Ç–æ—Ä—ã
                "notepad": "notepad.exe",
                "notepad++": "C:\\Program Files\\Notepad++\\notepad++.exe",
                "vscode": "C:\\Program Files\\Microsoft VS Code\\Code.exe",
                # –°–∏—Å—Ç–µ–º–Ω—ã–µ
                "explorer": "explorer.exe",
                "cmd": "cmd.exe",
                "powershell": "powershell.exe",
                # –£—Ç–∏–ª–∏—Ç—ã
                "calculator": "calc.exe",
                "paint": "mspaint.exe",
                "mspaint": "mspaint.exe",
            }
            
            # –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å
            app_path = common_apps.get(app_name.lower(), app_name)
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å
            if args:
                subprocess.Popen(f'"{app_path}" {args}', shell=True)
            else:
                subprocess.Popen(app_path, shell=True)
            
            # –ü–æ–¥–æ–∂–¥–∞—Ç—å –∑–∞–ø—É—Å–∫–∞
            time.sleep(2)
            
            result = f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{app_name}' –∑–∞–ø—É—â–µ–Ω–æ"
            self._log_action("open_application", {"app_name": app_name, "args": args}, result)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    def find_window(self, title_contains: str) -> str:
        """–ù–∞–π—Ç–∏ –æ–∫–Ω–æ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É"""
        try:
            windows = self._get_all_windows()
            matching = [w for w in windows if title_contains.lower() in w.title.lower() and w.is_visible]
            
            if not matching:
                return f"‚ùå –û–∫–Ω–æ —Å '{title_contains}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            result = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–∫–æ–Ω: {len(matching)}\n"
            for i, w in enumerate(matching[:5], 1):
                result += f"  {i}. {w.title}\n"
            
            return result.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–∫–Ω–∞: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    def activate_window(self, title_contains: str) -> str:
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ"""
        try:
            windows = self._get_all_windows()
            matching = [w for w in windows if title_contains.lower() in w.title.lower() and w.is_visible]
            
            if not matching:
                return f"‚ùå –û–∫–Ω–æ —Å '{title_contains}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ
            window = matching[0]
            
            if WINDOWS_API_AVAILABLE:
                win32gui.ShowWindow(window.handle, win32con.SW_RESTORE)
                win32gui.SetForegroundWindow(window.handle)
            else:
                # –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± (–º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
                pyautogui.hotkey('alt', 'tab')
            
            time.sleep(0.5)
            
            result = f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {window.title}"
            self._log_action("activate_window", {"title": title_contains}, result)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–∫–Ω–∞: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    def _get_all_windows(self) -> List[WindowInfo]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–∫–æ–Ω"""
        windows = []
        
        if WINDOWS_API_AVAILABLE:
            def callback(hwnd, _):
                if win32gui.IsWindowVisible(hwnd):
                    title = win32gui.GetWindowText(hwnd)
                    if title:
                        try:
                            class_name = win32gui.GetClassName(hwnd)
                            rect = win32gui.GetWindowRect(hwnd)
                            is_minimized = win32gui.IsIconic(hwnd)
                            
                            # –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                            _, pid = win32process.GetWindowThreadProcessId(hwnd)
                            process_name = ""
                            
                            windows.append(WindowInfo(
                                handle=hwnd,
                                title=title,
                                class_name=class_name,
                                process_name=process_name,
                                rect=rect,
                                is_visible=True,
                                is_minimized=is_minimized
                            ))
                        except Exception:
                            pass
            
            win32gui.EnumWindows(callback, None)
        else:
            # –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è)
            logger.warning("Windows API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –æ–∫–Ω–∞–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")
        
        return windows
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def browse_web(self, url: str) -> str:
        """–û—Ç–∫—Ä—ã—Ç—å URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            if self.browser_automation:
                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BrowserAutomation
                self.browser_automation.navigate(url)
                return f"‚úÖ –û—Ç–∫—Ä—ã—Ç URL: {url}"
            else:
                # Fallback - –æ—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
                self.open_application("chrome", f'"{url}"')
                return f"‚úÖ –û—Ç–∫—Ä—ã—Ç URL –≤ Chrome: {url}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def execute_task(self, task_description: str, max_iterations: int = 20) -> str:
        """
        –ê–≤—Ç–æ–Ω–æ–º–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ
        
        Args:
            task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            max_iterations: –ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        logger.info(f"üéØ –ó–∞–¥–∞—á–∞: {task_description}")
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å
        if self.memory_manager:
            self.memory_manager.add_message(
                user_id=self.user_id,
                role="user",
                content=f"[Desktop Task] {task_description}"
            )
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = f"""–¢—ã MIRAI Desktop Agent - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π AI –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é (click, move, get_position)
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (type_text, press_key)
‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ Vision –∞–Ω–∞–ª–∏–∑ (take_screenshot, analyze_screenshot)
‚úÖ OCR - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (find_text_on_screen)
‚úÖ Computer Vision - –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (find_image_on_screen)
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ (open_application, find_window, activate_window)
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–º (browse_web)
‚úÖ –£—Ç–∏–ª–∏—Ç—ã (wait_seconds, get_mouse_position)

–°–ò–°–¢–ï–ú–ê:
- –û–°: {self.os_type}
- –≠–∫—Ä–∞–Ω: {self.screen_width}x{self.screen_height}
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {'–í–∫–ª—é—á–µ–Ω–∞' if self.enable_safety else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}

–í–ê–ñ–ù–û:
1. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–µ–ª–∞–π –ø–∞—É–∑—É (wait_seconds 1-3 —Å–µ–∫)
2. –ò—Å–ø–æ–ª—å–∑—É–π —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
3. –ò—Å–ø–æ–ª—å–∑—É–π analyze_screenshot –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —á—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
4. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
5. –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω —Å –∫–ª–∏–∫–∞–º–∏ - –ø—Ä–æ–≤–µ—Ä—è–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

–ó–ê–î–ê–ß–ê: {task_description}

–î–µ–π—Å—Ç–≤—É–π —É–º–Ω–æ –∏ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ! –†–µ—à–∞–π –∑–∞–¥–∞—á—É –ø–æ—à–∞–≥–æ–≤–æ."""

        messages = [{"role": "system", "content": system_prompt}]
        
        for iteration in range(max_iterations):
            logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1}/{max_iterations}")
            
            try:
                # –ó–∞–ø—Ä–æ—Å –∫ GPT-4o
                response = self.client.chat.completions.create(
                    model=self.model,
                    messages=messages,
                    tools=self.tools,
                    tool_choice="auto",
                    temperature=0.7
                )
                
                response_message = response.choices[0].message
                messages.append(response_message)
                
                # –ï—Å–ª–∏ –Ω–µ—Ç tool calls - –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                if not response_message.tool_calls:
                    final_response = response_message.content or "–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {final_response}")
                    
                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å
                    if self.memory_manager:
                        self.memory_manager.add_message(
                            user_id=self.user_id,
                            role="assistant",
                            content=f"[Desktop Result] {final_response}"
                        )
                    
                    return final_response
                
                # –í—ã–ø–æ–ª–Ω–∏—Ç—å tool calls
                for tool_call in response_message.tool_calls:
                    function_name = tool_call.function.name
                    function_args = json.loads(tool_call.function.arguments)
                    
                    logger.info(f"üîß –í—ã–∑–æ–≤: {function_name}({function_args})")
                    
                    # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
                    result = self._execute_function(function_name, function_args)
                    
                    logger.info(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
                    
                    # –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    messages.append({
                        "tool_call_id": tool_call.id,
                        "role": "tool",
                        "name": function_name,
                        "content": result
                    })
            
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}: {e}"
                logger.error(error_msg, exc_info=True)
                return error_msg
        
        return "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π. –ó–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é."
    
    def _execute_function(self, name: str, args: Dict[str, Any]) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ –∏–º–µ–Ω–∏"""
        function_map = {
            "click_at_position": self.click_at_position,
            "type_text": self.type_text,
            "press_key": self.press_key,
            "move_mouse": self.move_mouse,
            "get_mouse_position": self.get_mouse_position,
            "take_screenshot": self.take_screenshot,
            "analyze_screenshot": self.analyze_screenshot,
            "find_text_on_screen": self.find_text_on_screen,
            "find_image_on_screen": self.find_image_on_screen,
            "open_application": self.open_application,
            "find_window": self.find_window,
            "activate_window": self.activate_window,
            "browse_web": self.browse_web,
            "wait_seconds": self.wait_seconds,
        }
        
        if name in function_map:
            return function_map[name](**args)
        else:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {name}"
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –£—Ç–∏–ª–∏—Ç—ã –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def _check_rate_limit(self, action_type: str, limit_per_minute: int, count: int = 1) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limit"""
        if not self.enable_safety:
            return True
        
        now = time.time()
        minute_ago = now - 60
        
        # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self._action_timestamps[action_type] = [
            t for t in self._action_timestamps[action_type]
            if t > minute_ago
        ]
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç
        if len(self._action_timestamps[action_type]) + count > limit_per_minute:
            logger.warning(f"Rate limit exceeded for {action_type}")
            return False
        
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ timestamps
        self._action_timestamps[action_type].extend([now] * count)
        return True
    
    def _log_action(
        self,
        action_type: str,
        params: Dict[str, Any],
        result: str,
        duration: float = 0.0,
        screenshot_path: Optional[str] = None
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"""
        action = DesktopAction(
            timestamp=time.time(),
            action_type=action_type,
            params=params,
            result=result,
            screenshot_path=screenshot_path,
            duration=duration
        )
        
        self.action_history.append(action)
        logger.info(f"Action logged: {action_type}")
    
    def get_action_history(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π"""
        return [action.to_dict() for action in self.action_history[-limit:]]
    
    def save_action_history(self, filepath: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(self.get_action_history(limit=1000), f, indent=2, ensure_ascii=False)
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def collect_learning_data(self) -> Dict[str, Any]:
        """
        –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è MIRAI
        
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω, –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π
        –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        """
        logger.info("üß† MIRAI —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è...")
        
        learning_data = {
            "timestamp": time.time(),
            "screen_analysis": {},
            "open_windows": [],
            "user_patterns": [],
            "action_insights": [],
            "learning_opportunities": []
        }
        
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ Vision
            screenshot_result = self.take_screenshot()
            if "‚úÖ" in screenshot_result:
                vision_analysis = self.analyze_screenshot(
                    "–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ. "
                    "–ö–∞–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã? –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å? "
                    "–ï—Å—Ç—å –ª–∏ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è?"
                )
                learning_data["screen_analysis"] = {
                    "description": vision_analysis,
                    "screenshot_path": self.last_screenshot_path
                }
            
            # 2. –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω
            if WINDOWS_API_AVAILABLE:
                windows = self._get_all_windows()
                learning_data["open_windows"] = [
                    {
                        "title": w.title,
                        "class_name": w.class_name,
                        "process_name": w.process_name
                    } for w in windows[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 10 –æ–∫–æ–Ω
                ]
            
            # 3. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
            if len(self.action_history) > 5:
                recent_actions = self.action_history[-10:]
                action_types = [a.action_type for a in recent_actions]
                
                # –ù–∞–π—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                if action_types.count("screenshot") > 3:
                    learning_data["user_patterns"].append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∞—Å—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã")
                
                if action_types.count("click") > 5:
                    learning_data["user_patterns"].append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ –∫–ª–∏–∫–∞–µ—Ç –º—ã—à—å—é")
                
                if "analyze_screenshot" in action_types:
                    learning_data["user_patterns"].append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Vision –∞–Ω–∞–ª–∏–∑")
            
            # 4. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
            learning_data["learning_opportunities"] = [
                "–ò–∑—É—á–∏—Ç—å —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π",
                "–ü—Ä–µ–¥—É–≥–∞–¥—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "–£–ª—É—á—à–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —ç–∫—Ä–∞–Ω–∞"
            ]
            
            # 5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if self.memory_manager:
                from core.memory_manager import Message
                learning_summary = f"–°–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è: {len(learning_data['open_windows'])} –æ–∫–æ–Ω, –∞–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–∞, {len(learning_data['user_patterns'])} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"
                
                msg = Message(
                    session_id=self.memory_manager.create_session(user_id=self.user_id).id,
                    role="system",
                    content=f"[LEARNING DATA] {learning_summary}",
                    metadata=learning_data
                )
                self.memory_manager.add_message(msg)
            
            logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(learning_data)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è")
            return learning_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è: {e}")
            return {"error": str(e)}
    
    def autonomous_learning_loop(self, interval_minutes: int = 30):
        """
        –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è
        
        –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–≤–æ–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        """
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval_minutes} –º–∏–Ω)")
        
        while True:
            try:
                # –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                learning_data = self.collect_learning_data()
                
                # –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ª—É—á—à–∏—Ç—å —Å–µ–±—è
                if learning_data.get("screen_analysis"):
                    self._learn_from_screen_analysis(learning_data["screen_analysis"])
                
                if learning_data.get("user_patterns"):
                    self._learn_from_patterns(learning_data["user_patterns"])
                
                # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                self._save_learning_progress(learning_data)
                
                logger.info(f"üß† –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {interval_minutes} –º–∏–Ω")
                
                # –ü–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                time.sleep(interval_minutes * 60)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
                time.sleep(300)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _learn_from_screen_analysis(self, screen_data: Dict):
        """–ò–∑–≤–ª–µ—á—å —É—Ä–æ–∫–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞"""
        description = screen_data.get("description", "")
        
        # –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if "chrome" in description.lower():
            logger.info("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Chrome - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        
        if "vscode" in description.lower() or "code" in description.lower():
            logger.info("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VS Code - —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    def _learn_from_patterns(self, patterns: List[str]):
        """–ò–∑–≤–ª–µ—á—å —É—Ä–æ–∫–∏ –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        for pattern in patterns:
            if "—Å–∫—Ä–∏–Ω—à–æ—Ç—ã" in pattern:
                logger.info("üì∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∞—Å—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã - —É–ª—É—á—à–∏—Ç—å Vision –∞–Ω–∞–ª–∏–∑")
            
            if "–∫–ª–∏–∫–∞–µ—Ç" in pattern:
                logger.info("üñ±Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º—ã—à—å - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫–∏")
    
    def _save_learning_progress(self, learning_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è"""
        try:
            progress_file = Path("learning_progress.json")
            if progress_file.exists():
                with open(progress_file, 'r', encoding='utf-8') as f:
                    progress = json.load(f)
            else:
                progress = {"sessions": []}
            
            progress["sessions"].append({
                "timestamp": learning_data["timestamp"],
                "insights": len(learning_data.get("action_insights", [])),
                "patterns": len(learning_data.get("user_patterns", [])),
                "opportunities": learning_data.get("learning_opportunities", [])
            })
            
            with open(progress_file, 'w', encoding='utf-8') as f:
                json.dump(progress, f, indent=2, ensure_ascii=False)
            
            logger.info("üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def main():
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Desktop Agent"""
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë         MIRAI Desktop Agent V2 - –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ü–ö            ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print()
    
    try:
        # –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
        agent = MiraiDesktopAgent(
            enable_safety=True,
            enable_memory=True
        )
        
        print(f"üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞: {agent.os_type}")
        print(f"üìê –≠–∫—Ä–∞–Ω: {agent.screen_width}x{agent.screen_height}")
        print(f"üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –í–∫–ª—é—á–µ–Ω–∞")
        print(f"üß† –ü–∞–º—è—Ç—å: {'–í–∫–ª—é—á–µ–Ω–∞' if agent.enable_memory else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        print()
        
        # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á
        examples = [
            "–û—Ç–∫—Ä–æ–π Chrome –∏ –Ω–∞–π–¥–∏ –≤ Google '–ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ'",
            "–û—Ç–∫—Ä–æ–π Notepad –∏ –Ω–∞–ø–∏—à–∏ 'Hello from MIRAI'",
            "–°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –æ–ø–∏—à–∏ —á—Ç–æ –Ω–∞ –Ω–µ–º",
            "–ù–∞–π–¥–∏ –æ–∫–Ω–æ Chrome –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞ –Ω–µ–≥–æ",
            "–û—Ç–∫—Ä–æ–π Calculator",
        ]
        
        print("üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:")
        for i, example in enumerate(examples, 1):
            print(f"  {i}. {example}")
        print()
        
        print("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
        print("-" * 70)
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        while True:
            try:
                task = input("\nüéØ –ó–∞–¥–∞—á–∞: ").strip()
                
                if task.lower() in ['exit', 'quit', 'q']:
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                if not task:
                    continue
                
                print("\nü§î –ê–≥–µ–Ω—Ç –¥—É–º–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É...")
                print("-" * 70)
                
                result = agent.execute_task(task)
                
                print("\n" + "=" * 70)
                print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
                print("=" * 70)
                print(result)
                print("=" * 70)
                
                # –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π
                if len(agent.action_history) > 0:
                    print("\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
                    for action in agent.action_history[-5:]:
                        print(f"  ‚Ä¢ {action.action_type}: {action.result[:50]}")
            
            except KeyboardInterrupt:
                print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
                logger.error("Error in main loop", exc_info=True)
    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        logger.error("Initialization error", exc_info=True)
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
