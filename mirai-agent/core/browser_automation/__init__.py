"""
üåê BROWSER AUTOMATION - –§–ê–ó–ê 5 (200 –®–ê–ì–û–í)
–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫

–ú–æ–¥—É–ª–∏:
- browser_detection.py: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ (–®–∞–≥–∏ 1-15)
- profile_management.py: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ Chrome (–®–∞–≥–∏ 16-40)
- navigation.py: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü (–®–∞–≥–∏ 41-60)
- form_interaction.py: –ü–æ–∏—Å–∫ –∏ —Ä–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º–∞–º–∏ (–®–∞–≥–∏ 61-90)
- ads_popup_handling.py: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º—ã –∏ –ø–æ–ø–∞–ø–æ–≤ (–®–∞–≥–∏ 91-110)
- downloads_uploads.py: –ó–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (–®–∞–≥–∏ 111-130)
- media_capture.py: –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –∑–∞–ø–∏—Å—å (–®–∞–≥–∏ 131-140)
- cookie_management.py: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ cookies –∏ –∫–µ—à–µ–º (–®–∞–≥–∏ 141-160)
- security_privacy.py: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å (–®–∞–≥–∏ 161-180)
- testing_integration.py: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–®–∞–≥–∏ 181-200)
"""

__version__ = "1.0.0"
__author__ = "MIRAI Team"

# Lazy imports to avoid circular dependencies
def __getattr__(name):
    """–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π"""
    if name in _BROWSER_DETECTION_CLASSES:
        from .browser_detection import (
            BrowserDetector,
            BrowserVersionChecker,
            CompatibilityChecker,
            BrowserExecutableLocator,
            BrowserConfigLoader,
            WebDriverInitializer,
            BrowserLogger,
            BrowserSessionManager,
            BrowserReadinessChecker,
            BrowserMonitor,
            ExtensionLoader,
            PermissionConfigurator,
            ProxyConfigurator,
            CookieManager,
            BrowserStartupValidator,
        )
        return locals()[name]
    
    elif name in _PROFILE_MANAGEMENT_CLASSES:
        from .profile_management import (
            ChromeProfileDetector,
            ChromeProfileParser,
            ProfileMetadataReader,
            ProfileIdentifier,
            ProfilePathExtractor,
            ActiveProfileDetector,
            ProfileSelectionUI,
            ProfileClickHandler,
            SelectionConfirmationDetector,
            ProfileLoadWaiter,
            ProfileVerifier,
            ProfileSwitcher,
            ProfilePreferenceManager,
            MissingProfileHandler,
            ProfileSelectionRecovery,
            ProfileSettingsLoader,
            ProfileSyncManager,
            IncognitoModeHandler,
            FirstTimeProfileDetector,
            ProfileSelectionValidator,
            ProfileContextStorage,
            ProfileLockHandler,
            ProfileChangeMonitor,
            ProfileStateBackup,
            ProfileSetupValidator,
        )
        return locals()[name]
    
    raise AttributeError(f"module '{__name__}' has no attribute '{name}'")

# Browser Detection (Steps 1-15)
_BROWSER_DETECTION_CLASSES = {
    "BrowserDetector",
    "BrowserVersionChecker",
    "CompatibilityChecker",
    "BrowserExecutableLocator",
    "BrowserConfigLoader",
    "WebDriverInitializer",
    "BrowserLogger",
    "BrowserSessionManager",
    "BrowserReadinessChecker",
    "BrowserMonitor",
    "ExtensionLoader",
    "PermissionConfigurator",
    "ProxyConfigurator",
    "CookieManager",
    "BrowserStartupValidator",
}

# Profile Management (Steps 16-40)
_PROFILE_MANAGEMENT_CLASSES = {
    "ChromeProfileDetector",
    "ChromeProfileParser",
    "ProfileMetadataReader",
    "ProfileIdentifier",
    "ProfilePathExtractor",
    "ActiveProfileDetector",
    "ProfileSelectionUI",
    "ProfileClickHandler",
    "SelectionConfirmationDetector",
    "ProfileLoadWaiter",
    "ProfileVerifier",
    "ProfileSwitcher",
    "ProfilePreferenceManager",
    "MissingProfileHandler",
    "ProfileSelectionRecovery",
    "ProfileSettingsLoader",
    "ProfileSyncManager",
    "IncognitoModeHandler",
    "FirstTimeProfileDetector",
    "ProfileSelectionValidator",
    "ProfileContextStorage",
    "ProfileLockHandler",
    "ProfileChangeMonitor",
    "ProfileStateBackup",
    "ProfileSetupValidator",
}

__all__ = list(_BROWSER_DETECTION_CLASSES | _PROFILE_MANAGEMENT_CLASSES)
