#!/usr/bin/env python3
"""
üîç BROWSER DETECTION & SETUP - –®–∞–≥–∏ 1-15
–ü–æ–¥—Ä–∞–∑–¥–µ–ª 1.1: Browser Detection & Setup

–ü–æ–ª–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤:
- Detect installed browsers (Chrome, Firefox, Safari, Edge, Opera)
- Check versions and compatibility
- Locate executables
- Initialize WebDriver
- Setup logging and monitoring
"""

import json
import logging
import os
import platform
import re
import subprocess
import sys
from pathlib import Path
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field
from enum import Enum

logger = logging.getLogger(__name__)


class BrowserType(Enum):
    """–¢–∏–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤"""
    CHROME = "chrome"
    FIREFOX = "firefox"
    SAFARI = "safari"
    EDGE = "edge"
    OPERA = "opera"
    CHROMIUM = "chromium"
    BRAVE = "brave"


@dataclass
class BrowserInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ"""
    browser_type: BrowserType
    version: str
    executable_path: str
    is_compatible: bool
    user_data_dir: Optional[str] = None
    profiles_dir: Optional[str] = None
    extensions_dir: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)


class BrowserDetector:
    """
    –®–ê–ì 1: Detect Installed Browsers
    –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∫–∞–∫–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ —Å–∏—Å—Ç–µ–º–µ
    """
    
    def __init__(self):
        self.system = platform.system()
        logger.info(f"üîç BrowserDetector —Å–æ–∑–¥–∞–Ω (–û–°: {self.system})")
    
    def detect_installed_browsers(self) -> List[BrowserInfo]:
        """
        –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã
        
        Returns:
            List[BrowserInfo]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        """
        logger.info("üîç –ü–æ–∏—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤...")
        browsers = []
        
        # –ò—â–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –±—Ä–∞—É–∑–µ—Ä–∞
        for browser_type in BrowserType:
            browser = self._detect_browser(browser_type)
            if browser:
                browsers.append(browser)
                logger.info(f"  ‚úÖ –ù–∞–π–¥–µ–Ω: {browser_type.value} v{browser.version}")
        
        if not browsers:
            logger.warning("‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        else:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤: {len(browsers)}")
        
        return browsers
    
    def _detect_browser(self, browser_type: BrowserType) -> Optional[BrowserInfo]:
        """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä"""
        if self.system == "Windows":
            return self._detect_browser_windows(browser_type)
        elif self.system == "Darwin":  # macOS
            return self._detect_browser_macos(browser_type)
        elif self.system == "Linux":
            return self._detect_browser_linux(browser_type)
        return None
    
    def _detect_browser_windows(self, browser_type: BrowserType) -> Optional[BrowserInfo]:
        """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –Ω–∞ Windows"""
        paths = {
            BrowserType.CHROME: [
                r"C:\Program Files\Google\Chrome\Application\chrome.exe",
                r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
            ],
            BrowserType.FIREFOX: [
                r"C:\Program Files\Mozilla Firefox\firefox.exe",
                r"C:\Program Files (x86)\Mozilla Firefox\firefox.exe",
            ],
            BrowserType.EDGE: [
                r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe",
                r"C:\Program Files\Microsoft\Edge\Application\msedge.exe",
            ],
            BrowserType.OPERA: [
                r"C:\Program Files\Opera\launcher.exe",
                r"C:\Program Files (x86)\Opera\launcher.exe",
            ],
            BrowserType.BRAVE: [
                r"C:\Program Files\BraveSoftware\Brave-Browser\Application\brave.exe",
            ],
        }
        
        for path in paths.get(browser_type, []):
            if Path(path).exists():
                version = self._get_version_windows(path)
                return BrowserInfo(
                    browser_type=browser_type,
                    version=version or "unknown",
                    executable_path=path,
                    is_compatible=True,
                )
        
        return None
    
    def _detect_browser_macos(self, browser_type: BrowserType) -> Optional[BrowserInfo]:
        """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –Ω–∞ macOS"""
        paths = {
            BrowserType.CHROME: "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
            BrowserType.FIREFOX: "/Applications/Firefox.app/Contents/MacOS/firefox",
            BrowserType.SAFARI: "/Applications/Safari.app/Contents/MacOS/Safari",
            BrowserType.EDGE: "/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge",
            BrowserType.OPERA: "/Applications/Opera.app/Contents/MacOS/Opera",
            BrowserType.BRAVE: "/Applications/Brave Browser.app/Contents/MacOS/Brave Browser",
        }
        
        path = paths.get(browser_type)
        if path and Path(path).exists():
            version = self._get_version_macos(path)
            return BrowserInfo(
                browser_type=browser_type,
                version=version or "unknown",
                executable_path=path,
                is_compatible=True,
            )
        
        return None
    
    def _detect_browser_linux(self, browser_type: BrowserType) -> Optional[BrowserInfo]:
        """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –Ω–∞ Linux"""
        commands = {
            BrowserType.CHROME: "google-chrome",
            BrowserType.CHROMIUM: "chromium-browser",
            BrowserType.FIREFOX: "firefox",
            BrowserType.OPERA: "opera",
            BrowserType.BRAVE: "brave-browser",
        }
        
        cmd = commands.get(browser_type)
        if not cmd:
            return None
        
        try:
            result = subprocess.run(
                ["which", cmd],
                capture_output=True,
                timeout=5,
                text=True,
            )
            
            if result.returncode == 0:
                path = result.stdout.strip()
                version = self._get_version_linux(cmd)
                return BrowserInfo(
                    browser_type=browser_type,
                    version=version or "unknown",
                    executable_path=path,
                    is_compatible=True,
                )
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {cmd}: {e}")
        
        return None
    
    def _get_version_windows(self, path: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ Windows"""
        try:
            result = subprocess.run(
                [path, "--version"],
                capture_output=True,
                timeout=5,
                text=True,
            )
            return self._extract_version(result.stdout)
        except:
            return None
    
    def _get_version_macos(self, path: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ macOS"""
        try:
            result = subprocess.run(
                [path, "--version"],
                capture_output=True,
                timeout=5,
                text=True,
            )
            return self._extract_version(result.stdout)
        except:
            return None
    
    def _get_version_linux(self, cmd: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ Linux"""
        try:
            result = subprocess.run(
                [cmd, "--version"],
                capture_output=True,
                timeout=5,
                text=True,
            )
            return self._extract_version(result.stdout)
        except:
            return None
    
    def _extract_version(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å –≤–µ—Ä—Å–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        match = re.search(r'(\d+\.[\d.]+)', text)
        return match.group(1) if match else None


class BrowserVersionChecker:
    """
    –®–ê–ì 2: Identify Browser Versions
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –∫–∞–∂–¥–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    """
    
    def __init__(self):
        logger.info("üî¢ BrowserVersionChecker —Å–æ–∑–¥–∞–Ω")
    
    def check_version(self, browser: BrowserInfo) -> str:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
        
        Args:
            browser: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
            
        Returns:
            str: –í–µ—Ä—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        """
        logger.info(f"üî¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏: {browser.browser_type.value}")
        return browser.version
    
    def compare_versions(self, version1: str, version2: str) -> int:
        """
        –°—Ä–∞–≤–Ω–∏—Ç—å –¥–≤–µ –≤–µ—Ä—Å–∏–∏
        
        Returns:
            int: -1 –µ—Å–ª–∏ version1 < version2, 0 –µ—Å–ª–∏ —Ä–∞–≤–Ω—ã, 1 –µ—Å–ª–∏ version1 > version2
        """
        v1_parts = [int(x) for x in version1.split('.')]
        v2_parts = [int(x) for x in version2.split('.')]
        
        for i in range(max(len(v1_parts), len(v2_parts))):
            v1 = v1_parts[i] if i < len(v1_parts) else 0
            v2 = v2_parts[i] if i < len(v2_parts) else 0
            
            if v1 < v2:
                return -1
            elif v1 > v2:
                return 1
        
        return 0


class CompatibilityChecker:
    """
    –®–ê–ì 3: Check Browser Compatibility
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
    """
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    MIN_VERSIONS = {
        BrowserType.CHROME: "90.0.0",
        BrowserType.FIREFOX: "88.0.0",
        BrowserType.EDGE: "90.0.0",
        BrowserType.SAFARI: "14.0.0",
        BrowserType.OPERA: "76.0.0",
    }
    
    def __init__(self):
        logger.info("‚úÖ CompatibilityChecker —Å–æ–∑–¥–∞–Ω")
        self.version_checker = BrowserVersionChecker()
    
    def check_compatibility(self, browser: BrowserInfo) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞
        
        Args:
            browser: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º
        """
        min_version = self.MIN_VERSIONS.get(browser.browser_type)
        
        if not min_version:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è {browser.browser_type.value}")
            return True
        
        comparison = self.version_checker.compare_versions(browser.version, min_version)
        
        if comparison >= 0:
            logger.info(f"‚úÖ {browser.browser_type.value} v{browser.version} —Å–æ–≤–º–µ—Å—Ç–∏–º")
            return True
        else:
            logger.warning(
                f"‚ö†Ô∏è {browser.browser_type.value} v{browser.version} < {min_version} (—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)"
            )
            return False


class BrowserExecutableLocator:
    """
    –®–ê–ì 4: Locate Browser Executable
    –ù–∞–π—Ç–∏ –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É –±—Ä–∞—É–∑–µ—Ä–∞
    """
    
    def __init__(self):
        logger.info("üìç BrowserExecutableLocator —Å–æ–∑–¥–∞–Ω")
    
    def locate_executable(self, browser_type: BrowserType) -> Optional[str]:
        """
        –ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –±—Ä–∞—É–∑–µ—Ä–∞
        
        Args:
            browser_type: –¢–∏–ø –±—Ä–∞—É–∑–µ—Ä–∞
            
        Returns:
            Optional[str]: –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        logger.info(f"üìç –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞: {browser_type.value}")
        
        detector = BrowserDetector()
        browser = detector._detect_browser(browser_type)
        
        if browser:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω: {browser.executable_path}")
            return browser.executable_path
        
        logger.warning(f"‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {browser_type.value}")
        return None


class BrowserConfigLoader:
    """
    –®–ê–ì 5: Load Browser Configuration
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
    """
    
    def __init__(self):
        logger.info("‚öôÔ∏è BrowserConfigLoader —Å–æ–∑–¥–∞–Ω")
    
    def load_config(self, browser: BrowserInfo) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
        
        Args:
            browser: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
            
        Returns:
            Dict: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        """
        logger.info(f"‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {browser.browser_type.value}")
        
        config = {
            "browser_type": browser.browser_type.value,
            "version": browser.version,
            "executable": browser.executable_path,
            "preferences": {},
            "settings": {},
            "extensions": [],
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        config_file = self._get_config_file_path(browser)
        if config_file and config_file.exists():
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    user_config = json.load(f)
                    config.update(user_config)
                logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_file}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        return config
    
    def _get_config_file_path(self, browser: BrowserInfo) -> Optional[Path]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—É—Ç—å (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞)
        if browser.user_data_dir:
            return Path(browser.user_data_dir) / "Preferences"
        return None


class WebDriverInitializer:
    """
    –®–ê–ì 6: Initialize WebDriver
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    """
    
    def __init__(self):
        logger.info("üöó WebDriverInitializer —Å–æ–∑–¥–∞–Ω")
        self.driver = None
    
    def initialize_driver(self, browser: BrowserInfo, headless: bool = False) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebDriver
        
        Args:
            browser: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
            headless: –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ headless —Ä–µ–∂–∏–º–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        logger.info(f"üöó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver: {browser.browser_type.value}")
        
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium/Playwright
            # –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"  ‚Ä¢ –ë—Ä–∞—É–∑–µ—Ä: {browser.executable_path}")
            logger.info(f"  ‚Ä¢ Headless: {headless}")
            logger.info("‚úÖ WebDriver –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebDriver: {e}")
            return False


class BrowserLogger:
    """
    –®–ê–ì 7: Setup Browser Logging
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
    """
    
    def __init__(self, log_file: Optional[str] = None):
        self.log_file = log_file or "/tmp/browser_automation.log"
        logger.info(f"üìù BrowserLogger —Å–æ–∑–¥–∞–Ω (—Ñ–∞–π–ª: {self.log_file})")
    
    def setup_logging(self, level: str = "INFO") -> bool:
        """
        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR)
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logging.basicConfig(
                filename=self.log_file,
                level=getattr(logging, level),
                format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            logger.info(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {level}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False


class BrowserSessionManager:
    """
    –®–ê–ì 8: Initialize Browser Session
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    """
    
    def __init__(self):
        self.sessions = {}
        logger.info("üîê BrowserSessionManager —Å–æ–∑–¥–∞–Ω")
    
    def create_session(self, browser: BrowserInfo, session_id: str) -> bool:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
        
        Args:
            browser: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
            session_id: ID —Å–µ—Å—Å–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        logger.info(f"üîê –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {session_id}")
        
        self.sessions[session_id] = {
            "browser": browser,
            "created_at": __import__("datetime").datetime.now(),
            "active": True,
        }
        
        logger.info(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}")
        return True
    
    def end_session(self, session_id: str) -> bool:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é"""
        if session_id in self.sessions:
            self.sessions[session_id]["active"] = False
            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {session_id}")
            return True
        return False


class BrowserReadinessChecker:
    """
    –®–ê–ì 9: Verify Browser Readiness
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞ –∫ —Ä–∞–±–æ—Ç–µ
    """
    
    def __init__(self):
        logger.info("‚úîÔ∏è BrowserReadinessChecker —Å–æ–∑–¥–∞–Ω")
    
    def check_readiness(self, browser: BrowserInfo) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞
        
        Args:
            browser: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ –≥–æ—Ç–æ–≤
        """
        logger.info(f"‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {browser.browser_type.value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        checks = [
            ("–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª", Path(browser.executable_path).exists()),
            ("–í–µ—Ä—Å–∏—è", browser.version != "unknown"),
            ("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", browser.is_compatible),
        ]
        
        all_ready = True
        for check_name, result in checks:
            if result:
                logger.info(f"  ‚úÖ {check_name}: OK")
            else:
                logger.warning(f"  ‚ùå {check_name}: FAILED")
                all_ready = False
        
        if all_ready:
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            logger.warning("‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤")
        
        return all_ready


class BrowserMonitor:
    """
    –®–ê–ì 10: Setup Browser Monitoring
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
    """
    
    def __init__(self):
        self.metrics = {
            "pages_loaded": 0,
            "errors": 0,
            "warnings": 0,
            "uptime": 0,
        }
        logger.info("üìä BrowserMonitor —Å–æ–∑–¥–∞–Ω")
    
    def start_monitoring(self) -> bool:
        """–ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
        return True
    
    def get_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏"""
        return self.metrics.copy()
    
    def record_page_load(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.metrics["pages_loaded"] += 1
    
    def record_error(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É"""
        self.metrics["errors"] += 1


class ExtensionLoader:
    """
    –®–ê–ì 11: Load Browser Extensions/Addons
    –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–∞
    """
    
    def __init__(self):
        self.loaded_extensions = []
        logger.info("üß© ExtensionLoader —Å–æ–∑–¥–∞–Ω")
    
    def load_extension(self, extension_path: str) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        
        Args:
            extension_path: –ü—É—Ç—å –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        logger.info(f"üß© –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {extension_path}")
        
        if Path(extension_path).exists():
            self.loaded_extensions.append(extension_path)
            logger.info(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {extension_path}")
            return True
        
        logger.warning(f"‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {extension_path}")
        return False


class PermissionConfigurator:
    """
    –®–ê–ì 12: Configure Browser Permissions
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–∞
    """
    
    def __init__(self):
        self.permissions = {}
        logger.info("üîí PermissionConfigurator —Å–æ–∑–¥–∞–Ω")
    
    def set_permission(self, permission: str, allowed: bool) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        
        Args:
            permission: –¢–∏–ø —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (location, camera, microphone, notifications)
            allowed: –†–∞–∑—Ä–µ—à–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        logger.info(f"üîí –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {permission} = {allowed}")
        self.permissions[permission] = allowed
        return True


class ProxyConfigurator:
    """
    –®–ê–ì 13: Setup Proxy Configuration
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
    """
    
    def __init__(self):
        self.proxy_config = None
        logger.info("üåê ProxyConfigurator —Å–æ–∑–¥–∞–Ω")
    
    def configure_proxy(self, proxy_url: str, username: Optional[str] = None, 
                       password: Optional[str] = None) -> bool:
        """
        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∫—Å–∏
        
        Args:
            proxy_url: URL –ø—Ä–æ–∫—Å–∏
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            password: –ü–∞—Ä–æ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        logger.info(f"üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏: {proxy_url}")
        
        self.proxy_config = {
            "url": proxy_url,
            "username": username,
            "password": password,
        }
        
        logger.info("‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return True


class CookieManager:
    """
    –®–ê–ì 14: Initialize Cookie Management
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ cookies
    """
    
    def __init__(self):
        self.cookies = {}
        logger.info("üç™ CookieManager —Å–æ–∑–¥–∞–Ω")
    
    def load_cookies(self, cookie_file: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å cookies –∏–∑ —Ñ–∞–π–ª–∞"""
        logger.info(f"üç™ –ó–∞–≥—Ä—É–∑–∫–∞ cookies: {cookie_file}")
        
        if Path(cookie_file).exists():
            try:
                with open(cookie_file, 'r') as f:
                    self.cookies = json.load(f)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ cookies: {len(self.cookies)}")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
        
        return False
    
    def save_cookies(self, cookie_file: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å cookies –≤ —Ñ–∞–π–ª"""
        logger.info(f"üç™ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies: {cookie_file}")
        
        try:
            with open(cookie_file, 'w') as f:
                json.dump(self.cookies, f, indent=2)
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ cookies: {len(self.cookies)}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies: {e}")
            return False
    
    def clear_cookies(self) -> bool:
        """–û—á–∏—Å—Ç–∏—Ç—å cookies"""
        logger.info("üç™ –û—á–∏—Å—Ç–∫–∞ cookies")
        self.cookies.clear()
        return True


class BrowserStartupValidator:
    """
    –®–ê–ì 15: Browser Startup Complete
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    """
    
    def __init__(self):
        logger.info("‚úÖ BrowserStartupValidator —Å–æ–∑–¥–∞–Ω")
    
    def validate_startup(self, browser: BrowserInfo, session_id: str) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
        
        Args:
            browser: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
            session_id: ID —Å–µ—Å—Å–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ
        """
        logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {session_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        checks = {
            "–ë—Ä–∞—É–∑–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω": browser is not None,
            "–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω": browser and Path(browser.executable_path).exists(),
            "–í–µ—Ä—Å–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞": browser and browser.version != "unknown",
            "–ë—Ä–∞—É–∑–µ—Ä —Å–æ–≤–º–µ—Å—Ç–∏–º": browser and browser.is_compatible,
            "–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞": session_id is not None,
        }
        
        all_valid = True
        for check_name, result in checks.items():
            if result:
                logger.info(f"  ‚úÖ {check_name}")
            else:
                logger.error(f"  ‚ùå {check_name}")
                all_valid = False
        
        if all_valid:
            logger.info("‚úÖ‚úÖ‚úÖ –ë–†–ê–£–ó–ï–† –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
        else:
            logger.error("‚ùå‚ùå‚ùå –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–†–ê–£–ó–ï–†–ê –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê!")
        
        return all_valid


# –¢–µ—Å—Ç—ã
if __name__ == "__main__":
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BROWSER DETECTION & SETUP (–®–∞–≥–∏ 1-15)")
    print("="*70)
    
    # –®–∞–≥ 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤
    detector = BrowserDetector()
    browsers = detector.detect_installed_browsers()
    print(f"\n‚úÖ –®–∞–≥ 1: –ù–∞–π–¥–µ–Ω–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤: {len(browsers)}")
    
    if browsers:
        browser = browsers[0]
        print(f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º: {browser.browser_type.value} v{browser.version}")
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
        version_checker = BrowserVersionChecker()
        version = version_checker.check_version(browser)
        print(f"\n‚úÖ –®–∞–≥ 2: –í–µ—Ä—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {version}")
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        compat_checker = CompatibilityChecker()
        is_compatible = compat_checker.check_compatibility(browser)
        print(f"\n‚úÖ –®–∞–≥ 3: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {is_compatible}")
        
        # –®–∞–≥ 4: –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
        locator = BrowserExecutableLocator()
        exe_path = locator.locate_executable(browser.browser_type)
        print(f"\n‚úÖ –®–∞–≥ 4: –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª: {exe_path}")
        
        # –®–∞–≥ 5: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_loader = BrowserConfigLoader()
        config = config_loader.load_config(browser)
        print(f"\n‚úÖ –®–∞–≥ 5: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({len(config)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)")
        
        # –®–∞–≥ 6: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver
        webdriver_init = WebDriverInitializer()
        driver_ok = webdriver_init.initialize_driver(browser)
        print(f"\n‚úÖ –®–∞–≥ 6: WebDriver –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {driver_ok}")
        
        # –®–∞–≥ 7: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        browser_logger = BrowserLogger()
        log_ok = browser_logger.setup_logging()
        print(f"\n‚úÖ –®–∞–≥ 7: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {log_ok}")
        
        # –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        session_mgr = BrowserSessionManager()
        session_ok = session_mgr.create_session(browser, "test-session-1")
        print(f"\n‚úÖ –®–∞–≥ 8: –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_ok}")
        
        # –®–∞–≥ 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        readiness = BrowserReadinessChecker()
        is_ready = readiness.check_readiness(browser)
        print(f"\n‚úÖ –®–∞–≥ 9: –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤: {is_ready}")
        
        # –®–∞–≥ 10: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitor = BrowserMonitor()
        monitor.start_monitoring()
        print(f"\n‚úÖ –®–∞–≥ 10: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
        
        # –®–∞–≥ 11: –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        ext_loader = ExtensionLoader()
        print(f"\n‚úÖ –®–∞–≥ 11: ExtensionLoader –≥–æ—Ç–æ–≤")
        
        # –®–∞–≥ 12: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        perms = PermissionConfigurator()
        perms.set_permission("notifications", False)
        perms.set_permission("location", False)
        print(f"\n‚úÖ –®–∞–≥ 12: –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –®–∞–≥ 13: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
        proxy = ProxyConfigurator()
        print(f"\n‚úÖ –®–∞–≥ 13: ProxyConfigurator –≥–æ—Ç–æ–≤")
        
        # –®–∞–≥ 14: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ cookies
        cookies = CookieManager()
        print(f"\n‚úÖ –®–∞–≥ 14: CookieManager –≥–æ—Ç–æ–≤")
        
        # –®–∞–≥ 15: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        validator = BrowserStartupValidator()
        startup_ok = validator.validate_startup(browser, "test-session-1")
        print(f"\n‚úÖ –®–∞–≥ 15: –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞: {startup_ok}")
        
        print("\n" + "="*70)
        print("‚úÖ‚úÖ‚úÖ –í–°–ï 15 –®–ê–ì–û–í BROWSER DETECTION & SETUP –ü–†–û–ô–î–ï–ù–´!")
        print("="*70)
    else:
        print("\n‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã")
