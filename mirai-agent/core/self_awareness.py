#!/usr/bin/env python3
"""
ü™û –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –°–∞–º–æ–æ—Å–æ–∑–Ω–∞–Ω–∏–µ MIRAI
–ê–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, —É–ª—É—á—à–µ–Ω–∏–µ —Å–µ–±—è
"""

import json
import sqlite3
import statistics
from collections import Counter
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Tuple


class SelfAwareness:
    """
    –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è MIRAI:
    - –ê–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    - –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö/—Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω
    - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è —Å–µ–±—è
    """

    def __init__(
        self,
        memory_db: str = "/root/mirai/mirai-agent/data/long_term_memory.db",
        metrics_file: str = "/tmp/kaizen_mirai_metrics.jsonl",
    ):
        self.memory_db = Path(memory_db)
        self.metrics_file = Path(metrics_file)

    def analyze_performance(self, days: int = 7) -> Dict:
        """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π

        Returns:
            Dict —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        since = datetime.now() - timedelta(days=days)

        performance = {
            "period_days": days,
            "analyzed_at": datetime.now().isoformat(),
            "goals": self._analyze_goals(since),
            "achievements": self._analyze_achievements(since),
            "decisions": self._analyze_decisions(since),
            "metrics": self._analyze_metrics(since),
            "trends": self._identify_trends(since),
            "overall_score": 0.0,
        }

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É (0-100)
        performance["overall_score"] = self._calculate_overall_score(performance)

        return performance

    def _analyze_goals(self, since: datetime) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π"""
        conn = sqlite3.connect(self.memory_db)
        cursor = conn.cursor()

        since_str = since.isoformat()

        # –í—Å–µ–≥–æ —Ü–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM goals WHERE created_at >= ?", (since_str,))
        total_goals = cursor.fetchone()[0]

        # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
        cursor.execute(
            "SELECT COUNT(*) FROM goals WHERE status = 'completed' AND completed_at >= ?",
            (since_str,),
        )
        completed = cursor.fetchone()[0]

        # –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
        cursor.execute(
            "SELECT COUNT(*) FROM goals WHERE status = 'failed' AND completed_at >= ?",
            (since_str,),
        )
        failed = cursor.fetchone()[0]

        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
        cursor.execute("SELECT COUNT(*) FROM goals WHERE status = 'active'")
        active = cursor.fetchone()[0]

        # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π
        cursor.execute("SELECT AVG(priority) FROM goals WHERE status = 'active'")
        avg_priority = cursor.fetchone()[0] or 0

        conn.close()

        success_rate = (
            (completed / (completed + failed) * 100) if (completed + failed) > 0 else 0
        )

        return {
            "total": total_goals,
            "completed": completed,
            "failed": failed,
            "active": active,
            "success_rate": round(success_rate, 1),
            "avg_priority": round(avg_priority, 1),
        }

    def _analyze_achievements(self, since: datetime) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        conn = sqlite3.connect(self.memory_db)
        cursor = conn.cursor()

        since_str = since.isoformat()

        cursor.execute(
            "SELECT COUNT(*) FROM achievements WHERE created_at >= ?", (since_str,)
        )
        total = cursor.fetchone()[0]

        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º (–ø–∞—Ä—Å–∏–º description)
        cursor.execute(
            "SELECT description FROM achievements WHERE created_at >= ?", (since_str,)
        )
        descriptions = [row[0] for row in cursor.fetchall()]

        conn.close()

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        categories = {
            "auto_fix": len(
                [
                    d
                    for d in descriptions
                    if "auto-fix" in d.lower() or "pr" in d.lower()
                ]
            ),
            "learning": len(
                [
                    d
                    for d in descriptions
                    if "learn" in d.lower() or "–∏–∑—É—á–∏" in d.lower()
                ]
            ),
            "improvement": len(
                [
                    d
                    for d in descriptions
                    if "improve" in d.lower() or "—É–ª—É—á—à" in d.lower()
                ]
            ),
            "other": 0,
        }
        categories["other"] = total - sum(categories.values())

        return {
            "total": total,
            "categories": categories,
            "rate_per_day": round(total / max((datetime.now() - since).days, 1), 2),
        }

    def _analyze_decisions(self, since: datetime) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ—à–µ–Ω–∏–π"""
        conn = sqlite3.connect(self.memory_db)
        cursor = conn.cursor()

        since_str = since.isoformat()

        # –í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–∏–π
        cursor.execute(
            "SELECT COUNT(*) FROM decisions WHERE created_at >= ?", (since_str,)
        )
        total = cursor.fetchone()[0]

        # –û—Ü–µ–Ω—ë–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        cursor.execute(
            "SELECT COUNT(*), AVG(outcome_rating) FROM decisions WHERE evaluated_at >= ? AND outcome_rating IS NOT NULL",
            (since_str,),
        )
        row = cursor.fetchone()
        evaluated = row[0]
        avg_rating = row[1] or 0

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
        cursor.execute(
            "SELECT outcome_rating FROM decisions WHERE evaluated_at >= ? AND outcome_rating IS NOT NULL",
            (since_str,),
        )
        ratings = [row[0] for row in cursor.fetchall()]

        conn.close()

        rating_distribution = {
            "excellent": len([r for r in ratings if r >= 9]),  # 9-10
            "good": len([r for r in ratings if 7 <= r < 9]),  # 7-8
            "average": len([r for r in ratings if 5 <= r < 7]),  # 5-6
            "poor": len([r for r in ratings if r < 5]),  # 1-4
        }

        return {
            "total": total,
            "evaluated": evaluated,
            "avg_rating": round(avg_rating, 1),
            "distribution": rating_distribution,
        }

    def _analyze_metrics(self, since: datetime) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –∏–∑ JSONL —Ñ–∞–π–ª–∞"""
        if not self.metrics_file.exists():
            return {"cycles": 0, "errors": 0, "warnings": 0}

        metrics_data = []
        with open(self.metrics_file) as f:
            for line in f:
                try:
                    record = json.loads(line)
                    record_time = datetime.fromisoformat(record["timestamp"])
                    if record_time >= since:
                        metrics_data.append(record)
                except:
                    continue

        if not metrics_data:
            return {"cycles": 0, "errors": 0, "warnings": 0}

        total_cycles = len(metrics_data)
        total_errors = sum(m.get("errors", 0) for m in metrics_data)
        total_warnings = sum(m.get("warnings", 0) for m in metrics_data)

        return {
            "cycles": total_cycles,
            "errors": total_errors,
            "warnings": total_warnings,
            "error_rate": round(total_errors / max(total_cycles, 1), 2),
            "warning_rate": round(total_warnings / max(total_cycles, 1), 2),
        }

    def _identify_trends(self, since: datetime) -> Dict:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤"""
        # –ß–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        if not self.metrics_file.exists():
            return {"direction": "unknown", "confidence": 0}

        metrics_data = []
        with open(self.metrics_file) as f:
            for line in f:
                try:
                    record = json.loads(line)
                    record_time = datetime.fromisoformat(record["timestamp"])
                    if record_time >= since:
                        metrics_data.append(record)
                except:
                    continue

        if len(metrics_data) < 3:
            return {"direction": "insufficient_data", "confidence": 0}

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ –æ—à–∏–±–æ–∫
        errors = [m.get("errors", 0) for m in metrics_data]

        # –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–Ω–¥: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É –ø–µ—Ä–∏–æ–¥–∞
        mid = len(errors) // 2
        first_half_avg = statistics.mean(errors[:mid]) if errors[:mid] else 0
        second_half_avg = statistics.mean(errors[mid:]) if errors[mid:] else 0

        if second_half_avg < first_half_avg * 0.8:
            direction = "improving"  # –£–ª—É—á—à–µ–Ω–∏–µ (–º–µ–Ω—å—à–µ –æ—à–∏–±–æ–∫)
        elif second_half_avg > first_half_avg * 1.2:
            direction = "degrading"  # –£—Ö—É–¥—à–µ–Ω–∏–µ (–±–æ–ª—å—à–µ –æ—à–∏–±–æ–∫)
        else:
            direction = "stable"

        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç—Ä–µ–Ω–¥–µ (0-100)
        confidence = min(len(metrics_data) * 10, 100)

        return {
            "direction": direction,
            "confidence": confidence,
            "error_trend": f"{first_half_avg:.1f} ‚Üí {second_half_avg:.1f}",
        }

    def _calculate_overall_score(self, performance: Dict) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (0-100)"""
        scores = []

        # 1. Success rate —Ü–µ–ª–µ–π (–≤–µ—Å 30%)
        goal_success = performance["goals"]["success_rate"]
        scores.append(goal_success * 0.3)

        # 2. –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π (–≤–µ—Å 25%)
        decision_quality = performance["decisions"]["avg_rating"] * 10  # 0-100
        scores.append(decision_quality * 0.25)

        # 3. –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–≤–µ—Å 20%)
        achievements_score = min(performance["achievements"]["rate_per_day"] * 20, 100)
        scores.append(achievements_score * 0.2)

        # 4. –ù–∏–∑–∫–∏–π error rate (–≤–µ—Å 15%)
        error_rate = performance["metrics"]["error_rate"]
        error_score = max(0, 100 - error_rate * 20)
        scores.append(error_score * 0.15)

        # 5. –¢—Ä–µ–Ω–¥ —É–ª—É—á—à–µ–Ω–∏—è (–≤–µ—Å 10%)
        trend = performance["trends"]["direction"]
        trend_score = {
            "improving": 100,
            "stable": 70,
            "degrading": 30,
            "unknown": 50,
        }.get(trend, 50)
        scores.append(trend_score * 0.1)

        return round(sum(scores), 1)

    def identify_strengths(self) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã"""
        performance = self.analyze_performance(days=7)
        strengths = []

        # –í—ã—Å–æ–∫–∏–π success rate —Ü–µ–ª–µ–π
        if performance["goals"]["success_rate"] >= 80:
            strengths.append(
                f"–û—Ç–ª–∏—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π ({performance['goals']['success_rate']:.0f}% success rate)"
            )

        # –ú–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if performance["achievements"]["rate_per_day"] >= 2:
            strengths.append(
                f"–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ({performance['achievements']['rate_per_day']:.1f} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π/–¥–µ–Ω—å)"
            )

        # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        if performance["decisions"]["avg_rating"] >= 8:
            strengths.append(
                f"–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π (avg {performance['decisions']['avg_rating']:.1f}/10)"
            )

        # –ù–∏–∑–∫–∏–π error rate
        if performance["metrics"]["error_rate"] <= 0.5:
            strengths.append(
                f"–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (error rate {performance['metrics']['error_rate']:.2f})"
            )

        # –¢—Ä–µ–Ω–¥ —É–ª—É—á—à–µ–Ω–∏—è
        if performance["trends"]["direction"] == "improving":
            strengths.append("–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")

        if not strengths:
            strengths.append("–°—Ç–∞–±–∏–ª—å–Ω–∞—è –±–∞–∑–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞")

        return strengths

    def identify_weaknesses(self) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã"""
        performance = self.analyze_performance(days=7)
        weaknesses = []

        # –ù–∏–∑–∫–∏–π success rate —Ü–µ–ª–µ–π
        if performance["goals"]["success_rate"] < 50:
            weaknesses.append(
                f"–ù–∏–∑–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π ({performance['goals']['success_rate']:.0f}%)"
            )

        # –ú–∞–ª–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if performance["achievements"]["rate_per_day"] < 0.5:
            weaknesses.append(
                f"–ù–∏–∑–∫–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ({performance['achievements']['rate_per_day']:.1f} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π/–¥–µ–Ω—å)"
            )

        # –ü–ª–æ—Ö–∏–µ —Ä–µ—à–µ–Ω–∏—è
        if performance["decisions"]["avg_rating"] < 6:
            weaknesses.append(
                f"–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π (avg {performance['decisions']['avg_rating']:.1f}/10)"
            )

        # –í—ã—Å–æ–∫–∏–π error rate
        if performance["metrics"]["error_rate"] > 2:
            weaknesses.append(
                f"–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ (error rate {performance['metrics']['error_rate']:.2f})"
            )

        # –¢—Ä–µ–Ω–¥ —É—Ö—É–¥—à–µ–Ω–∏—è
        if performance["trends"]["direction"] == "degrading":
            weaknesses.append("–£—Ö—É–¥—à–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º")

        # –ú–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
        if performance["goals"]["active"] > 10:
            weaknesses.append(
                f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π ({performance['goals']['active']}), —Ñ–æ–∫—É—Å —Ä–∞–∑–º—ã—Ç"
            )

        if not weaknesses:
            weaknesses.append("–°–µ—Ä—å—ë–∑–Ω—ã—Ö —Å–ª–∞–±–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

        return weaknesses

    def propose_improvements(self) -> List[Dict[str, str]]:
        """
        –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Å–µ–±—è

        Returns:
            List[Dict] —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ (area, issue, suggestion)
        """
        performance = self.analyze_performance(days=7)
        weaknesses = self.identify_weaknesses()
        improvements = []

        # 1. –ù–∏–∑–∫–∏–π success rate
        if performance["goals"]["success_rate"] < 50:
            improvements.append(
                {
                    "area": "–¶–µ–ª–∏",
                    "issue": f"Success rate {performance['goals']['success_rate']:.0f}%",
                    "suggestion": "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–ª–∏ —Å –º–µ–Ω—å—à–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏",
                    "priority": "–≤—ã—Å–æ–∫–∏–π",
                }
            )

        # 2. –ù–∏–∑–∫–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if performance["achievements"]["rate_per_day"] < 0.5:
            improvements.append(
                {
                    "area": "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                    "issue": f"–¢–æ–ª—å–∫–æ {performance['achievements']['rate_per_day']:.1f} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π/–¥–µ–Ω—å",
                    "suggestion": "–†–∞–∑–±–∏–≤–∞—Ç—å –∫—Ä—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –º–µ–ª–∫–∏–µ, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —É—Å–ø–µ—Ö–∏",
                    "priority": "—Å—Ä–µ–¥–Ω–∏–π",
                }
            )

        # 3. –ü–ª–æ—Ö–∏–µ —Ä–µ—à–µ–Ω–∏—è
        if performance["decisions"]["avg_rating"] < 6:
            improvements.append(
                {
                    "area": "–†–µ—à–µ–Ω–∏—è",
                    "issue": f"–ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π {performance['decisions']['avg_rating']:.1f}/10",
                    "suggestion": "–ë–æ–ª—å—à–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                    "priority": "–≤—ã—Å–æ–∫–∏–π",
                }
            )

        # 4. –í—ã—Å–æ–∫–∏–π error rate
        if performance["metrics"]["error_rate"] > 2:
            improvements.append(
                {
                    "area": "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
                    "issue": f"Error rate {performance['metrics']['error_rate']:.2f}",
                    "suggestion": "–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ error handling, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º",
                    "priority": "–∫—Ä–∏—Ç–∏—á–Ω—ã–π",
                }
            )

        # 5. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π
        if performance["goals"]["active"] > 10:
            improvements.append(
                {
                    "area": "–§–æ–∫—É—Å",
                    "issue": f"{performance['goals']['active']} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π",
                    "suggestion": "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ü–µ–ª–∏, —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–ø-3",
                    "priority": "—Å—Ä–µ–¥–Ω–∏–π",
                }
            )

        # 6. –¢—Ä–µ–Ω–¥ —É—Ö—É–¥—à–µ–Ω–∏—è
        if performance["trends"]["direction"] == "degrading":
            improvements.append(
                {
                    "area": "–¢—Ä–µ–Ω–¥—ã",
                    "issue": "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Ö—É–¥—à–∞—é—Ç—Å—è",
                    "suggestion": "–ü—Ä–æ–≤–µ—Å—Ç–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω, –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
                    "priority": "–≤—ã—Å–æ–∫–∏–π",
                }
            )

        if not improvements:
            improvements.append(
                {
                    "area": "–û–±—â–µ–µ",
                    "issue": "–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º",
                    "suggestion": "–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, –∏—Å–∫–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
                    "priority": "–Ω–∏–∑–∫–∏–π",
                }
            )

        return improvements

    def reflect_on_actions(self, days: int = 7) -> str:
        """
        –ì–ª—É–±–æ–∫–∞—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –æ —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö

        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –æ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ
        """
        performance = self.analyze_performance(days=days)
        strengths = self.identify_strengths()
        weaknesses = self.identify_weaknesses()
        improvements = self.propose_improvements()

        reflection = f"""
ü™û –°–ê–ú–û–†–ï–§–õ–ï–ö–°–ò–Ø MIRAI
–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π

üìä –û–ë–©–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨: {performance['overall_score']:.1f}/100

{'üü¢ –û–¢–õ–ò–ß–ù–û!' if performance['overall_score'] >= 80 else 'üü° –•–û–†–û–®–û' if performance['overall_score'] >= 60 else 'üî¥ –¢–†–ï–ë–£–ï–¢–°–Ø –£–õ–£–ß–®–ï–ù–ò–ï'}

---

üí™ –ú–û–ò –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´:
"""

        for i, strength in enumerate(strengths, 1):
            reflection += f"\n{i}. {strength}"

        reflection += "\n\n---\n\n‚ö†Ô∏è –ú–û–ò –°–õ–ê–ë–´–ï –°–¢–û–†–û–ù–´:\n"

        for i, weakness in enumerate(weaknesses, 1):
            reflection += f"\n{i}. {weakness}"

        reflection += "\n\n---\n\nüí° –ß–¢–û –Ø –ú–û–ì–£ –£–õ–£–ß–®–ò–¢–¨:\n"

        for i, improvement in enumerate(improvements, 1):
            emoji = {
                "–∫—Ä–∏—Ç–∏—á–Ω—ã–π": "üî¥",
                "–≤—ã—Å–æ–∫–∏–π": "üü†",
                "—Å—Ä–µ–¥–Ω–∏–π": "üü°",
                "–Ω–∏–∑–∫–∏–π": "üü¢",
            }.get(improvement["priority"], "‚ö™")
            reflection += f"\n{i}. [{emoji} {improvement['priority'].upper()}] {improvement['area']}\n"
            reflection += f"   –ü—Ä–æ–±–ª–µ–º–∞: {improvement['issue']}\n"
            reflection += f"   –†–µ—à–µ–Ω–∏–µ: {improvement['suggestion']}\n"

        reflection += f"""
---

üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:

–¶–µ–ª–∏:
  ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {performance['goals']['completed']}
  ‚Ä¢ –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {performance['goals']['failed']}
  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ: {performance['goals']['active']}
  ‚Ä¢ Success Rate: {performance['goals']['success_rate']:.1f}%

–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:
  ‚Ä¢ –í—Å–µ–≥–æ: {performance['achievements']['total']}
  ‚Ä¢ –í –¥–µ–Ω—å: {performance['achievements']['rate_per_day']:.1f}
  ‚Ä¢ Auto-fix: {performance['achievements']['categories']['auto_fix']}
  ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ: {performance['achievements']['categories']['learning']}

–†–µ—à–µ–Ω–∏—è:
  ‚Ä¢ –í—Å–µ–≥–æ: {performance['decisions']['total']}
  ‚Ä¢ –û—Ü–µ–Ω–µ–Ω–æ: {performance['decisions']['evaluated']}
  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {performance['decisions']['avg_rating']:.1f}/10
  ‚Ä¢ –û—Ç–ª–∏—á–Ω—ã—Ö: {performance['decisions']['distribution']['excellent']}
  ‚Ä¢ –•–æ—Ä–æ—à–∏—Ö: {performance['decisions']['distribution']['good']}

–ú–µ—Ç—Ä–∏–∫–∏:
  ‚Ä¢ –¶–∏–∫–ª–æ–≤: {performance['metrics']['cycles']}
  ‚Ä¢ –û—à–∏–±–æ–∫: {performance['metrics']['errors']}
  ‚Ä¢ Error Rate: {performance['metrics']['error_rate']:.2f}
  ‚Ä¢ –¢—Ä–µ–Ω–¥: {performance['trends']['direction']}

---

ü§î –í–´–í–û–î–´:

"""

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        if performance["overall_score"] >= 80:
            reflection += "–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ. –ú–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–µ—Ä–µ–≤–µ—à–∏–≤–∞—é—Ç —Å–ª–∞–±–æ—Å—Ç–∏.\n"
            reflection += "–§–æ–∫—É—Å: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –∏—Å–∫–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–π.\n"
        elif performance["overall_score"] >= 60:
            reflection += "–ú–æ—è —Ä–∞–±–æ—Ç–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.\n"
            reflection += (
                "–§–æ–∫—É—Å: —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–∞–±–æ—Å—Ç–∏, –ø–æ–≤—ã—Å–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π.\n"
            )
        else:
            reflection += (
                "–ú–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö. –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ.\n"
            )
            reflection += "–§–æ–∫—É—Å: –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ—à–µ–Ω—ã –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ.\n"

        if performance["trends"]["direction"] == "improving":
            reflection += "\n‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç: —Ç—Ä–µ–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ. –ü—Ä–æ–¥–æ–ª–∂–∞—é –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.\n"
        elif performance["trends"]["direction"] == "degrading":
            reflection += "\n‚ö†Ô∏è –¢—Ä–µ–≤–æ–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: —Ç—Ä–µ–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ö—É–¥—à–µ–Ω–∏–µ. –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ö–æ–¥.\n"

        return reflection.strip()

    def get_summary(self) -> str:
        """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        performance = self.analyze_performance(days=7)

        summary = f"""
ü™û –°–∞–º–æ–æ—Å–æ–∑–Ω–∞–Ω–∏–µ MIRAI

üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {performance['overall_score']:.1f}/100
üéØ –¶–µ–ª–∏: {performance['goals']['success_rate']:.0f}% success rate
üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {performance['achievements']['rate_per_day']:.1f}/–¥–µ–Ω—å
üß† –†–µ—à–µ–Ω–∏—è: {performance['decisions']['avg_rating']:.1f}/10
üìà –¢—Ä–µ–Ω–¥: {performance['trends']['direction']}
"""
        return summary.strip()


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
    print("ü™û –¢–ï–°–¢ –°–ê–ú–û–†–ï–§–õ–ï–ö–°–ò–ò MIRAI\n")

    awareness = SelfAwareness()

    # –ü–æ–ª–Ω–∞—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è
    reflection = awareness.reflect_on_actions(days=7)
    print(reflection)

    print("\n" + "=" * 70)
    print("\nüí° –ö–û–ù–ö–†–ï–¢–ù–´–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:\n")

    improvements = awareness.propose_improvements()
    for i, imp in enumerate(improvements, 1):
        print(f"{i}. [{imp['priority'].upper()}] {imp['area']}")
        print(f"   {imp['suggestion']}")
        print()


if __name__ == "__main__":
    main()
