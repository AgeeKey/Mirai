#!/usr/bin/env python3
"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  MIRAI Desktop Agent - –ñ–∏–≤–µ—Ç –≤ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ                     ‚ïë
‚ïë  –£–ø—Ä–∞–≤–ª—è–µ—Ç Windows –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ –±—Ä–∞—É–∑–µ—Ä–æ–º                         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- üñ±Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (pyautogui)
- ü™ü –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–∞–º–∏ Windows (win32gui, win32con)
- üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Chrome –±—Ä–∞—É–∑–µ—Ä–æ–º (Playwright)
- üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞ –∏ Vision –∞–Ω–∞–ª–∏–∑ (GPT-4o Vision)
- ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π (GPT-4o)
- üìÇ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    agent = MiraiDesktopAgent()
    agent.execute_task("–û—Ç–∫—Ä–æ–π Chrome, –Ω–∞–π–¥–∏ –≤ Google '–ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ' –∏ —Å–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
"""

import base64
import json
import logging
import os
import subprocess
import time
from dataclasses import dataclass
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

import pyautogui
import win32con
import win32gui
from openai import OpenAI
from PIL import Image

# Playwright –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    from playwright.sync_api import sync_playwright
    PLAYWRIGHT_AVAILABLE = True
except ImportError:
    PLAYWRIGHT_AVAILABLE = False
    print("‚ö†Ô∏è Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: pip install playwright")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º fail-safe (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –¥–≤–∏–≥–∞–π—Ç–µ –º—ã—à—å –≤ —É–≥–æ–ª —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)
pyautogui.FAILSAFE = True
pyautogui.PAUSE = 0.5  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏


@dataclass
class WindowInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫–Ω–µ Windows"""
    hwnd: int
    title: str
    class_name: str
    rect: Tuple[int, int, int, int]  # (left, top, right, bottom)
    is_visible: bool


class MiraiDesktopAgent:
    """
    –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Windows –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º
    
    –ú–æ–∂–µ—Ç:
    - –û—Ç–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    - –£–ø—Ä–∞–≤–ª—è—Ç—å –æ–∫–Ω–∞–º–∏
    - –ö–ª–∏–∫–∞—Ç—å –º—ã—à—å—é –∏ –ø–µ—á–∞—Ç–∞—Ç—å
    - –†–∞–±–æ—Ç–∞—Ç—å —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
    - –î–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ Vision
    - –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
    """
    
    def __init__(self, openai_api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
        
        Args:
            openai_api_key: API –∫–ª—é—á OpenAI (–∏–ª–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        """
        # OpenAI –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è –∏ Vision
        api_key = openai_api_key or os.getenv('OPENAI_API_KEY')
        if not api_key:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ configs/api_keys.json
            config_path = Path(__file__).parent.parent / "configs" / "api_keys.json"
            if config_path.exists():
                with open(config_path) as f:
                    config = json.load(f)
                    api_key = config.get("openai")
        
        if not api_key:
            raise ValueError("OpenAI API key –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY")
        
        self.client = OpenAI(api_key=api_key)
        self.model = "gpt-4o"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT-4o –¥–ª—è Vision –∏ –∞–≤—Ç–æ–Ω–æ–º–∏–∏
        
        # –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        self.screen_width, self.screen_height = pyautogui.size()
        logger.info(f"üñ•Ô∏è –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {self.screen_width}x{self.screen_height}")
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π
        self.action_history: List[Dict[str, Any]] = []
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–≥–µ–Ω—Ç–∞
        self.tools = self._create_tools()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        self.last_screenshot_path: Optional[str] = None
    
    def _create_tools(self) -> List[Dict]:
        """–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è GPT"""
        return [
            {
                "type": "function",
                "function": {
                    "name": "open_application",
                    "description": "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Windows –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –ø—É—Ç–∏",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "app_name": {
                                "type": "string",
                                "description": "–ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (chrome, notepad, explorer) –∏–ª–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ .exe"
                            },
                            "args": {
                                "type": "string",
                                "description": "–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                            }
                        },
                        "required": ["app_name"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "click_at_position",
                    "description": "–ö–ª–∏–∫–Ω—É—Ç—å –º—ã—à—å—é –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "x": {"type": "integer", "description": "X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞"},
                            "y": {"type": "integer", "description": "Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞"},
                            "clicks": {"type": "integer", "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ (1 –∏–ª–∏ 2)"},
                            "button": {"type": "string", "description": "–ö–Ω–æ–ø–∫–∞ –º—ã—à–∏: left, right, middle"}
                        },
                        "required": ["x", "y"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "type_text",
                    "description": "–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "text": {"type": "string", "description": "–¢–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞"},
                            "interval": {"type": "number", "description": "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)"}
                        },
                        "required": ["text"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "press_key",
                    "description": "–ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É –∏–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "keys": {
                                "type": "string",
                                "description": "–ö–ª–∞–≤–∏—à–∞ –∏–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è (enter, ctrl+c, alt+tab, win+r)"
                            }
                        },
                        "required": ["keys"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "take_screenshot",
                    "description": "–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –æ–±–ª–∞—Å—Ç–∏",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "region": {
                                "type": "string",
                                "description": "–û–±–ª–∞—Å—Ç—å –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'x,y,width,height' –∏–ª–∏ 'full'"
                            }
                        }
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "analyze_screenshot",
                    "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ—Ä–µ–∑ GPT-4 Vision",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "question": {
                                "type": "string",
                                "description": "–í–æ–ø—Ä–æ—Å –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ (—á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å? –≥–¥–µ –∫–Ω–æ–ø–∫–∞? –∏ —Ç.–¥.)"
                            }
                        },
                        "required": ["question"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "find_window",
                    "description": "–ù–∞–π—Ç–∏ –æ–∫–Ω–æ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏–ª–∏ —á–∞—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "title_contains": {
                                "type": "string",
                                "description": "–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –æ–∫–Ω–∞"
                            }
                        },
                        "required": ["title_contains"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "activate_window",
                    "description": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å (–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞) –æ–∫–Ω–æ",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "title_contains": {
                                "type": "string",
                                "description": "–¢–µ–∫—Å—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –æ–∫–Ω–∞"
                            }
                        },
                        "required": ["title_contains"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "browse_web",
                    "description": "–û—Ç–∫—Ä—ã—Ç—å Chrome –∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ URL",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "url": {"type": "string", "description": "URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è"},
                            "search_query": {"type": "string", "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è Google"}
                        }
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "wait_seconds",
                    "description": "–ü–æ–¥–æ–∂–¥–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "seconds": {"type": "number", "description": "–°–µ–∫—É–Ω–¥—ã –æ–∂–∏–¥–∞–Ω–∏—è"}
                        },
                        "required": ["seconds"]
                    }
                }
            }
        ]
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ë–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å Windows
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def open_application(self, app_name: str, args: str = "") -> str:
        """–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            # –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            common_apps = {
                "chrome": "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
                "firefox": "C:\\Program Files\\Mozilla Firefox\\firefox.exe",
                "edge": "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe",
                "notepad": "notepad.exe",
                "notepad++": "C:\\Program Files\\Notepad++\\notepad++.exe",
                "explorer": "explorer.exe",
                "cmd": "cmd.exe",
                "powershell": "powershell.exe",
                "calculator": "calc.exe",
                "paint": "mspaint.exe",
            }
            
            # –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
            app_path = common_apps.get(app_name.lower(), app_name)
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å
            full_cmd = f'"{app_path}" {args}' if args else app_path
            subprocess.Popen(full_cmd, shell=True)
            
            # –ü–æ–¥–æ–∂–¥–∞—Ç—å –∑–∞–ø—É—Å–∫–∞
            time.sleep(2)
            
            result = f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{app_name}' –∑–∞–ø—É—â–µ–Ω–æ"
            logger.info(result)
            self._log_action("open_application", {"app_name": app_name, "args": args}, result)
            return result
            
        except Exception as e:
            error = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ '{app_name}': {e}"
            logger.error(error)
            return error
    
    def click_at_position(self, x: int, y: int, clicks: int = 1, button: str = "left") -> str:
        """–ö–ª–∏–∫–Ω—É—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            pyautogui.click(x, y, clicks=clicks, button=button)
            result = f"‚úÖ –ö–ª–∏–∫ {button} –≤ ({x}, {y}) x{clicks}"
            logger.info(result)
            self._log_action("click", {"x": x, "y": y, "clicks": clicks, "button": button}, result)
            return result
        except Exception as e:
            error = f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}"
            logger.error(error)
            return error
    
    def type_text(self, text: str, interval: float = 0.05) -> str:
        """–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç"""
        try:
            pyautogui.write(text, interval=interval)
            result = f"‚úÖ –ù–∞–ø–µ—á–∞—Ç–∞–Ω —Ç–µ–∫—Å—Ç: '{text[:50]}...'" if len(text) > 50 else f"‚úÖ –ù–∞–ø–µ—á–∞—Ç–∞–Ω —Ç–µ–∫—Å—Ç: '{text}'"
            logger.info(result)
            self._log_action("type_text", {"text": text}, result)
            return result
        except Exception as e:
            error = f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {e}"
            logger.error(error)
            return error
    
    def press_key(self, keys: str) -> str:
        """–ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É –∏–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é"""
        try:
            # –†–∞–∑–±–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é (ctrl+c -> ['ctrl', 'c'])
            key_list = keys.lower().replace(' ', '').split('+')
            
            if len(key_list) == 1:
                pyautogui.press(key_list[0])
            else:
                pyautogui.hotkey(*key_list)
            
            result = f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞: {keys}"
            logger.info(result)
            self._log_action("press_key", {"keys": keys}, result)
            return result
        except Exception as e:
            error = f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏: {e}"
            logger.error(error)
            return error
    
    def take_screenshot(self, region: str = "full") -> str:
        """–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"""
        try:
            # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            screenshots_dir = Path("screenshots")
            screenshots_dir.mkdir(exist_ok=True)
            
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            filepath = screenshots_dir / f"screenshot_{timestamp}.png"
            
            # –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
            if region == "full":
                screenshot = pyautogui.screenshot()
            else:
                # –ü–∞—Ä—Å–∏–º —Ä–µ–≥–∏–æ–Ω: "x,y,width,height"
                parts = [int(p) for p in region.split(',')]
                screenshot = pyautogui.screenshot(region=tuple(parts))
            
            screenshot.save(filepath)
            self.last_screenshot_path = str(filepath)
            
            result = f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}"
            logger.info(result)
            self._log_action("screenshot", {"region": region}, result)
            return result
            
        except Exception as e:
            error = f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}"
            logger.error(error)
            return error
    
    def analyze_screenshot(self, question: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ GPT-4 Vision"""
        try:
            if not self.last_screenshot_path:
                return "‚ùå –ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç."
            
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with open(self.last_screenshot_path, "rb") as img_file:
                img_data = base64.b64encode(img_file.read()).decode()
            
            # –ó–∞–ø—Ä–æ—Å –∫ GPT-4 Vision
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": question},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/png;base64,{img_data}"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=1000
            )
            
            analysis = response.choices[0].message.content
            result = f"üîç –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:\n{analysis}"
            logger.info(result)
            self._log_action("analyze_screenshot", {"question": question}, analysis)
            return result
            
        except Exception as e:
            error = f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"
            logger.error(error)
            return error
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–∞–º–∏ Windows
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def find_window(self, title_contains: str) -> str:
        """–ù–∞–π—Ç–∏ –æ–∫–Ω–æ –ø–æ —á–∞—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        try:
            windows = self._get_all_windows()
            matching = [w for w in windows if title_contains.lower() in w.title.lower() and w.is_visible]
            
            if not matching:
                return f"‚ùå –û–∫–Ω–æ —Å '{title_contains}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            result = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–∫–æ–Ω: {len(matching)}\n"
            for w in matching[:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
                result += f"  ‚Ä¢ {w.title}\n"
            
            logger.info(result)
            return result
            
        except Exception as e:
            error = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–∫–Ω–∞: {e}"
            logger.error(error)
            return error
    
    def activate_window(self, title_contains: str) -> str:
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ"""
        try:
            windows = self._get_all_windows()
            matching = [w for w in windows if title_contains.lower() in w.title.lower() and w.is_visible]
            
            if not matching:
                return f"‚ùå –û–∫–Ω–æ —Å '{title_contains}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ
            window = matching[0]
            win32gui.ShowWindow(window.hwnd, win32con.SW_RESTORE)
            win32gui.SetForegroundWindow(window.hwnd)
            
            time.sleep(0.5)
            
            result = f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –æ–∫–Ω–æ: {window.title}"
            logger.info(result)
            self._log_action("activate_window", {"title": title_contains}, result)
            return result
            
        except Exception as e:
            error = f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–∫–Ω–∞: {e}"
            logger.error(error)
            return error
    
    def _get_all_windows(self) -> List[WindowInfo]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–∫–æ–Ω"""
        windows = []
        
        def callback(hwnd, _):
            if win32gui.IsWindowVisible(hwnd):
                title = win32gui.GetWindowText(hwnd)
                if title:
                    class_name = win32gui.GetClassName(hwnd)
                    rect = win32gui.GetWindowRect(hwnd)
                    windows.append(WindowInfo(
                        hwnd=hwnd,
                        title=title,
                        class_name=class_name,
                        rect=rect,
                        is_visible=True
                    ))
        
        win32gui.EnumWindows(callback, None)
        return windows
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –†–∞–±–æ—Ç–∞ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def browse_web(self, url: str = None, search_query: str = None) -> str:
        """–û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ URL –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫"""
        try:
            # –û—Ç–∫—Ä—ã—Ç—å Chrome
            if url:
                self.open_application("chrome", f'"{url}"')
                return f"‚úÖ –û—Ç–∫—Ä—ã—Ç Chrome —Å URL: {url}"
            elif search_query:
                google_url = f"https://www.google.com/search?q={search_query.replace(' ', '+')}"
                self.open_application("chrome", f'"{google_url}"')
                return f"‚úÖ –û—Ç–∫—Ä—ã—Ç Chrome —Å –ø–æ–∏—Å–∫–æ–º: {search_query}"
            else:
                self.open_application("chrome")
                return "‚úÖ –û—Ç–∫—Ä—ã—Ç Chrome"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}"
    
    def wait_seconds(self, seconds: float) -> str:
        """–ü–æ–¥–æ–∂–¥–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        try:
            time.sleep(seconds)
            return f"‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ {seconds}—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è: {e}"
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def execute_task(self, task_description: str, max_iterations: int = 20) -> str:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–Ω–æ–º–Ω–æ
        
        –ê–≥–µ–Ω—Ç —Å–∞–º —Ä–µ—à–∞–µ—Ç, –∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        """
        logger.info(f"üéØ –ó–∞–¥–∞—á–∞: {task_description}")
        
        messages = [
            {
                "role": "system",
                "content": f"""–¢—ã MIRAI - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∂–∏–≤–µ—Ç –≤ Windows –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–¢—ã –º–æ–∂–µ—à—å:
‚úÖ –û—Ç–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Chrome, Notepad, Calculator, –∏ —Ç.–¥.)
‚úÖ –ö–ª–∏–∫–∞—Ç—å –º—ã—à—å—é –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —ç–∫—Ä–∞–Ω–∞
‚úÖ –ü–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
‚úÖ –ù–∞–∂–∏–º–∞—Ç—å –∫–ª–∞–≤–∏—à–∏ –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (Enter, Ctrl+C, Alt+Tab, Win+R)
‚úÖ –î–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —á–µ—Ä–µ–∑ Vision (–≤–∏–¥–µ—Ç—å —á—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ)
‚úÖ –ù–∞—Ö–æ–¥–∏—Ç—å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –æ–∫–Ω–∞–º–∏
‚úÖ –û—Ç–∫—Ä—ã–≤–∞—Ç—å Chrome –∏ –∏—Å–∫–∞—Ç—å –≤ Google
‚úÖ –ñ–¥–∞—Ç—å –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ

–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {self.screen_width}x{self.screen_height}

–í–ê–ñ–ù–û:
- –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–µ–ª–∞–π –ø–∞—É–∑—É (wait_seconds 1-3 —Å–µ–∫—É–Ω–¥—ã)
- –î–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
- –ò—Å–ø–æ–ª—å–∑—É–π analyze_screenshot —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
- –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥

–¢–≤–æ—è –∑–∞–¥–∞—á–∞: {task_description}

–î–µ–π—Å—Ç–≤—É–π —É–º–Ω–æ –∏ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!"""
            }
        ]
        
        for iteration in range(max_iterations):
            logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1}/{max_iterations}")
            
            try:
                # –ó–∞–ø—Ä–æ—Å –∫ GPT-4
                response = self.client.chat.completions.create(
                    model=self.model,
                    messages=messages,
                    tools=self.tools,
                    tool_choice="auto"
                )
                
                response_message = response.choices[0].message
                messages.append(response_message)
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π - –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                if not response_message.tool_calls:
                    final_response = response_message.content or "–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {final_response}")
                    return final_response
                
                # –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
                for tool_call in response_message.tool_calls:
                    function_name = tool_call.function.name
                    function_args = json.loads(tool_call.function.arguments)
                    
                    logger.info(f"üîß –í—ã–∑–æ–≤: {function_name}({function_args})")
                    
                    # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
                    result = self._execute_function(function_name, function_args)
                    
                    logger.info(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
                    
                    # –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
                    messages.append({
                        "tool_call_id": tool_call.id,
                        "role": "tool",
                        "name": function_name,
                        "content": result
                    })
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}: {e}"
                logger.error(error_msg)
                return error_msg
        
        return "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π. –ó–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é."
    
    def _execute_function(self, name: str, args: Dict[str, Any]) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ –∏–º–µ–Ω–∏"""
        function_map = {
            "open_application": self.open_application,
            "click_at_position": self.click_at_position,
            "type_text": self.type_text,
            "press_key": self.press_key,
            "take_screenshot": self.take_screenshot,
            "analyze_screenshot": self.analyze_screenshot,
            "find_window": self.find_window,
            "activate_window": self.activate_window,
            "browse_web": self.browse_web,
            "wait_seconds": self.wait_seconds,
        }
        
        if name in function_map:
            return function_map[name](**args)
        else:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {name}"
    
    def _log_action(self, action: str, params: Dict, result: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.action_history.append({
            "timestamp": time.time(),
            "action": action,
            "params": params,
            "result": result
        })
    
    def get_action_history(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π"""
        return self.action_history


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

if __name__ == "__main__":
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë  MIRAI Desktop Agent - –ñ–∏–≤–µ—Ç –≤ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ                     ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print()
    
    # –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
    agent = MiraiDesktopAgent()
    
    print("ü§ñ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print()
    
    # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á
    examples = [
        "–û—Ç–∫—Ä–æ–π Chrome, –Ω–∞–π–¥–∏ –≤ Google '–ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ' –∏ —Å–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç",
        "–û—Ç–∫—Ä–æ–π Notepad –∏ –Ω–∞–ø–∏—à–∏ 'Hello from MIRAI'",
        "–ù–∞–π–¥–∏ –æ–∫–Ω–æ Chrome –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞ –Ω–µ–≥–æ",
        "–û—Ç–∫—Ä–æ–π Calculator –∏ –≤—ã—á–∏—Å–ª–∏ 2+2",
    ]
    
    print("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:")
    for i, example in enumerate(examples, 1):
        print(f"  {i}. {example}")
    print()
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    print("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    print("-" * 70)
    
    while True:
        try:
            task = input("\nüéØ –ó–∞–¥–∞—á–∞: ").strip()
            
            if task.lower() in ['exit', 'quit', 'q']:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not task:
                continue
            
            print()
            print("ü§î –ê–≥–µ–Ω—Ç –¥—É–º–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É...")
            print("-" * 70)
            
            result = agent.execute_task(task)
            
            print()
            print("=" * 70)
            print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print("=" * 70)
            print(result)
            print("=" * 70)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π
            if len(agent.action_history) > 0:
                print()
                print("üìù –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):")
                for action in agent.action_history[-5:]:
                    print(f"  ‚Ä¢ {action['action']}: {action['params']}")
        
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
