#!/usr/bin/env python3
"""
üéØ –†–ï–ê–õ–¨–ù–´–ï –ó–∞–¥–∞—á–∏ –¥–ª—è MIRAI
–ó–∞–º–µ–Ω–∞ "TODO" –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∏–∑–º–µ—Ä–∏–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
"""

import subprocess
import json
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, List
from collections import Counter
import re


class RealTaskExecutor:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤–º–µ—Å—Ç–æ TODO"""
    
    def __init__(self, base_dir: str = "/root/mirai"):
        self.base_dir = Path(base_dir)
        self.reports_dir = self.base_dir / "reports"
        self.metrics_dir = self.base_dir / "metrics"
        self.knowledge_dir = self.base_dir / "knowledge_base"
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.reports_dir.mkdir(exist_ok=True)
        self.metrics_dir.mkdir(exist_ok=True)
        self.knowledge_dir.mkdir(exist_ok=True)
    
    def task1_analyze_logs_and_report(self) -> Dict:
        """
        –ó–ê–î–ê–ß–ê 1: –ê–Ω–∞–ª–∏–∑ –õ–æ–≥–æ–≤ –∏ –°–æ–∑–¥–∞–Ω–∏–µ –û—Ç—á—ë—Ç–∞
        
        –ò–∑–º–µ—Ä–∏–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –§–∞–π–ª reports/daily_analysis_YYYY-MM-DD.md —Å–æ–∑–¥–∞–Ω
        """
        print("üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤...")
        
        # –ß–∏—Ç–∞–µ–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        logs = self._read_journalctl_logs(since="24 hours ago")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        analysis = self._analyze_logs(logs)
        
        # –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç
        report_date = datetime.now().strftime("%Y-%m-%d")
        report_content = self._generate_report(analysis, report_date)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
        report_file = self.reports_dir / f"daily_analysis_{report_date}.md"
        report_file.write_text(report_content, encoding='utf-8')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_file = self.reports_dir / f"daily_stats_{report_date}.json"
        stats_file.write_text(json.dumps(analysis, indent=2, ensure_ascii=False), encoding='utf-8')
        
        result = {
            "task": "analyze_logs_and_report",
            "status": "COMPLETED",
            "timestamp": datetime.now().isoformat(),
            "report_file": str(report_file),
            "stats_file": str(stats_file),
            "summary": {
                "total_lines": analysis['total_lines'],
                "errors": analysis['error_count'],
                "warnings": analysis['warning_count'],
                "autonomous_cycles": analysis['autonomous_cycles']
            }
        }
        
        print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_file}")
        
        return result
    
    def _read_journalctl_logs(self, since: str = "24 hours ago") -> List[str]:
        """–ß–∏—Ç–∞–µ—Ç –ª–æ–≥–∏ –∏–∑ journalctl"""
        try:
            cmd = ["sudo", "journalctl", "-u", "mirai", "--since", since, "--no-pager"]
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                return result.stdout.split('\n')
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {result.stderr}")
                return []
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥–∏: {e}")
            return []
    
    def _analyze_logs(self, logs: List[str]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        
        analysis = {
            "total_lines": len(logs),
            "error_count": 0,
            "warning_count": 0,
            "info_count": 0,
            "autonomous_cycles": 0,
            "todo_count": 0,
            "errors": [],
            "warnings": [],
            "top_messages": [],
            "cycle_numbers": [],
            "timestamp_first": None,
            "timestamp_last": None
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        error_pattern = re.compile(r'(ERROR|error|–æ—à–∏–±–∫–∞|failed|failure)', re.IGNORECASE)
        warning_pattern = re.compile(r'(WARNING|warning|–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)', re.IGNORECASE)
        cycle_pattern = re.compile(r'–ê–í–¢–û–ù–û–ú–ù–´–ô –¶–ò–ö–õ #(\d+)')
        todo_pattern = re.compile(r'TODO:', re.IGNORECASE)
        
        message_counter = Counter()
        
        for line in logs:
            if not line.strip():
                continue
            
            # –°—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–∏
            if error_pattern.search(line):
                analysis['error_count'] += 1
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
                if len(analysis['errors']) < 10:
                    error_msg = line.split(':', 3)[-1].strip()[:200]
                    if error_msg and error_msg not in analysis['errors']:
                        analysis['errors'].append(error_msg)
            
            # –°—á–∏—Ç–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if warning_pattern.search(line):
                analysis['warning_count'] += 1
                if len(analysis['warnings']) < 10:
                    warn_msg = line.split(':', 3)[-1].strip()[:200]
                    if warn_msg and warn_msg not in analysis['warnings']:
                        analysis['warnings'].append(warn_msg)
            
            # –°—á–∏—Ç–∞–µ–º —Ü–∏–∫–ª—ã
            cycle_match = cycle_pattern.search(line)
            if cycle_match:
                analysis['autonomous_cycles'] += 1
                cycle_num = int(cycle_match.group(1))
                analysis['cycle_numbers'].append(cycle_num)
            
            # –°—á–∏—Ç–∞–µ–º TODO
            if todo_pattern.search(line):
                analysis['todo_count'] += 1
            
            # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if any(keyword in line for keyword in ['ü§ñ', 'üå∏', '‚úÖ', '‚ùå', '–ö–ê–ô–î–ó–ï–ù', 'MIRAI']):
                msg = line.split(':', 3)[-1].strip()[:100]
                if msg:
                    message_counter[msg] += 1
            
            # INFO —Å–æ–æ–±—â–µ–Ω–∏—è
            if 'INFO' in line or 'info' in line:
                analysis['info_count'] += 1
        
        # –¢–æ–ø —Å–æ–æ–±—â–µ–Ω–∏–π
        analysis['top_messages'] = [
            {"message": msg, "count": count} 
            for msg, count in message_counter.most_common(10)
        ]
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        if logs:
            for line in logs:
                if line.strip():
                    analysis['timestamp_first'] = line.split()[0:3]
                    break
            for line in reversed(logs):
                if line.strip():
                    analysis['timestamp_last'] = line.split()[0:3]
                    break
        
        return analysis
    
    def _generate_report(self, analysis: Dict, date: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Markdown –æ—Ç—á—ë—Ç"""
        
        report = f"""# üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ê–Ω–∞–ª–∏–∑ –õ–æ–≥–æ–≤ MIRAI

**–î–∞—Ç–∞:** {date}
**–ü–µ—Ä–∏–æ–¥:** –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
**–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

---

## üìà –û–±—â–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:** {analysis['total_lines']:,}
- **–û—à–∏–±–∫–∏:** {analysis['error_count']:,}
- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:** {analysis['warning_count']:,}
- **–ò–Ω—Ñ–æ —Å–æ–æ–±—â–µ–Ω–∏—è:** {analysis['info_count']:,}
- **–ê–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤:** {analysis['autonomous_cycles']:,}
- **TODO –∑–∞–ø–∏—Å–µ–π:** {analysis['todo_count']:,}

---

## üî¥ –¢–æ–ø –û—à–∏–±–æ–∫

"""
        
        if analysis['errors']:
            for i, error in enumerate(analysis['errors'], 1):
                report += f"{i}. `{error}`\n"
        else:
            report += "*–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ* ‚úÖ\n"
        
        report += "\n---\n\n## ‚ö†Ô∏è –¢–æ–ø –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n\n"
        
        if analysis['warnings']:
            for i, warning in enumerate(analysis['warnings'], 1):
                report += f"{i}. `{warning}`\n"
        else:
            report += "*–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ* ‚úÖ\n"
        
        report += "\n---\n\n## üí¨ –¢–æ–ø –°–æ–æ–±—â–µ–Ω–∏–π (–ß–∞—Å—Ç–æ—Ç–∞)\n\n"
        
        for item in analysis['top_messages'][:5]:
            report += f"- `{item['message']}` - **{item['count']}** —Ä–∞–∑\n"
        
        report += "\n---\n\n## üîÑ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –¶–∏–∫–ª—ã\n\n"
        
        if analysis['cycle_numbers']:
            report += f"- **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª:** #{min(analysis['cycle_numbers'])}\n"
            report += f"- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª:** #{max(analysis['cycle_numbers'])}\n"
            report += f"- **–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:** {len(analysis['cycle_numbers'])} —Ü–∏–∫–ª–æ–≤\n"
        else:
            report += "*–¶–∏–∫–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n"
        
        report += "\n---\n\n## üö® TODO –ü—Ä–æ–±–ª–µ–º–∞\n\n"
        
        if analysis['todo_count'] > 0:
            report += f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï:** –ù–∞–π–¥–µ–Ω–æ {analysis['todo_count']} –∑–∞–ø–∏—Å–µ–π TODO!\n\n"
            report += "–≠—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ MIRAI –ª–æ–≥–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è, –Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö.\n"
            report += "**–¢—Ä–µ–±—É–µ—Ç—Å—è:** –ó–∞–º–µ–Ω–∏—Ç—å TODO –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—é.\n"
        else:
            report += "‚úÖ TODO –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - MIRAI —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n"
        
        report += "\n---\n\n## üìä –û—Ü–µ–Ω–∫–∞ –ó–¥–æ—Ä–æ–≤—å—è\n\n"
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∑–¥–æ—Ä–æ–≤—å—è
        health_score = 100
        
        if analysis['error_count'] > 10:
            health_score -= 30
        elif analysis['error_count'] > 5:
            health_score -= 15
        
        if analysis['todo_count'] > 10:
            health_score -= 20
        elif analysis['todo_count'] > 5:
            health_score -= 10
        
        if analysis['warning_count'] > 20:
            health_score -= 10
        
        if analysis['autonomous_cycles'] == 0:
            health_score -= 40
        
        if health_score >= 90:
            grade = "üü¢ –û–¢–õ–ò–ß–ù–û"
        elif health_score >= 70:
            grade = "üü° –•–û–†–û–®–û"
        elif health_score >= 50:
            grade = "üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
        else:
            grade = "üî¥ –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø"
        
        report += f"**–û—Ü–µ–Ω–∫–∞:** {health_score}/100 - {grade}\n\n"
        
        report += "---\n\n*–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ MIRAI Real Task Executor*\n"
        
        return report


def main():
    """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ 1 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    executor = RealTaskExecutor()
    result = executor.task1_analyze_logs_and_report()
    
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ß–ò")
    print("="*60)
    print(json.dumps(result, indent=2, ensure_ascii=False))


if __name__ == "__main__":
    main()
