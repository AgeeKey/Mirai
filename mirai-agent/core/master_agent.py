"""
MASTER AGENT - –ï–¥–∏–Ω–æ–µ —è–¥—Ä–æ Mirai Agent
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
"""

import asyncio

from core.ai_engine import AIEngine
from core.config import Config
from modules.agent.autonomous import AutonomousAgent
from modules.trading.trader import Trader
from modules.api.server import APIServer
from modules.utils.logger import Logger


class MasterAgent:
    """–ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç - —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º"""

    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = Config.load()

        # –õ–æ–≥–≥–µ—Ä—ã
        self.logger = Logger("MasterAgent")
        agent_logger = Logger("AutonomousAgent")
        trader_logger = Logger("Trader")
        api_logger = Logger("APIServer")

        # AI –¥–≤–∏–∂–æ–∫
        self.ai_engine = AIEngine(
            openai_key=self.config.openai_key,
            grok_key=self.config.grok_key,
        )

        # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç
        self.autonomous = AutonomousAgent(
            ai_engine=self.ai_engine,
            logger=agent_logger,
            config={
                "data_dir": str(self.config.data_dir),
                "logs_dir": str(self.config.logs_dir),
                "cycle_interval": self.config.agent_settings.cycle_interval,
                "max_goals": self.config.agent_settings.max_goals,
                "learning_sessions_limit": self.config.agent_settings.learning_sessions_limit,
            },
        )

        # –¢—Ä–µ–π–¥–µ—Ä
        self.trader = Trader(
            config=self.config.trading,
            ai_engine=self.ai_engine,
            logger=trader_logger,
            runtime_config={
                "cycle_interval": self.config.trader_settings.cycle_interval,
                "demo_mode": self.config.trader_settings.demo_mode,
            },
        )

        # API —Å–µ—Ä–≤–µ—Ä
        self.api = APIServer(
            agent=self.autonomous,
            trader=self.trader,
            logger=api_logger,
        )

        self.logger.info("ü§ñ MasterAgent initialized")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.logger.info("üöÄ Starting MasterAgent...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            self.autonomous.run(),  # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç
            self.trader.run(),  # –¢—Ä–µ–π–¥–µ—Ä
            self.api.run(),  # API —Å–µ—Ä–≤–µ—Ä
        ]

        await asyncio.gather(*tasks)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        self.logger.info("‚è∏Ô∏è Stopping MasterAgent...")

        await self.autonomous.stop()
        await self.trader.stop()
        await self.api.stop()

        self.logger.info("‚úÖ MasterAgent stopped")


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    agent = MasterAgent()

    try:
        await agent.start()
    except KeyboardInterrupt:
        await agent.stop()


if __name__ == "__main__":
    asyncio.run(main())
